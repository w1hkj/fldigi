# data file for the Fltk User Interface Designer (fluid)
version 1.0305
i18n_type 1
i18n_include "gettext.h"
i18n_function _
header_name {.h}
code_name {.cxx}
decl {\#include <config.h>} {private local
}

decl {\#include <FL/Fl_Tooltip.H>} {private local
}

decl {\#include <FL/Fl_Box.H>} {private local
}

decl {\#include <FL/filename.H>} {private local
}

decl {\#include <FL/Fl_File_Chooser.H>} {private local
}

decl {\#include <FL/fl_show_colormap.H>} {private local
}

decl {\#include "main.h"} {private local
}

decl {\#include "fl_digi.h"} {private local
}

decl {\#include "data_io.h"} {private local
}

decl {\#include "Viewer.h"} {private global
}

decl {\#include "font_browser.h"} {public global
}

decl {\#include "soundconf.h"} {private local
}

decl {\#include "globals.h"} {public local
}

decl {\#include "modem.h"} {public local
}

decl {\#include "configuration.h"} {public local
}

decl {\#include "combo.h"} {public local
}

decl {\#include "waterfall.h"} {private local
}

decl {\#include "rigxml.h"} {private local
}

decl {\#include "lookupcall.h"} {private local
}

decl {\#include "icons.h"} {private local
}

decl {\#include "Viewer.h"} {private local
}

decl {\#include "pskrep.h"} {private global
}

decl {\#include "flinput2.h"} {public local
}

decl {\#include "flslider2.h"} {public local
}

decl {\#include "flmisc.h"} {public local
}

decl {\#include "logsupport.h"} {private local
}

decl {\#include "notify.h"} {private local
}

decl {\#include "debug.h"} {private local
}

decl {\#include "status.h"} {private local
}

decl {\#include "rx_extract.h"} {private local
}

decl {\#include "kmlserver.h"} {private local
}

decl {\#include "macroedit.h"} {private local
}

decl {\#include "fileselect.h"} {private local
}

decl {\#include "psm/psm.h"} {private local
}

decl {\#include "dx_cluster.h"} {private local
}

decl {extern void WefaxDestDirSet(Fl_File_Chooser *w, void *userdata);} {private local
}

decl {\#include "dx_dialog.h"} {private local
}

decl {\#if USE_HAMLIB
  \#include "hamlib.h"
\#endif} {private local
}

decl {\#include "fsq.h"} {private local
}

decl {Fl_Double_Window *dlgConfig;} {public local
}

decl {Mode_Browser* mode_browser;} {public local
}

decl {\#include <vector>} {private local
}

decl {struct CONFIG_PAGE {Fl_Group *grp; std::string label; CONFIG_PAGE(Fl_Group *_grp = 0, std::string _lbl = "") { grp = _grp; label = _lbl; } ~CONFIG_PAGE() { if (grp) delete grp; } };} {public global
}

decl {std::vector<CONFIG_PAGE *> config_pages;} {public local
}

decl {Fl_Group *current = 0;} {private local
}

Function {SelectItem_CB(Fl_Widget *w)} {open return_type void
} {
  code {Fl_Tree *tree = (Fl_Tree*)w;
Fl_Tree_Item *item = tree->callback_item();
tree->select_only(item, 0);
  
if (tree->callback_reason() == FL_TREE_REASON_SELECTED) {
  std::string pname;
  char pn[200];
  tree->item_pathname(pn, 200, item);
  pname = pn;
  size_t pos = std::string::npos;
  for (size_t i = 0; i < config_pages.size(); i++) {
    if ((pos = pname.find(config_pages[i]->label)) != std::string::npos) {
      if (pname.substr(pos) == config_pages[i]->label) {
        if (current) current->hide();
        current = config_pages[i]->grp;
        current->show();
        return;
      }
    }
  }
}} {}
}

Function {choose_color(Fl_Color & c)} {open private return_type void
} {
  code {unsigned char r, g, b;
Fl::get_color(c, r, g, b);
if (fl_color_chooser("Font color", r, g, b))
    c = fl_rgb_color(r, g, b);} {}
}

Function {cbRxFontBrowser(Fl_Widget*, void*)} {open private return_type void
} {
  code {Fl_Font font = font_browser->fontNumber();
    int size = font_browser->fontSize();
    Fl_Color color = font_browser->fontColor();

    RxText->textfont(font);
    RxText->textsize(size);
    RxText->textcolor(color);
    RxText->redraw();

    progdefaults.RxFontnbr = font;
    progdefaults.RxFontsize = size;
    progdefaults.RxFontcolor = color;

    ReceiveText->setFont(font);
    ReceiveText->setFontSize(size);
    ReceiveText->setFontColor(progdefaults.RxFontcolor, FTextBase::RECV);

    fsq_rx_text->setFont(font);
    fsq_rx_text->setFontSize(size);
    fsq_rx_text->setFontColor(progdefaults.RxFontcolor, FTextBase::RECV);

    ifkp_rx_text->setFont(font);
    ifkp_rx_text->setFontSize(size);
    ifkp_rx_text->setFontColor(progdefaults.RxFontcolor, FTextBase::RECV);

    font_browser->hide();

    progdefaults.changed = true;} {}
}

Function {cbTxFontBrowser(Fl_Widget*, void*)} {private return_type void
} {
  code {Fl_Font font = font_browser->fontNumber();
    int size = font_browser->fontSize();
    Fl_Color color = font_browser->fontColor();

    TxText->textfont(font);
    TxText->textsize(size);
    TxText->textcolor(color);
    TxText->redraw();

    progdefaults.TxFontnbr = font;
    progdefaults.TxFontsize = size;
    progdefaults.TxFontcolor = color;

    TransmitText->setFont(font);
    TransmitText->setFontSize(size);
    TransmitText->setFontColor(progdefaults.TxFontcolor, FTextBase::RECV);

    fsq_tx_text->setFont(font);
    fsq_tx_text->setFontSize(size);
    fsq_tx_text->setFontColor(progdefaults.RxFontcolor, FTextBase::RECV);

    ifkp_rx_text->setFont(font);
    ifkp_rx_text->setFontSize(size);
    ifkp_rx_text->setFontColor(progdefaults.RxFontcolor, FTextBase::RECV);

     font_browser->hide();

    progdefaults.changed = true;} {}
}

Function {cbDXfont_browser(Fl_Widget*, void*)} {open private return_type void
} {
  code {Fl_Font font = font_browser->fontNumber();
int size = font_browser->fontSize();
Fl_Color color = font_browser->fontColor();

progdefaults.DXfontcolor = color;
progdefaults.DXfontnbr = font;
progdefaults.DXfontsize = size;

brws_tcpip_stream->setFont(font);
brws_tcpip_stream->setFontSize(size);
brws_tcpip_stream->setFontColor(color, FTextBase::RECV);
brws_tcpip_stream->redraw();

ed_telnet_cmds->setFont(font);
ed_telnet_cmds->setFontSize(size);
ed_telnet_cmds->setFontColor(color);
ed_telnet_cmds->redraw();

StreamText->textcolor(color);
StreamText->redraw();

brws_dxc_help->color(fl_rgb_color(
    progdefaults.DX_Color.R,
    progdefaults.DX_Color.G,
    progdefaults.DX_Color.B));    
brws_dxc_help->setFont(font);
brws_dxc_help->setFontSize(size);
brws_dxc_help->setFontColor(color, FTextBase::RECV);
brws_dxc_help->redraw();
       
font_browser->hide();

dxcluster_hosts_load();

progdefaults.changed = true;} {}
}

Function {cbDXC_FontBrowser(Fl_Widget*, void*)} {open private return_type void
} {
  code {Fl_Font font = font_browser->fontNumber();
    int size = font_browser->fontSize();
    Fl_Color color = font_browser->fontColor();

    progdefaults.DXC_textfont = font;
    progdefaults.DXC_textsize = size;
    progdefaults.DXC_textcolor = color;

    DXC_display->textsize(size);
    DXC_display->textcolor(color);
    DXC_display->textfont(font);
    DXC_display->redraw();

    font_browser->hide();

    dxc_lines_redraw();

    progdefaults.changed = true;} {}
}

Function {cbMacroEditFontBrowser(Fl_Widget*, void*)} {private return_type void
} {
  code {Fl_Font font = font_browser->fontNumber();
    int size = font_browser->fontSize();

    MacroText->textfont(font);
    MacroText->textsize(size);
    MacroText->redraw();

    progdefaults.MacroEditFontnbr = font;
    progdefaults.MacroEditFontsize = size;

    update_macroedit_font();

    MacroText->textfont(font);
    MacroText->textsize(size);

    font_browser->hide();

    progdefaults.changed = true;} {}
}

Function {cbWaterfallFontBrowser(Fl_Widget*, void*)} {return_type void
} {
  code {Fl_Font fnt = font_browser->fontNumber();
    int size = font_browser->fontSize();

    progdefaults.WaterfallFontnbr = fnt;
    progdefaults.WaterfallFontsize = size;
    progdefaults.changed = true;

    font_browser->hide();} {}
}

Function {cbMacroBtnFontBrowser(Fl_Widget*, void*)} {private return_type void
} {
  code {progdefaults.MacroBtnFontnbr = font_browser->fontNumber();
    progdefaults.MacroBtnFontsize = font_browser->fontSize();;
    progdefaults.MacroBtnFontcolor = font_browser->fontColor();

    font_browser->hide();

    btnGroup1->labelcolor(progdefaults.MacroBtnFontcolor);
    btnGroup1->labelfont(progdefaults.MacroBtnFontnbr);
    btnGroup1->labelsize(progdefaults.MacroBtnFontsize);
    btnGroup1->redraw_label();

    btnGroup2->labelcolor(progdefaults.MacroBtnFontcolor);
    btnGroup2->labelfont(progdefaults.MacroBtnFontnbr);
    btnGroup2->labelsize(progdefaults.MacroBtnFontsize);
    btnGroup2->redraw_label();

    btnGroup3->labelcolor(progdefaults.MacroBtnFontcolor);
    btnGroup3->labelfont(progdefaults.MacroBtnFontnbr);
    btnGroup3->labelsize(progdefaults.MacroBtnFontsize);
    btnGroup3->redraw_label();

    progdefaults.changed = true;
    colorize_macros();} {}
}

Function {cbViewerFontBrowser(Fl_Widget*, void*)} {return_type void
} {
  code {progdefaults.ViewerFontnbr = font_browser->fontNumber();
    progdefaults.ViewerFontsize = font_browser->fontSize();
    initViewer();
    progdefaults.changed = true;

    font_browser->hide();} {}
}

Function {cbFreqControlFontBrowser(Fl_Widget*, void*)} {return_type void
} {
  code {Fl_Font fnt = font_browser->fontNumber();
    progdefaults.FreqControlFontnbr = fnt;
    progdefaults.changed = true;

    FDdisplay->labelfont(progdefaults.FreqControlFontnbr);
    FDdisplay->redraw();
    qsoFreqDisp1->font(progdefaults.FreqControlFontnbr);
    qsoFreqDisp2->font(progdefaults.FreqControlFontnbr);
    qsoFreqDisp3->font(progdefaults.FreqControlFontnbr);
    qsoFreqDisp1->redraw();
    qsoFreqDisp2->redraw();
    qsoFreqDisp3->redraw();

    font_browser->hide();} {}
}

Function {cbLOGGINGFontBrowser(Fl_Widget*, void*)} {private return_type void
} {
  code {Fl_Font font = font_browser->fontNumber();
    int size = font_browser->fontSize();
    Fl_Color color = font_browser->fontColor();

    progdefaults.LOGGINGtextfont = font;
    progdefaults.LOGGINGtextsize = size;
    progdefaults.LOGGINGtextcolor = color;

    LOGGINGdisplay->textsize(size);
    LOGGINGdisplay->textcolor(color);
    LOGGINGdisplay->textfont(font);
    LOGGINGdisplay->redraw();

    LOGGING_colors_font();

    font_browser->hide();

    progdefaults.changed = true;} {}
}

Function {cbLOGBOOKFontBrowser(Fl_Widget*, void*)} {private return_type void
} {
  code {Fl_Font font = font_browser->fontNumber();
    int size = font_browser->fontSize();
    Fl_Color color = font_browser->fontColor();

    progdefaults.LOGBOOKtextfont = font;
    progdefaults.LOGBOOKtextsize = size;
    progdefaults.LOGBOOKtextcolor = color;

    LOGBOOKdisplay->textsize(size);
    LOGBOOKdisplay->textcolor(color);
    LOGBOOKdisplay->textfont(font);
    LOGBOOKdisplay->redraw();

    LOGBOOK_colors_font();

    font_browser->hide();

    progdefaults.changed = true;} {}
}

Function {set_qrzxml_buttons(Fl_Button* b)} {return_type void
} {
  code {Fl_Button* qrzbxml[] = { btnQRZXMLnotavailable, btnQRZcdrom, btnQRZsub,
                         btnHamcall,
                         btnCALLOOK, btnHamQTH};

for (size_t i = 0; i < sizeof(qrzbxml)/sizeof(*qrzbxml); i++)
	qrzbxml[i]->value(b == qrzbxml[i]);} {}
}

Function {set_qrzweb_buttons(Fl_Button* b)} {open return_type void
} {
  code {Fl_Button* qrzbweb[] = { btnQRZWEBnotavailable, btnQRZonline,
                              btnHAMCALLonline,
                              btnHamQTHonline, btnCallookOnline };

for (size_t i = 0; i < sizeof(qrzbweb)/sizeof(*qrzbweb); i++)
	qrzbweb[i]->value(b == qrzbweb[i]);} {}
}

decl {class Fl_File_Chooser ;} {public global
}

Function {createConfig()} {return_type void
} {
  code {if (!dlgConfig) {
    dlgConfig = ConfigureDialog();
    dlgConfig->xclass(PACKAGE_NAME);
  }} {}
}

Function {ConfigureDialog()} {open
} {
  code {font_browser = new Font_Browser;} {}
  code {static const char szShifts[]  = "23|85|160|170|182|200|240|350|425|850|Custom";
static const char szBauds[]  = "45|45.45|50|56|75|100|110|150|200|300";
static const char szSelBits[] = "5 (baudot)|7 (ascii)|8 (ascii)";
static const char szParity[]  = "none|even|odd|zero|one";
static const char szStopBits[] = "1|1.5|2";
static const char szOliviaTones[] = "2|4|8|16|32|64|128|256";
static const char szOliviaBandwidth[] = "125|250|500|1000|2000";
static const char szContestiaTones[] = "2|4|8|16|32|64|128|256";
static const char szContestiaBandwidth[] = "125|250|500|1000|2000";
static const char szBaudRates[] = "300|600|1200|2400|4800|9600|19200|38400|57600|115200|230400|460800";
static const char szProsigns[] = "~|%|&|+|=|{|}|<|>|[|]| ";} {}
  Fl_Window {} {
    label {Fldigi configuration} open
    xywh {14 642 800 380} type Double color 45 selection_color 51 labelsize 18 align 80 resizable size_range {750 380 0 380} visible
  } {
    Fl_Group {} {
      xywh {0 0 201 385} resizable
    } {
      Fl_Tree tab_tree {
        callback SelectItem_CB
        xywh {0 0 200 350} resizable
        code0 {o->root_label(_("Configure"));}
        code1 {o->selectmode(FL_TREE_SELECT_SINGLE);}
        code2 {o->connectorstyle(FL_TREE_CONNECTOR_DOTTED); // default is NONE on Mac}
        code3 {o->connectorwidth(15); // default is 17}
      }
      Fl_Group {} {open
        xywh {0 350 201 35}
      } {
        Fl_Group {} {open
          xywh {0 350 100 30} resizable
        } {}
        Fl_Button btn_collapse_tab_tree {
          label {Collapse Tree}
          callback {tab_tree->close(_("Colors-Fonts"));
tab_tree->close(_("Contests"));
tab_tree->close(_("IDs"));
tab_tree->close(_("Logging"));
tab_tree->close(_("Modem"));
tab_tree->close(_("Misc"));
tab_tree->close(_("Rig Control"));
tab_tree->close(_("Soundcard"));
tab_tree->close(_("UI"));
tab_tree->close(_("Waterfall"));
tab_tree->close(_("Web"));}
          xywh {95 353 105 22}
        }
      }
    }
    Fl_Group {} {
      label {Colors-Fonts/Buttons}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Colors-Fonts/Buttons"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Colors-Fonts/Buttons"));}
    } {
      Fl_Button btnSpotColor {
        label Spot
        callback {progdefaults.SpotColor = fl_show_colormap(progdefaults.SpotColor);
spotcolor->color(progdefaults.SpotColor);
spotcolor->redraw();
spot_selection_color();
progdefaults.changed = true;}
        xywh {334 75 85 21}
      }
      Fl_Button btnRevColor {
        label Rev
        callback {progdefaults.RevColor = fl_show_colormap(progdefaults.RevColor);
revcolor->color(progdefaults.RevColor);
revcolor->redraw();
rev_selection_color();
progdefaults.changed = true;}
        xywh {334 111 85 21}
      }
      Fl_Button btnTuneColor {
        label Tune
        callback {progdefaults.TuneColor = fl_show_colormap(progdefaults.TuneColor);
tunecolor->color(progdefaults.TuneColor);
tunecolor->redraw();
tune_selection_color();
progdefaults.changed = true;}
        xywh {334 148 85 21}
      }
      Fl_Button btnRxIDColor {
        label {RxID nar}
        callback {progdefaults.RxIDColor = fl_show_colormap(progdefaults.RxIDColor);
rxidcolor->color(progdefaults.RxIDColor);
rxidcolor->redraw();
rxid_selection_color();
progdefaults.changed = true;

Fl_Color clr = progdefaults.rsidWideSearch ? progdefaults.RxIDwideColor : progdefaults.RxIDColor;
btnRSID->selection_color(clr);
btnRSID->redraw();}
        xywh {334 183 85 21}
      }
      Fl_Button btnLkColor {
        label Lk
        callback {progdefaults.LkColor = fl_show_colormap(progdefaults.LkColor);
lockcolor->color(progdefaults.LkColor);
lockcolor->redraw();
xmtlock_selection_color();
progdefaults.changed = true;}
        xywh {469 75 85 21}
      }
      Fl_Button btnSql1Color {
        label {SQL-1}
        callback {progdefaults.Sql1Color = fl_show_colormap(progdefaults.Sql1Color);
sql1color->color(progdefaults.Sql1Color);
sql1color->redraw();
sql_selection_color();
progdefaults.changed = true;}
        xywh {470 111 85 21}
      }
      Fl_Button btnXmtColor {
        label {T/R}
        callback {progdefaults.XmtColor = fl_show_colormap(progdefaults.XmtColor);
xmtcolor->color(progdefaults.XmtColor);
xmtcolor->redraw();
xmtrcv_selection_color();
progdefaults.changed = true;}
        xywh {469 148 85 20}
      }
      Fl_Button btnRxIDwideColor {
        label {RxID wide}
        callback {progdefaults.RxIDwideColor = fl_show_colormap(progdefaults.RxIDwideColor);
rxidcolorwide->color(progdefaults.RxIDwideColor);
rxidcolorwide->redraw();
rxid_selection_color();
progdefaults.changed = true;

Fl_Color clr = progdefaults.rsidWideSearch ? progdefaults.RxIDwideColor : progdefaults.RxIDColor;
btnRSID->selection_color(clr);
btnRSID->redraw();}
        xywh {469 183 85 21}
      }
      Fl_Button btnAfcColor {
        label AFC
        callback {progdefaults.AfcColor = fl_show_colormap(progdefaults.AfcColor);
afccolor->color(progdefaults.AfcColor);
afccolor->redraw();
afc_selection_color();
progdefaults.changed = true;}
        xywh {605 75 85 21}
      }
      Fl_Button btnSql2Color {
        label {SQL-2}
        callback {progdefaults.Sql2Color = fl_show_colormap(progdefaults.Sql2Color);
sql2color->color(progdefaults.Sql2Color);
sql2color->redraw();
sql_selection_color();
progdefaults.changed = true;}
        xywh {605 111 85 20}
      }
      Fl_Button btnTxIDColor {
        label TxID
        callback {progdefaults.TxIDColor = fl_show_colormap(progdefaults.TxIDColor);
txidcolor->color(progdefaults.TxIDColor);
txidcolor->redraw();
txid_selection_color();
progdefaults.changed = true;

btnTxRSID->selection_color(progdefaults.TxIDColor);
btnTxRSID->redraw();}
        xywh {604 183 85 20}
      }
      Fl_Box spotcolor {
        xywh {310 76 18 19} box THIN_DOWN_BOX color 3
        code0 {o->color(progdefaults.SpotColor);}
      }
      Fl_Box revcolor {
        xywh {310 112 18 19} box THIN_DOWN_BOX
        code0 {o->color(progdefaults.RevColor);}
      }
      Fl_Box tunecolor {
        xywh {310 149 18 19} box THIN_DOWN_BOX
        code0 {o->color(progdefaults.TuneColor);}
      }
      Fl_Box rxidcolor {
        xywh {310 184 18 19} box THIN_DOWN_BOX
        code0 {o->color(progdefaults.RxIDColor);}
      }
      Fl_Box lockcolor {
        xywh {445 76 18 19} box THIN_DOWN_BOX color 3
        code0 {o->color(progdefaults.LkColor);}
      }
      Fl_Box sql1color {
        xywh {445 112 18 19} box THIN_DOWN_BOX
        code0 {o->color(progdefaults.Sql1Color);}
      }
      Fl_Box rxidcolorwide {
        xywh {445 184 18 19} box THIN_DOWN_BOX
        code0 {o->color(progdefaults.RxIDwideColor);}
      }
      Fl_Box xmtcolor {
        xywh {445 149 18 18} box THIN_DOWN_BOX
        code0 {o->color(progdefaults.XmtColor);}
      }
      Fl_Box afccolor {
        xywh {580 76 18 19} box THIN_DOWN_BOX color 3
        code0 {o->color(progdefaults.AfcColor);}
      }
      Fl_Box sql2color {
        xywh {580 112 18 18} box THIN_DOWN_BOX
        code0 {o->color(progdefaults.Sql2Color);}
      }
      Fl_Box txidcolor {
        xywh {580 184 18 18} box THIN_DOWN_BOX
        code0 {o->color(progdefaults.TxIDColor);}
      }
      Fl_Box {} {
        label {Lighted button enabled colors}
        xywh {390 264 220 20} align 21
      }
      Fl_Button btn_default_btn_color {
        label {All Others}
        callback {progdefaults.default_btn_color = fl_show_colormap(progdefaults.default_btn_color);
default_btn_color->color(progdefaults.default_btn_color);
default_btn_color->redraw();
set_default_btn_color();
progdefaults.changed = true;}
        xywh {469 218 85 21}
      }
      Fl_Box default_btn_color {
        xywh {445 218 18 19} box THIN_DOWN_BOX
        code0 {o->color(progdefaults.default_btn_color);}
      }
    }
    Fl_Group {} {
      label {Colors-Fonts/FreqDisp - Meters}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Colors-Fonts/FreqDisp - Meters"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Colors-Fonts/FreqDisp - Meters"));}
    } {
      Fl_Group {} {open
        xywh {304 51 395 87} box ENGRAVED_FRAME
      } {
        Fl_Box FDdisplay {
          label {14070.150}
          xywh {384 55 235 45} box DOWN_BOX color 55 labelfont 4 labelsize 40
          code0 {o->color(fl_rgb_color(progdefaults.FDbackground.R,progdefaults.FDbackground.G,progdefaults.FDbackground.B));}
          code1 {o->labelcolor(fl_rgb_color(progdefaults.FDforeground.R,progdefaults.FDforeground.G,progdefaults.FDforeground.B));}
          code2 {o->labelfont(progdefaults.FreqControlFontnbr);}
        }
        Fl_Button btn_freq_control_font {
          label Font
          callback {font_browser->fontNumber(progdefaults.FreqControlFontnbr);
    font_browser->fontSize(14);
    font_browser->fontColor(FL_FOREGROUND_COLOR);
    font_browser->fontFilter(Font_Browser::FIXED_WIDTH);
    font_browser->fontFilter(Font_Browser::ALL_TYPES);
    font_browser->callback(cbFreqControlFontBrowser);
font_browser->show();}
          xywh {311 106 90 24}
        }
        Fl_Button btnBackgroundColor {
          label {Bg Color}
          callback {uchar r, g, b;
    r = progdefaults.FDbackground.R;
    g = progdefaults.FDbackground.G;
    b = progdefaults.FDbackground.B;

    if (!fl_color_chooser("Background", r, g, b))
        return;

    progdefaults.FDbackground.R = r;
    progdefaults.FDbackground.G = g;
    progdefaults.FDbackground.B = b;

    FDdisplay->color(fl_rgb_color(r,g,b));
    FDdisplay->redraw();

    if (qsoFreqDisp) {
        qsoFreqDisp->SetONOFFCOLOR(
          fl_rgb_color(	progdefaults.FDforeground.R,
                        progdefaults.FDforeground.G,
                        progdefaults.FDforeground.B),
          fl_rgb_color(	progdefaults.FDbackground.R,
                        progdefaults.FDbackground.G,
                        progdefaults.FDbackground.B));
        qsoFreqDisp->redraw();
    }
    progdefaults.changed = true;}
          xywh {407 106 90 24}
        }
        Fl_Button btnForegroundColor {
          label {Digit Color}
          callback {uchar r, g, b;
    r = progdefaults.FDforeground.R;
    g = progdefaults.FDforeground.G;
    b = progdefaults.FDforeground.B;

    if (!fl_color_chooser("Foreground", r, g, b))
        return;

    progdefaults.FDforeground.R = r;
    progdefaults.FDforeground.G = g;
    progdefaults.FDforeground.B = b;

    FDdisplay->labelcolor(fl_rgb_color(r,g,b));
    FDdisplay->redraw();

    if (qsoFreqDisp) {
        qsoFreqDisp->SetONOFFCOLOR(
          fl_rgb_color(	progdefaults.FDforeground.R,
                        progdefaults.FDforeground.G,
                        progdefaults.FDforeground.B),
          fl_rgb_color(	progdefaults.FDbackground.R,
                        progdefaults.FDbackground.G,
                        progdefaults.FDbackground.B));
        qsoFreqDisp->redraw();
    }
    progdefaults.changed = true;}
          xywh {503 106 90 24}
        }
        Fl_Button btnFD_SystemColor {
          label {Sys Colors}
          callback {uchar r, g, b;
    Fl_Color clr = FL_BACKGROUND2_COLOR;

    Fl::get_color(clr, r, g, b);

    progdefaults.FDbackground.R = r;
    progdefaults.FDbackground.G = g;
    progdefaults.FDbackground.B = b;

    FDdisplay->color(clr);

    clr = FL_FOREGROUND_COLOR;
    Fl::get_color(clr, r, g, b);

    FDdisplay->labelcolor(clr);
    FDdisplay->redraw();

    progdefaults.FDforeground.R = r;
    progdefaults.FDforeground.G = g;
    progdefaults.FDforeground.B = b;

    if (qsoFreqDisp) {
        qsoFreqDisp->SetONOFFCOLOR(
          fl_rgb_color(	progdefaults.FDforeground.R,
                        progdefaults.FDforeground.G,
                        progdefaults.FDforeground.B),
          fl_rgb_color(	progdefaults.FDbackground.R,
                        progdefaults.FDbackground.G,
                        progdefaults.FDbackground.B));
        qsoFreqDisp->redraw();
    }
    progdefaults.changed = true;}
          xywh {599 106 90 24}
        }
      }
      Fl_Group {} {
        label {S-meter} open
        xywh {304 142 395 62} box ENGRAVED_FRAME align 21
      } {
        Fl_Button btnSmeter_bg_color {
          label {Bg Color}
          callback {uchar r, g, b;
    r = progdefaults.Smeter_bg_color.R;
    g = progdefaults.Smeter_bg_color.G;
    b = progdefaults.Smeter_bg_color.B;

    if (!fl_color_chooser("Background", r, g, b))
        return;

    progdefaults.Smeter_bg_color.R = r;
    progdefaults.Smeter_bg_color.G = g;
    progdefaults.Smeter_bg_color.B = b;

    set_smeter_colors();

    progdefaults.changed = true;}
          xywh {311 169 90 24}
        }
        Fl_Button btnSmeter_scale_color {
          label {Scale Color}
          callback {uchar r, g, b;
    r = progdefaults.Smeter_scale_color.R;
    g = progdefaults.Smeter_scale_color.G;
    b = progdefaults.Smeter_scale_color.B;

    if (!fl_color_chooser("Scale", r, g, b))
        return;

    progdefaults.Smeter_scale_color.R = r;
    progdefaults.Smeter_scale_color.G = g;
    progdefaults.Smeter_scale_color.B = b;

    set_smeter_colors();

    progdefaults.changed = true;}
          xywh {407 169 90 24}
        }
        Fl_Button btnSmeter_meter_color {
          label {Meter Color}
          callback {uchar r, g, b;
    r = progdefaults.Smeter_meter_color.R;
    g = progdefaults.Smeter_meter_color.G;
    b = progdefaults.Smeter_meter_color.B;

    if (!fl_color_chooser("Meter", r, g, b))
        return;

    progdefaults.Smeter_meter_color.R = r;
    progdefaults.Smeter_meter_color.G = g;
    progdefaults.Smeter_meter_color.B = b;

    set_smeter_colors();

    progdefaults.changed = true;}
          xywh {503 169 90 24}
        }
      }
      Fl_Group {} {
        label {PWR-meter} open
        xywh {304 211 395 67} box ENGRAVED_FRAME align 21
      } {
        Fl_Button btnPWR_bg_color {
          label {Bg Color}
          callback {uchar r, g, b;
    r = progdefaults.PWRmeter_bg_color.R;
    g = progdefaults.PWRmeter_bg_color.G;
    b = progdefaults.PWRmeter_bg_color.B;

    if (!fl_color_chooser("Background", r, g, b))
        return;

    progdefaults.PWRmeter_bg_color.R = r;
    progdefaults.PWRmeter_bg_color.G = g;
    progdefaults.PWRmeter_bg_color.B = b;

    set_smeter_colors();

    progdefaults.changed = true;}
          xywh {311 238 90 24}
        }
        Fl_Button btnPWR_scale_color {
          label {Scale Color}
          callback {uchar r, g, b;
    r = progdefaults.PWRmeter_scale_color.R;
    g = progdefaults.PWRmeter_scale_color.G;
    b = progdefaults.PWRmeter_scale_color.B;

    if (!fl_color_chooser("Scale", r, g, b))
        return;

    progdefaults.PWRmeter_scale_color.R = r;
    progdefaults.PWRmeter_scale_color.G = g;
    progdefaults.PWRmeter_scale_color.B = b;

    set_smeter_colors();

    progdefaults.changed = true;}
          xywh {407 238 90 24}
        }
        Fl_Button btnPWR_meter_Color {
          label {Meter Color}
          callback {uchar r, g, b;
    r = progdefaults.PWRmeter_meter_color.R;
    g = progdefaults.PWRmeter_meter_color.G;
    b = progdefaults.PWRmeter_meter_color.B;

    if (!fl_color_chooser("Meter", r, g, b))
        return;

    progdefaults.PWRmeter_meter_color.R = r;
    progdefaults.PWRmeter_meter_color.G = g;
    progdefaults.PWRmeter_meter_color.B = b;

    set_smeter_colors();

    progdefaults.changed = true;}
          xywh {503 238 90 24}
        }
        Fl_Group listboxPWRselect {
          label {Power scale}
          callback {progdefaults.PWRselect = o->index();
set_smeter_colors();
progdefaults.changed = true;} open
          tooltip {Select the type of FFT prefilter} xywh {599 238 80 24} box DOWN_BOX color 7
          code0 {o->add(_("25 W")); o->add("50 W");}
          code1 {o->add("100 W"); o->add("200 W"); o->add("AUTO");}
          code3 {o->index(progdefaults.PWRselect);o->labelsize(FL_NORMAL_SIZE);}
          class Fl_ListBox
        } {}
      }
    }
    Fl_Group {} {
      label {Colors-Fonts/Function keys}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Colors-Fonts/Function keys"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Colors-Fonts/Function keys"));}
    } {
      Fl_Check_Button btnUseGroupColors {
        label {Use colored buttons}
        callback {progdefaults.useGroupColors = o->value();
    colorize_macros();
    progdefaults.changed = true;}
        xywh {337 92 165 21} down_box DOWN_BOX
        code0 {btnUseGroupColors->value(progdefaults.useGroupColors);}
      }
      Fl_Button btnGroup1 {
        label {Group 1}
        callback {uchar r, g, b;
    r = progdefaults.btnGroup1.R;
    g = progdefaults.btnGroup1.G;
    b = progdefaults.btnGroup1.B;

    if (fl_color_chooser("Group 1", r, g, b) == 0)
        return;
    progdefaults.btnGroup1.R = r;
    progdefaults.btnGroup1.G = g;
    progdefaults.btnGroup1.B = b;
    o->color(fl_rgb_color(r,g,b));
    colorize_macros();

    progdefaults.changed = true;}
        tooltip {Background color for Function key group 1} xywh {305 140 90 30}
        code0 {btnGroup1->color(fl_rgb_color(progdefaults.btnGroup1.R, progdefaults.btnGroup1.G,progdefaults.btnGroup1.B));}
        code1 {btnGroup1->labelcolor(progdefaults.MacroBtnFontcolor);}
      }
      Fl_Button btnGroup2 {
        label {Group 2}
        callback {uchar r, g, b;
    r = progdefaults.btnGroup2.R;
    g = progdefaults.btnGroup2.G;
    b = progdefaults.btnGroup2.B;

    if (fl_color_chooser("Group 2", r, g, b) == 0)
        return;
    progdefaults.btnGroup2.R = r;
    progdefaults.btnGroup2.G = g;
    progdefaults.btnGroup2.B = b;
    o->color(fl_rgb_color(r,g,b));
    colorize_macros();

    progdefaults.changed = true;}
        tooltip {Background color for Function key group 2} xywh {407 140 90 30}
        code0 {btnGroup2->color(fl_rgb_color(progdefaults.btnGroup2.R, progdefaults.btnGroup2.G,progdefaults.btnGroup2.B));}
        code1 {btnGroup2->labelcolor(progdefaults.MacroBtnFontcolor);}
      }
      Fl_Button btnGroup3 {
        label {Group 3}
        callback {uchar r, g, b;
    r = progdefaults.btnGroup3.R;
    g = progdefaults.btnGroup3.G;
    b = progdefaults.btnGroup3.B;

    if (fl_color_chooser("Group 3", r, g, b) == 0)
        return;
    progdefaults.btnGroup3.R = r;
    progdefaults.btnGroup3.G = g;
    progdefaults.btnGroup3.B = b;
    o->color(fl_rgb_color(r,g,b));

    colorize_macros();
    progdefaults.changed = true;}
        tooltip {Background color for Function key group 3} xywh {509 140 90 30}
        code0 {btnGroup3->color(fl_rgb_color(progdefaults.btnGroup3.R, progdefaults.btnGroup3.G,progdefaults.btnGroup3.B));}
        code1 {btnGroup3->labelcolor(progdefaults.MacroBtnFontcolor);}
      }
      Fl_Button btnFkeyDEfaults {
        label Defaults
        callback {uchar r, g, b;
    Fl_Color clr;

    r = 80; g = 144; b = 144;
    clr = fl_rgb_color(r,g,b);
     btnGroup1->color(clr);
    progdefaults.btnGroup1.R = r;
    progdefaults.btnGroup1.G = g;
    progdefaults.btnGroup1.B = b;

    r = 144; g = 80; b = 80;
    clr = fl_rgb_color(r,g,b);
    btnGroup2->color(clr);
    progdefaults.btnGroup2.R = r;
    progdefaults.btnGroup2.G = g;
    progdefaults.btnGroup2.B = b;

    r = 80; g = 80; b = 144;
    clr = fl_rgb_color(r,g,b);
    btnGroup3->color(clr);
    progdefaults.btnGroup3.R = r;
    progdefaults.btnGroup3.G = g;
    progdefaults.btnGroup3.B = b;

    progdefaults.MacroBtnFontcolor = FL_BLACK;
    progdefaults.MacroBtnFontnbr = FL_HELVETICA;
    progdefaults.MacroBtnFontsize = 12;

    btnGroup1->labelcolor(progdefaults.MacroBtnFontcolor);
    btnGroup2->labelcolor(progdefaults.MacroBtnFontcolor);
    btnGroup3->labelcolor(progdefaults.MacroBtnFontcolor);
    btnGroup1->labelfont(progdefaults.MacroBtnFontnbr);
    btnGroup2->labelfont(progdefaults.MacroBtnFontnbr);
    btnGroup3->labelfont(progdefaults.MacroBtnFontnbr);
    btnGroup1->labelsize(progdefaults.MacroBtnFontsize);
    btnGroup2->labelsize(progdefaults.MacroBtnFontsize);
    btnGroup3->labelsize(progdefaults.MacroBtnFontsize);

    btnGroup1->redraw_label();
    btnGroup2->redraw_label();
    btnGroup3->redraw_label();

    colorize_macros();

progdefaults.changed = true;}
        xywh {612 140 90 30}
      }
      Fl_Button btnMacroBtnFont {
        label {Font/Color}
        callback {font_browser->fontNumber(progdefaults.MacroBtnFontnbr);
    font_browser->fontSize(progdefaults.MacroBtnFontsize);
    font_browser->fontColor(progdefaults.MacroBtnFontcolor);
    font_browser->fontFilter(Font_Browser::ALL_TYPES);
    font_browser->callback(cbMacroBtnFontBrowser);
font_browser->show();}
        xywh {509 87 90 30}
      }
    }
    Fl_Group {} {
      label {Colors-Fonts/Logging controls}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Colors-Fonts/Logging controls"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Colors-Fonts/Logging controls"));}
    } {
      Fl_Group {} {
        label {Logging Panel Controls} open
        xywh {205 33 590 65} box ENGRAVED_FRAME align 21
      } {
        Fl_Output LOGGINGdisplay {
          xywh {233 57 184 25}
          code0 {o->textfont(progdefaults.LOGGINGtextfont);o->textsize(progdefaults.LOGGINGtextsize);o->textcolor(progdefaults.LOGGINGtextcolor);}
          code1 {o->color(progdefaults.LOGGINGcolor);}
          code2 {o->value("W1HKJ");}
          code3 {o->redraw();}
        }
        Fl_Button btnLOGGING_color {
          label {Bg Color}
          callback {uchar r, g, b;
    Fl::get_color(progdefaults.LOGGINGcolor, r, g, b);

    if (!fl_color_chooser("Background", r, g, b))
        return;

    progdefaults.LOGGINGcolor = fl_rgb_color(r, g, b);

    LOGGINGdisplay->color(progdefaults.LOGGINGcolor);
    LOGGINGdisplay->redraw();

    LOGGING_colors_font();

    progdefaults.changed = true;}
          xywh {476 57 80 25}
        }
        Fl_Button btn_LOGGING_font {
          label Font
          callback {font_browser->fontNumber(progdefaults.LOGGINGtextfont);
font_browser->fontSize(progdefaults.LOGGINGtextsize);
font_browser->fontColor(progdefaults.LOGGINGtextcolor);
font_browser->fontFilter(Font_Browser::ALL_TYPES);
font_browser->callback(cbLOGGINGFontBrowser);
font_browser->show();}
          xywh {566 57 55 25}
        }
        Fl_Button btnLOGGINGdefault_colors_font {
          label Default
          callback {progdefaults.LOGGINGcolor = FL_BACKGROUND2_COLOR;
progdefaults.LOGGINGtextfont = (Fl_Font)0;
progdefaults.LOGGINGtextsize = 14;
progdefaults.LOGGINGtextcolor = FL_BLACK;

LOGGINGdisplay->color(progdefaults.LOGGINGcolor);
LOGGINGdisplay->textsize(progdefaults.LOGGINGtextsize);
LOGGINGdisplay->textcolor(progdefaults.LOGGINGtextcolor);
LOGGINGdisplay->textfont(progdefaults.LOGGINGtextfont);
LOGGINGdisplay->redraw();

LOGGING_colors_font();

progdefaults.changed = true;}
          xywh {632 57 80 25}
        }
      }
      Fl_Group {} {
        label {Logbook Dialog} open
        xywh {205 99 590 65} box ENGRAVED_FRAME align 21
      } {
        Fl_Output LOGBOOKdisplay {
          xywh {233 123 184 25}
          code0 {o->textfont(progdefaults.LOGGINGtextfont);o->textsize(progdefaults.LOGGINGtextsize);o->textcolor(progdefaults.LOGBOOKtextcolor);}
          code1 {o->color(progdefaults.LOGBOOKcolor);}
          code2 {o->value("14.070000");}
          code3 {o->redraw();}
        }
        Fl_Button btnLOGBOOK_color {
          label {Bg Color}
          callback {uchar r, g, b;
    Fl::get_color(progdefaults.LOGBOOKcolor, r, g, b);

   if (!fl_color_chooser("Background", r, g, b))
        return;

    progdefaults.LOGBOOKcolor = fl_rgb_color(r, g, b);

    LOGBOOKdisplay->color(progdefaults.LOGBOOKcolor);
    LOGBOOKdisplay->redraw();

    LOGBOOK_colors_font();

    progdefaults.changed = true;}
          xywh {475 123 80 25}
        }
        Fl_Button btn_LOGBOOK_font {
          label Font
          callback {font_browser->fontNumber(progdefaults.LOGBOOKtextfont);
font_browser->fontSize(progdefaults.LOGBOOKtextsize);
font_browser->fontColor(progdefaults.LOGBOOKtextcolor);
font_browser->fontFilter(Font_Browser::ALL_TYPES);
font_browser->callback(cbLOGBOOKFontBrowser);
font_browser->show();}
          xywh {565 123 55 25}
        }
        Fl_Button btnLOGBOOKdefault_colors_font {
          label Default
          callback {progdefaults.LOGBOOKcolor = FL_BACKGROUND2_COLOR;
progdefaults.LOGBOOKtextfont = (Fl_Font)0;
progdefaults.LOGBOOKtextsize = 14;
progdefaults.LOGBOOKtextcolor = FL_BLACK;

LOGBOOKdisplay->color(progdefaults.LOGBOOKcolor);
LOGBOOKdisplay->textsize(progdefaults.LOGBOOKtextsize);
LOGBOOKdisplay->textcolor(progdefaults.LOGBOOKtextcolor);
LOGBOOKdisplay->textfont(progdefaults.LOGBOOKtextfont);
LOGBOOKdisplay->redraw();

LOGBOOK_colors_font();

progdefaults.changed = true;}
          xywh {631 123 80 25}
        }
      }
      Fl_Group {} {
        label {DX Cluster Dialog} open
        xywh {205 168 590 147} box ENGRAVED_FRAME align 21
      } {
        Fl_Output DXC_display {
          label {Report Browser}
          xywh {233 203 184 25} align 5
          code0 {o->textfont(progdefaults.LOGGINGtextfont);o->textsize(progdefaults.LOGGINGtextsize);}
          code2 {o->value("DX de W1HKJ-1");}
          code3 {o->redraw();}
        }
        Fl_Button btn_DXC_font {
          label Font
          callback {font_browser->fontNumber(progdefaults.DXC_textfont);
font_browser->fontSize(progdefaults.DXC_textsize);
font_browser->fontColor(progdefaults.DXC_textcolor);
font_browser->fontFilter(Font_Browser::FIXED_WIDTH);
font_browser->callback(cbDXC_FontBrowser);
font_browser->show();}
          xywh {422 203 86 25}
        }
        Fl_Button btnDXCdefault_colors_font {
          label Default
          callback {progdefaults.DXC_textfont = FL_COURIER;
progdefaults.DXC_textsize = 14;
progdefaults.DXC_textcolor = FL_BLACK;
progdefaults.DXC_even_color = 7;
progdefaults.DXC_odd_color = 246;

DXC_display->textsize(progdefaults.DXC_textsize);
DXC_display->textcolor(progdefaults.DXC_textcolor);
DXC_display->textfont(progdefaults.DXC_textfont);

DXC_display->redraw();}
          xywh {514 203 86 25}
        }
        Fl_Button btn_DXC_even_lines {
          label {Even Lines}
          callback {progdefaults.DXC_even_color = fl_show_colormap((Fl_Color)progdefaults.DXC_even_color);
o->color(progdefaults.DXC_even_color);
o->redraw();
dxc_lines_redraw();
progdefaults.changed = true}
          xywh {422 234 86 25} color 55
          code0 {o->color(progdefaults.DXC_even_color);}
        }
        Fl_Button btn_DXC_odd_lines {
          label {Odd Lines}
          callback {progdefaults.DXC_odd_color = fl_show_colormap((Fl_Color)progdefaults.DXC_odd_color);
o->color(progdefaults.DXC_odd_color);
o->redraw();
dxc_lines_redraw();
progdefaults.changed = true}
          xywh {514 234 86 25} color 246
          code0 {o->color(progdefaults.DXC_odd_color);}
        }
        Fl_Input StreamText {
          label {Stream Text}
          xywh {233 273 184 25} align 5
          code0 {o->value("DX de W1HKJ...");}
          code1 {o->color(fl_rgb_color(progdefaults.DX_Color.R, progdefaults.DX_Color.G, progdefaults.DX_Color.B));}
          code2 {o->textfont(progdefaults.DXfontnbr); o->textsize(progdefaults.DXfontsize); o->textcolor(progdefaults.DXfontcolor);}
        }
        Fl_Button btnDXcolor {
          label {Bg color}
          callback {uchar r, g, b;
r = progdefaults.DX_Color.R;
g = progdefaults.DX_Color.G;
b = progdefaults.DX_Color.B;

if (!fl_color_chooser("DX Color", r, g, b))
    return;

progdefaults.DX_Color.R = r;
progdefaults.DX_Color.G = g;
progdefaults.DX_Color.B = b;

StreamText->color(fl_rgb_color(r,g,b));
StreamText->redraw();

brws_tcpip_stream->color(fl_rgb_color(r,g,b));
brws_tcpip_stream->redraw();

brws_dxcluster_hosts->color(fl_rgb_color(
    progdefaults.DX_Color.R,
    progdefaults.DX_Color.G,
    progdefaults.DX_Color.B));
brws_dxcluster_hosts->textcolor(progdefaults.DXfontcolor);
brws_dxcluster_hosts->textfont(progdefaults.DXfontnbr);
brws_dxcluster_hosts->textsize(progdefaults.DXfontsize);
brws_dxcluster_hosts->redraw();

brws_dxc_help->color(fl_rgb_color(r,g,b));
brws_dxc_help->setFont(progdefaults.DXfontnbr);
brws_dxc_help->setFontSize(progdefaults.DXfontsize);
brws_dxc_help->setFontColor(progdefaults.DXfontcolor, FTextBase::RECV);
brws_dxc_help->redraw();
    
ed_telnet_cmds->color(fl_rgb_color(r,g,b));
ed_telnet_cmds->redraw();

dxcluster_hosts_load();

progdefaults.changed = true;}
          xywh {422 273 86 25}
        }
        Fl_Button btnDXfont {
          label Font
          callback {font_browser->fontNumber(progdefaults.DXfontnbr);
    font_browser->fontSize(progdefaults.DXfontsize);
    font_browser->fontColor(progdefaults.DXfontcolor);
    font_browser->fontFilter(Font_Browser::FIXED_WIDTH);
    font_browser->callback(cbDXfont_browser);
font_browser->show();}
          xywh {514 273 86 25}
        }
        Fl_Button btnDXalt_color {
          label {Alt Color}
          callback {choose_color(progdefaults.DXalt_color);

o->labelcolor(progdefaults.DXalt_color);
o->redraw_label();

brws_tcpip_stream->setFontColor(progdefaults.DXalt_color, FTextBase::XMIT);
brws_tcpip_stream->redraw();

progdefaults.changed = true;}
          tooltip {Color for outgoing telnet text} xywh {606 272 86 25}
          code0 {o->labelcolor(progdefaults.DXalt_color);}
        }
        Fl_Button btnDXdefault_colors_font {
          label Default
          callback {progdefaults.DX_Color.R = 255;
progdefaults.DX_Color.G = 255;
progdefaults.DX_Color.B = 255;

progdefaults.DXfontnbr = FL_COURIER;
progdefaults.DXfontsize = 14;
progdefaults.DXfontcolor = FL_BLACK;
progdefaults.DXalt_color = fl_rgb_color(200, 0, 0);
btnDXalt_color->labelcolor(progdefaults.DXalt_color);
btnDXalt_color->redraw_label();

brws_tcpip_stream->color(fl_rgb_color(
    progdefaults.DX_Color.R,
    progdefaults.DX_Color.G,
    progdefaults.DX_Color.B));
brws_tcpip_stream->setFont(progdefaults.DXfontnbr);
brws_tcpip_stream->setFontSize(progdefaults.DXfontsize);
brws_tcpip_stream->setFontColor(progdefaults.DXfontcolor, FTextBase::RECV);
brws_tcpip_stream->setFontColor(progdefaults.DXalt_color, FTextBase::XMIT);
brws_tcpip_stream->redraw();

ed_telnet_cmds->color(fl_rgb_color(
    progdefaults.DX_Color.R,
    progdefaults.DX_Color.G,
    progdefaults.DX_Color.B));
ed_telnet_cmds->setFont(progdefaults.DXfontnbr);
ed_telnet_cmds->setFontSize(progdefaults.DXfontsize);
ed_telnet_cmds->setFontColor(progdefaults.DXfontcolor);
ed_telnet_cmds->redraw();

brws_dxc_help->color(fl_rgb_color(
    progdefaults.DX_Color.R,
    progdefaults.DX_Color.G,
    progdefaults.DX_Color.B));
brws_dxc_help->setFont(progdefaults.DXfontnbr);
brws_dxc_help->setFontSize(progdefaults.DXfontsize);
brws_dxc_help->setFontColor(progdefaults.DXfontcolor, FTextBase::RECV);
brws_dxc_help->redraw();

StreamText->color(fl_rgb_color(
    progdefaults.DX_Color.R,
    progdefaults.DX_Color.G,
    progdefaults.DX_Color.B));
StreamText->textcolor(progdefaults.DXfontcolor);
StreamText->redraw();

dxcluster_hosts_load();

font_browser->hide();

progdefaults.changed = true;}
          xywh {700 272 86 25}
        }
      }
    }
    Fl_Group {} {
      label {Colors-Fonts/Rx-Tx}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Colors-Fonts/Rx-Tx"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Colors-Fonts/Rx-Tx"));}
    } {
      Fl_Group listbox_charset_status {
        label {Rx/Tx Character set} open
        tooltip {Select Rx/Tx Character Set} xywh {293 40 165 24} box BORDER_BOX color 55 align 8
        code0 {\#include "fl_digi.h"}
        code1 {o->labelsize(FL_NORMAL_SIZE);
                  listbox_charset_status->callback(cb_listbox_charset, 0);}
        class Fl_ListBox
      } {}
      Fl_Input RxText {
        xywh {293 71 220 36}
        code0 {RxText->value("Receive Text");}
        code1 {RxText->color(fl_rgb_color(progdefaults.RxColor.R, progdefaults.RxColor.G, progdefaults.RxColor.B));}
        code2 {RxText->textfont(progdefaults.RxFontnbr); RxText->textsize(progdefaults.RxFontsize); RxText->textcolor(progdefaults.RxFontcolor);}
        code3 {RxText->type(FL_MULTILINE_INPUT_WRAP);}
      }
      Fl_Button btnRxColor {
        label {Rx bkgnd}
        callback {uchar r, g, b;
    r = progdefaults.RxColor.R;
    g = progdefaults.RxColor.G;
    b = progdefaults.RxColor.B;

    if (!fl_color_chooser("Rx Color", r, g, b))
        return;

    progdefaults.RxColor.R = r;
    progdefaults.RxColor.G = g;
    progdefaults.RxColor.B = b;
    RxText->color(fl_rgb_color(r,g,b));
    ReceiveText->color(RxText->color());
    RxText->redraw();
    ReceiveText->redraw();

    progdefaults.changed = true;}
        xywh {523 78 75 21}
      }
      Fl_Button btnTxColor {
        label {Tx bkgnd}
        callback {uchar r, g, b;
    r = progdefaults.TxColor.R;
    g = progdefaults.TxColor.G;
    b = progdefaults.TxColor.B;

    if (!fl_color_chooser("Tx Color", r, g, b))
        return;

    progdefaults.TxColor.R = r;
    progdefaults.TxColor.G = g;
    progdefaults.TxColor.B = b;
    TxText->color(fl_rgb_color(r,g,b));
    TransmitText->color(TxText->color());
    TxText->redraw();
    TransmitText->redraw();

progdefaults.changed = true;}
        xywh {523 121 75 21}
      }
      Fl_Input TxText {
        xywh {293 113 220 37}
        code0 {TxText->value("Transmit Text");}
        code1 {TxText->color(fl_rgb_color(progdefaults.TxColor.R, progdefaults.TxColor.G, progdefaults.TxColor.B));}
        code2 {TxText->textfont(progdefaults.TxFontnbr); TxText->textsize(progdefaults.TxFontsize); TxText->textcolor(progdefaults.TxFontcolor);}
        code3 {TxText->type(FL_MULTILINE_INPUT_WRAP);}
      }
      Fl_Button btnRxFont {
        label {Rx font}
        callback {font_browser->fontNumber(progdefaults.RxFontnbr);
    font_browser->fontSize(progdefaults.RxFontsize);
    font_browser->fontColor(progdefaults.RxFontcolor);
    font_browser->fontFilter(Font_Browser::ALL_TYPES);
    font_browser->callback(cbRxFontBrowser);
font_browser->show();}
        xywh {608 78 75 21}
      }
      Fl_Button btnTxFont {
        label {Tx font}
        callback {font_browser->fontNumber(progdefaults.TxFontnbr);
    font_browser->fontSize(progdefaults.TxFontsize);
    font_browser->fontColor(progdefaults.TxFontcolor);
    font_browser->fontFilter(Font_Browser::ALL_TYPES);
    font_browser->callback(cbTxFontBrowser);
    font_browser->show();}
        xywh {608 121 75 21}
      }
      Fl_Input MacroText {
        xywh {293 156 220 37}
        code0 {MacroText->value("Macro editor text");}
        code1 {MacroText->textfont(progdefaults.MacroEditFontnbr);}
        code2 {MacroText->textsize(progdefaults.MacroEditFontsize);}
        code3 {MacroText->type(FL_MULTILINE_INPUT_WRAP);}
      }
      Fl_Button btnMacroEditFont {
        label {Macro Edit Font}
        callback {font_browser->fontNumber(progdefaults.MacroEditFontnbr);
font_browser->fontSize(progdefaults.MacroEditFontsize);
font_browser->fontFilter(Font_Browser::ALL_TYPES);
font_browser->callback(cbMacroEditFontBrowser);
font_browser->show();}
        xywh {523 164 120 21}
      }
      Fl_Group {} {
        label {Text Highlighting} open
        xywh {283 203 404 81} box ENGRAVED_FRAME align 17
      } {
        Fl_Button btnXMIT {
          label XMIT
          callback {choose_color(progdefaults.XMITcolor);
    btnXMIT->color( progdefaults.XMITcolor );
    btnXMIT->redraw();
    TransmitText->setFontColor(progdefaults.XMITcolor, FTextBase::XMIT);
    ReceiveText->setFontColor(progdefaults.XMITcolor, FTextBase::XMIT);

    progdefaults.changed = true;}
          tooltip {Sent chars in Rx/Tx pane} xywh {301 231 40 21} align 2
          code0 {btnXMIT->color(progdefaults.XMITcolor);}
        }
        Fl_Button btnCTRL {
          label CTRL
          callback {choose_color(progdefaults.CTRLcolor);
    btnCTRL->color( progdefaults.CTRLcolor );
    btnCTRL->redraw();
    TransmitText->setFontColor(progdefaults.CTRLcolor, FTextBase::CTRL);
    ReceiveText->setFontColor(progdefaults.CTRLcolor, FTextBase::CTRL);

    progdefaults.changed = true;}
          tooltip {Control chars in Rx/Tx pane} xywh {344 231 40 21} align 2
          code0 {btnCTRL->color(progdefaults.CTRLcolor);}
        }
        Fl_Button btnSKIP {
          label SKIP
          callback {choose_color(progdefaults.SKIPcolor);
    btnSKIP->color( progdefaults.SKIPcolor );
    btnSKIP->redraw();
    TransmitText->setFontColor(progdefaults.SKIPcolor, FTextBase::SKIP);
    ReceiveText->setFontColor(progdefaults.SKIPcolor, FTextBase::SKIP);

    progdefaults.changed = true;}
          tooltip {Skipped chars in Tx pane
(Tx on/off in CW)} xywh {388 231 40 21} align 2
          code0 {btnSKIP->color(progdefaults.SKIPcolor);}
        }
        Fl_Button btnALTR {
          label ALTR
          callback {choose_color(progdefaults.ALTRcolor);
    btnALTR->color( progdefaults.ALTRcolor );
    btnALTR->redraw();
    TransmitText->setFontColor(progdefaults.ALTRcolor, FTextBase::ALTR);
    ReceiveText->setFontColor(progdefaults.ALTRcolor, FTextBase::ALTR);

    progdefaults.changed = true;}
          tooltip {Alternate character color in Rx panelr} xywh {431 231 40 21} align 2
          code0 {btnALTR->color(progdefaults.ALTRcolor);}
        }
        Fl_Button btnSEL {
          label SEL
          callback {choose_color(progdefaults.RxTxSelectcolor);
btnSEL->color( progdefaults.RxTxSelectcolor );
btnSEL->redraw();
ReceiveText->color(
  fl_rgb_color(
    progdefaults.RxColor.R,
    progdefaults.RxColor.G,
    progdefaults.RxColor.B),
    progdefaults.RxTxSelectcolor);
TransmitText->color(
  fl_rgb_color(
    progdefaults.TxColor.R,
    progdefaults.TxColor.G,
    progdefaults.TxColor.B),
    progdefaults.RxTxSelectcolor);

progdefaults.changed = true;}
          tooltip {Selection background color in Rx Tx panels} xywh {475 231 39 21} align 2
          code0 {btnSEL->color(progdefaults.RxTxSelectcolor);}
        }
        Fl_Button btnNoTextColor {
          label System
          callback {uchar r, g, b;
    Fl_Color clr = FL_BACKGROUND2_COLOR;

    Fl::get_color(clr, r, g, b);

    progdefaults.TxFontcolor = FL_BLACK;
    progdefaults.RxFontcolor = FL_BLACK;
    progdefaults.XMITcolor = FL_RED;
    progdefaults.CTRLcolor = FL_DARK_GREEN;
    progdefaults.SKIPcolor = FL_BLUE;
    progdefaults.ALTRcolor = FL_DARK_MAGENTA;
    btnXMIT->color(progdefaults.XMITcolor);
    btnCTRL->color(progdefaults.CTRLcolor);
    btnSKIP->color(progdefaults.SKIPcolor);
    btnALTR->color(progdefaults.ALTRcolor);
    btnXMIT->redraw();
    btnCTRL->redraw();
    btnSKIP->redraw();
    btnALTR->redraw();

    progdefaults.RxColor.R = r;
    progdefaults.RxColor.G = g;
    progdefaults.RxColor.B = b;

    clr = fl_rgb_color(r,g,b);
    RxText->color(clr);
    RxText->textcolor(progdefaults.RxFontcolor);
    RxText->redraw();

    ReceiveText->color(clr);
    ReceiveText->setFontColor(progdefaults.RxFontcolor, FTextBase::RECV);
    ReceiveText->setFontColor(progdefaults.XMITcolor, FTextBase::XMIT);
    ReceiveText->setFontColor(progdefaults.CTRLcolor, FTextBase::CTRL);
    ReceiveText->setFontColor(progdefaults.SKIPcolor, FTextBase::SKIP);
    ReceiveText->setFontColor(progdefaults.ALTRcolor, FTextBase::ALTR);
    ReceiveText->redraw();

    progdefaults.TxColor.R = r;
    progdefaults.TxColor.G = g;
    progdefaults.TxColor.B = b;

    TxText->color(clr);
    TxText->textcolor(progdefaults.TxFontcolor);
    TxText->redraw();

    TransmitText->color(clr);
    TransmitText->setFontColor(progdefaults.TxFontcolor, FTextBase::RECV);
    TransmitText->setFontColor(progdefaults.XMITcolor, FTextBase::XMIT);
    TransmitText->setFontColor(progdefaults.CTRLcolor, FTextBase::CTRL);
    TransmitText->setFontColor(progdefaults.SKIPcolor, FTextBase::SKIP);
    TransmitText->setFontColor(progdefaults.ALTRcolor, FTextBase::ALTR);
    TransmitText->redraw();

    progdefaults.changed = true;}
          xywh {522 231 70 21}
        }
        Fl_Button btnTextDefaults {
          label Defaults
          callback {uchar r, g, b;
    Fl_Color clr;

    progdefaults.TxFontcolor = FL_BLACK;
    progdefaults.RxFontcolor = FL_BLACK;
    progdefaults.XMITcolor = FL_RED;
    progdefaults.CTRLcolor = FL_DARK_GREEN;
    progdefaults.SKIPcolor = FL_BLUE;
    progdefaults.ALTRcolor = FL_DARK_MAGENTA;
    btnXMIT->color(progdefaults.XMITcolor);
    btnCTRL->color(progdefaults.CTRLcolor);
    btnSKIP->color(progdefaults.SKIPcolor);
    btnALTR->color(progdefaults.ALTRcolor);
    btnXMIT->redraw();
    btnCTRL->redraw();
    btnSKIP->redraw();
    btnALTR->redraw();

    r = 255; g = 242; b = 190;
    progdefaults.RxColor.R = r;
    progdefaults.RxColor.G = g;
    progdefaults.RxColor.B = b;

    clr = fl_rgb_color(r,g,b);
    RxText->color(clr);
    RxText->textcolor(progdefaults.RxFontcolor);
    RxText->redraw();

    ReceiveText->color(clr);
    ReceiveText->setFontColor(progdefaults.RxFontcolor, FTextBase::RECV);
    ReceiveText->setFontColor(progdefaults.XMITcolor, FTextBase::XMIT);
    ReceiveText->setFontColor(progdefaults.CTRLcolor, FTextBase::CTRL);
    ReceiveText->setFontColor(progdefaults.SKIPcolor, FTextBase::SKIP);
    ReceiveText->setFontColor(progdefaults.ALTRcolor, FTextBase::ALTR);
    ReceiveText->redraw();

    r = 200; g = 235; b = 255;
    progdefaults.TxColor.R = r;
    progdefaults.TxColor.G = g;
    progdefaults.TxColor.B = b;

    clr = fl_rgb_color(r,g,b);
    TxText->color(clr);
    TxText->textcolor(progdefaults.TxFontcolor);
    TxText->redraw();

    TransmitText->color(clr);
    TransmitText->setFontColor(progdefaults.TxFontcolor, FTextBase::RECV);
    TransmitText->setFontColor(progdefaults.XMITcolor, FTextBase::XMIT);
    TransmitText->setFontColor(progdefaults.CTRLcolor, FTextBase::CTRL);
    TransmitText->setFontColor(progdefaults.SKIPcolor, FTextBase::SKIP);
    TransmitText->setFontColor(progdefaults.ALTRcolor, FTextBase::ALTR);
    TransmitText->redraw();

    progdefaults.changed = true;}
          xywh {596 231 70 21}
        }
      }
      Fl_Check_Button btn_show_all_codes {
        label {display Rx control chars as ascii string}
        callback {progdefaults.show_all_codes=o->value();
progdefaults.changed = true;}
        xywh {307 295 25 25} down_box DOWN_BOX
        code0 {o->value(progdefaults.show_all_codes);}
      }
    }
    Fl_Group {} {
      label {Colors-Fonts/Tabs}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Colors-Fonts/Tabs"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Colors-Fonts/Tabs"));}
    } {
      Fl_Button btnTabColor {
        label {Tab Color}
        callback {progdefaults.TabsColor = fl_show_colormap(progdefaults.TabsColor);
setTabColors();
LOGBOOK_colors_font();
progdefaults.changed = true;}
        xywh {396 69 75 21}
      }
      Fl_Button btnTabDefaultColor {
        label System
        callback {progdefaults.TabsColor = FL_BACKGROUND2_COLOR;
setTabColors();
LOGBOOK_colors_font();
progdefaults.changed = true;}
        xywh {526 69 75 21}
      }
    }
    Fl_Group {} {
      label {Colors-Fonts/Signal Level}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Colors-Fonts/Signal Level"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Colors-Fonts/Signal Level"));}
      code3 {tab_tree->close(_("Colors-Fonts"));}
    } {
      Fl_Box {} {
        label {Signal Level Indicator}
        xywh {340 39 316 21}
      }
      Fl_Box lowcolor {
        xywh {365 96 21 21} box DIAMOND_DOWN_BOX color 0
        code0 {o->color(progdefaults.LowSignal);}
      }
      Fl_Button btnLowSignal {
        label Low
        callback {progdefaults.LowSignal = fl_show_colormap(progdefaults.LowSignal);
lowcolor->color(progdefaults.LowSignal);
lowcolor->redraw();
progdefaults.changed = true;}
        xywh {402 96 70 21}
      }
      Fl_Box normalcolor {
        xywh {365 142 21 21} box DIAMOND_DOWN_BOX color 2
        code0 {o->color(progdefaults.NormSignal);}
      }
      Fl_Counter cnt_normal_signal_level {
        label {Transition
Level (dB)}
        callback {progdefaults.normal_signal_level = o->value();

if (progdefaults.normal_signal_level > progdefaults.high_signal_level)
  progdefaults.high_signal_level = progdefaults.normal_signal_level + 0.1;

if (progdefaults.high_signal_level > progdefaults.over_signal_level)
  progdefaults.over_signal_level = progdefaults.high_signal_level + 0.1;

if (progdefaults.over_signal_level > 0)
  progdefaults.over_signal_level = 0;

cnt_normal_signal_level->value(progdefaults.normal_signal_level);
cnt_high_signal_level->value(progdefaults.high_signal_level);
cnt_over_signal_level->value(progdefaults.over_signal_level);}
        xywh {480 119 114 21} align 1 minimum -90 maximum 0
        code0 {o->value(progdefaults.normal_signal_level);}
        code1 {o->lstep(1.0);}
      }
      Fl_Button btnNormalSignal {
        label Normal
        callback {progdefaults.NormSignal = fl_show_colormap(progdefaults.NormSignal);
normalcolor->color(progdefaults.NormSignal);
normalcolor->redraw();
progdefaults.changed = true;}
        xywh {402 142 70 21}
      }
      Fl_Box highcolor {
        xywh {365 189 21 21} box DIAMOND_DOWN_BOX color 3
        code0 {o->color(progdefaults.HighSignal);}
      }
      Fl_Counter cnt_high_signal_level {
        callback {progdefaults.high_signal_level = o->value();

if (progdefaults.normal_signal_level > progdefaults.high_signal_level)
  progdefaults.high_signal_level = progdefaults.normal_signal_level + 0.1;

if (progdefaults.high_signal_level > progdefaults.over_signal_level)
  progdefaults.over_signal_level = progdefaults.high_signal_level + 0.1;

if (progdefaults.over_signal_level > 0)
  progdefaults.over_signal_level = 0;
  
cnt_normal_signal_level->value(progdefaults.normal_signal_level);
cnt_high_signal_level->value(progdefaults.high_signal_level);
cnt_over_signal_level->value(progdefaults.over_signal_level);}
        xywh {480 165 114 21} minimum -90 maximum 0
        code0 {o->value(progdefaults.high_signal_level);}
        code1 {o->lstep(1.0);}
      }
      Fl_Button btnHighSignal {
        label High
        callback {progdefaults.HighSignal = fl_show_colormap(progdefaults.HighSignal);
highcolor->color(progdefaults.HighSignal);
highcolor->redraw();
progdefaults.changed = true;}
        xywh {402 189 70 21}
      }
      Fl_Box overcolor {
        xywh {365 236 21 21} box DIAMOND_DOWN_BOX color 1
        code0 {o->color(progdefaults.OverSignal);}
      }
      Fl_Counter cnt_over_signal_level {
        callback {progdefaults.over_signal_level = o->value();

if (progdefaults.normal_signal_level > progdefaults.high_signal_level)
  progdefaults.high_signal_level = progdefaults.normal_signal_level + 0.1;

if (progdefaults.high_signal_level > progdefaults.over_signal_level)
  progdefaults.over_signal_level = progdefaults.high_signal_level + 0.1;

if (progdefaults.over_signal_level > 0)
  progdefaults.over_signal_level = 0;
  
cnt_normal_signal_level->value(progdefaults.normal_signal_level);
cnt_high_signal_level->value(progdefaults.high_signal_level);
cnt_over_signal_level->value(progdefaults.over_signal_level);}
        xywh {480 212 114 21} minimum -90 maximum 0
        code0 {o->value(progdefaults.over_signal_level);}
        code1 {o->lstep(1.0);}
      }
      Fl_Button btnOverSignal {
        label Over
        callback {progdefaults.OverSignal = fl_show_colormap(progdefaults.OverSignal);
overcolor->color(progdefaults.OverSignal);
overcolor->redraw();
progdefaults.changed = true;}
        xywh {402 236 70 21}
      }
      Fl_Progress {} {
        label label
        xywh {295 289 416 25} hide
      }
      Fl_Progress sig_vumeter {
        label label
        xywh {322 280 360 24}
        code0 {\#include "vumeter.h"}
        class vumeter
      }
      Fl_Box {} {
        label {Input signal level}
        xywh {375 307 237 17}
      }
      Fl_Button btn_default_signal_levels {
        label Default
        callback {cnt_normal_signal_level->value(
  progdefaults.normal_signal_level = -60.0);
cnt_high_signal_level->value(
  progdefaults.high_signal_level = -6.0);
cnt_over_signal_level->value(
  progdefaults.over_signal_level = -3.0);}
        xywh {618 166 70 20}
      }
    }
    Fl_Group {} {
      label {Contests/General}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Contests/General"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Contests/General"));}
    } {
      Fl_Group listbox_contest {
        label Contest
        callback {progdefaults.logging = o->index();
if (contests[progdefaults.logging].name == "State QSO parties") {
  progdefaults.CONTESTnotes = QSOparties.qso_parties[progdefaults.SQSOcontest].notes;
  progdefaults.SQSOinstate = (QSOparties.qso_parties[progdefaults.SQSOcontest].instate[0] == 'T');
} else {
  listbox_QP_contests->index(0);
  progdefaults.CONTESTnotes = contests[progdefaults.logging].notes;
}
inp_contest_notes->value(progdefaults.CONTESTnotes.c_str());
UI_select();
clear_log_fields();
clearQSO();
progdefaults.changed = true;} open
        tooltip {Select Logging as QSO or Contest} xywh {287 41 500 24} box DOWN_BOX color 7 align 4
        code0 {\#include "contest.h"}
        code1 {o->add(contest_names().c_str());}
        code2 {o->index(progdefaults.logging);}
        class Fl_ListBox
      } {}
      Fl_Group listbox_QP_contests {
        label {State QSO Party}
        callback {int n = o->index();
progdefaults.SQSOcontest = n;
progdefaults.SQSOinstate = (QSOparties.qso_parties[n].instate[0] == 'T');
if (contests[progdefaults.logging].name == "State QSO parties") {
  progdefaults.CONTESTnotes = QSOparties.qso_parties[n].notes;
  inp_contest_notes->value(progdefaults.CONTESTnotes.c_str());
} else
  inp_contest_notes->value("");
adjust_for_contest(0);
UI_select();
clear_log_fields();
clearQSO();
progdefaults.changed = true;} open
        xywh {367 75 420 24} box DOWN_BOX color 7 align 4
        code0 {\#include "contest.h"}
        code1 {o->labelsize(FL_NORMAL_SIZE);}
        code2 {o->add(QSOparties.names().c_str());}
        code3 {o->index(progdefaults.SQSOcontest);}
        class Fl_ListBox
      } {}
      Fl_Input inp_contest_notes {
        label {Text capture order}
        tooltip {Context Notes} xywh {367 110 420 24}
        code0 {o->value(progdefaults.CONTESTnotes.c_str());}
        class Fl_Input2
      }
      Fl_Group {} {
        label {Duplicate check, CALL plus} open
        xywh {204 149 590 86} box ENGRAVED_FRAME align 21
      } {
        Fl_Light_Button btnDupCheckOn {
          label {On/Off}
          callback {progdefaults.EnableDupCheck = o->value();
progdefaults.changed = true;}
          tooltip {Check for duplicates} xywh {221 174 74 20} selection_color 2
          code0 {o->value(progdefaults.EnableDupCheck);}
        }
        Fl_Check_Button btnDupBand {
          label Band
          callback {progdefaults.dupband = o->value();
progdefaults.changed = true;}
          tooltip {Bands must match} xywh {333 174 70 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.dupband);}
        }
        Fl_Check_Button btnDupMode {
          label Mode
          callback {progdefaults.dupmode = o->value();
progdefaults.changed = true;}
          tooltip {Mode must match} xywh {446 174 70 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.dupmode);}
        }
        Fl_Check_Button btnDupTimeSpan {
          label {Time span over}
          callback {progdefaults.duptimespan=(int)o->value();
progdefaults.changed = true;}
          tooltip {QSO must not occur within a time period of} xywh {571 174 129 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.duptimespan);}
        }
        Fl_Button btnDupColor {
          label {Dup Color}
          callback {fl_color_chooser("Dup Check",
  progdefaults.dup_color.R,
  progdefaults.dup_color.G,
  progdefaults.dup_color.B);
o->color(
  fl_rgb_color(
    progdefaults.dup_color.R,
    progdefaults.dup_color.G,
    progdefaults.dup_color.B));
o->redraw();
progdefaults.changed = true;}
          tooltip {Left click to select dup color} xywh {221 201 90 24} box DOWN_BOX down_box DOWN_BOX color 7 selection_color 7
          code0 {o->color(fl_rgb_color(progdefaults.dup_color.R, progdefaults.dup_color.G, progdefaults.dup_color.B));}
          code1 {\#include <FL/Fl_Color_Chooser.H>}
        }
        Fl_Button btnPossibleDupColor {
          label {? Dup Color}
          callback {fl_color_chooser("Possible_Dup Check",
  progdefaults.possible_dup_color.R,
  progdefaults.possible_dup_color.G,
  progdefaults.possible_dup_color.B);
o->color(
  fl_rgb_color(
    progdefaults.possible_dup_color.R,
    progdefaults.possible_dup_color.G,
    progdefaults.possible_dup_color.B));
o->redraw();
progdefaults.changed = true;}
          tooltip {Left click to select possible dup color} xywh {333 201 90 24} box DOWN_BOX down_box DOWN_BOX color 7 selection_color 7
          code0 {o->color(fl_rgb_color(progdefaults.possible_dup_color.R, progdefaults.possible_dup_color.G, progdefaults.possible_dup_color.B));}
          code1 {\#include <FL/Fl_Color_Chooser.H>}
        }
        Fl_Check_Button btnDupXchg1 {
          label {Exchange In}
          callback {progdefaults.dupxchg1 = o->value();
progdefaults.changed = true;}
          tooltip {free form 1 must match} xywh {446 203 105 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.dupxchg1);}
        }
        Fl_Check_Button btnDupState {
          label State
          callback {progdefaults.dupstate = o->value();
progdefaults.changed = true;}
          tooltip {State must match} xywh {571 203 70 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.dupstate);}
        }
        Fl_Value_Input nbrTimeSpan {
          label minutes
          callback {progdefaults.timespan = (int)o->value();
progdefaults.changed = true;}
          tooltip {Enter time span in minutes} xywh {664 201 53 24} align 8 maximum 1440 step 1 value 120
          code0 {o->value(progdefaults.timespan);}
          class Fl_Value_Input2
        }
      }
      Fl_Group {} {
        label {Contest Exchange / Serial \#} open
        xywh {204 233 590 100} box ENGRAVED_FRAME align 21
      } {
        Fl_Input inpSend1 {
          label Send
          callback {progdefaults.myXchg=o->value();
progdefaults.changed = true;}
          tooltip {free form exchange} xywh {269 257 200 24}
          code0 {o->value(progdefaults.myXchg.c_str());}
          code1 {inpSend1->labelsize(FL_NORMAL_SIZE);}
          class Fl_Input2
        }
        Fl_Check_Button btn599 {
          label {RST always 599/59}
          callback {progdefaults.fixed599 = o->value();
progdefaults.changed = true;}
          tooltip {Force RST in/out to 599/59} xywh {484 259 130 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.fixed599);}
        }
        Fl_Check_Button btnCutNbrs {
          label {Send CW cut \#'s}
          callback {progdefaults.cutnbrs=o->value();
progdefaults.changed = true;}
          tooltip {0 = T; 9 = N} xywh {644 259 139 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.cutnbrs);}
        }
        Fl_Group {} {open
          xywh {211 286 576 42} box ENGRAVED_FRAME
        } {
          Fl_Value_Input nbrContestStart {
            label {Start Nbr}
            callback {progdefaults.ContestStart = (int)o->value();
progdefaults.changed = true;}
            tooltip {Starting number} xywh {298 295 45 24} maximum 10000 step 1
            code0 {o->value(progdefaults.ContestStart);}
            class Fl_Value_Input2
          }
          Fl_Value_Input nbrContestDigits {
            label Digits
            callback {progdefaults.ContestDigits = (int)o->value();
progdefaults.changed = true;}
            tooltip {Number of digits in serial number} xywh {420 295 46 24} minimum 1 maximum 5 step 1 value 3
            class Fl_Value_Input2
          }
          Fl_Check_Button btnUseLeadingZeros {
            label {Use leading zeros}
            callback {progdefaults.UseLeadingZeros = o->value();
progdefaults.changed = true;}
            tooltip {Insert leading zeros into Xmtd serial number} xywh {485 297 157 20} down_box DOWN_BOX value 1
          }
          Fl_Button btnResetSerNbr {
            label Reset
            callback {cb_ResetSerNbr();}
            tooltip {Initialize the QSO logging fields} xywh {682 295 71 24}
          }
        }
      }
    }
    Fl_Group {} {
      label {Contests/Field Day}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Contests/Field Day"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Contests/Field Day"));}
    } {
      Fl_Input inp_my_FD_call {
        label {Operator Call}
        callback {progdefaults.fd_op_call=o->value();
progdefaults.changed = true;}
        tooltip {Field Day Callsign
May be same as OP callsign} xywh {346 73 80 24}
        code0 {o->value(progdefaults.fd_op_call.c_str());}
        code1 {inpSend1->labelsize(FL_NORMAL_SIZE);}
        class Fl_Input2
      }
      Fl_Input inp_my_FD_section {
        label {My Section}
        callback {progdefaults.my_FD_section=o->value();
progdefaults.changed = true;}
        tooltip {Field Day Section} xywh {654 73 45 24}
        code0 {o->value(progdefaults.my_FD_section.c_str());}
        code1 {inpSend1->labelsize(FL_NORMAL_SIZE);}
        class Fl_Input2
      }
      Fl_Input inp_my_FD_class {
        label {My Class}
        callback {progdefaults.my_FD_class=o->value();
progdefaults.changed = true;}
        tooltip {Field Day Class} xywh {507 73 50 24}
        code0 {o->value(progdefaults.my_FD_class.c_str());}
        code1 {inpSend1->labelsize(FL_NORMAL_SIZE);}
        class Fl_Input2
      }
    }
    Fl_Group {} {
      label {Contests/JOTA School}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Contests/JOTA School"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Contests/JOTA School"));}
      code3 {tab_tree->close(_("Contests"));}
    } {
      Fl_Group {} {
        label {School Round Up} open
        xywh {211 137 580 53} box ENGRAVED_BOX align 21
      } {
        Fl_Input inp_my_SCR_class {
          label {My Class}
          callback {progdefaults.my_SCR_class=o->value();
progdefaults.changed = true;}
          tooltip {School Round Up - allowable I, H, O - see rules} xywh {397 159 69 24}
          code0 {o->value(progdefaults.my_SCR_class.c_str());}
          code1 {inpSend1->labelsize(FL_NORMAL_SIZE);}
          class Fl_Input2
        }
      }
      Fl_Group {} {
        label {Jamboree OTA} open
        xywh {211 44 580 89} box ENGRAVED_BOX align 21
      } {
        Fl_Input inp_my_JOTA_troop {
          label {My Troop}
          callback {progdefaults.my_JOTA_troop=o->value();
progdefaults.changed = true;}
          tooltip {My JOTA Troop} xywh {396 67 200 24}
          code0 {o->value(progdefaults.my_JOTA_troop.c_str());}
          code1 {inpSend1->labelsize(FL_NORMAL_SIZE);}
          class Fl_Input2
        }
        Fl_Input inp_my_JOTA_scout {
          label {Scout Op'}
          callback {progdefaults.my_JOTA_scout = o->value();
progdefaults.changed=true;}
          tooltip {Scout Operator Name} xywh {396 98 200 24}
          code0 {o->value(progdefaults.my_JOTA_scout.c_str());}
          code1 {inpSend1->labelsize(FL_NORMAL_SIZE);}
          class Fl_Input2
        }
      }
    }
    Fl_Group {} {
      label {IDs/CW}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("IDs/CW"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("IDs/CW"));}
    } {
      Fl_Group sld {
        label {CW Postamble ID} open
        xywh {234 83 536 127} box ENGRAVED_FRAME align 21
      } {
        Fl_Check_Button btnCWID {
          label {Transmit callsign}
          callback {progdefaults.CWid = o->value();
progdefaults.changed = true;}
          tooltip {Send Callsign in CW at end of every transmission} xywh {287 121 140 24} down_box DOWN_BOX
          code0 {o->value(progdefaults.CWid);}
        }
        Fl_Value_Slider sldrCWIDwpm {
          label {Speed (WPM):}
          callback {progdefaults.CWIDwpm = (int)o->value();
progdefaults.changed = true;}
          tooltip {Send at this WPM} xywh {287 164 180 20} type Horizontal align 1 minimum 15 maximum 40 step 1 value 18 textsize 14
          code0 {o->value(progdefaults.CWIDwpm);}
          code1 {o->labelsize(FL_NORMAL_SIZE); o->textsize(FL_NORMAL_SIZE);}
          class Fl_Value_Slider2
        }
        Fl_Button bCWIDModes {
          label {CW ID modes}
          callback {mode_browser->label(o->label());
mode_browser->callback(0);
mode_browser->show_(&progdefaults.cwid_modes);
progdefaults.changed = true;}
          xywh {485 121 120 24}
        }
      }
    }
    Fl_Group {} {
      label {IDs/RsID}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("IDs/RsID"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("IDs/RsID"));}
    } {
      Fl_Group {} {
        label {Reed-Solomon ID (Rx)} open
        xywh {243 22 535 210} box ENGRAVED_FRAME align 21
      } {
        Fl_Check_Button chkRSidNotifyOnly {
          label {Notify only}
          callback {progdefaults.rsid_notify_only = o->value();
notify_create_rsid_event(progdefaults.rsid_notify_only);
if (progdefaults.rsid_notify_only) {
    chkRetainFreqLock->deactivate();
    chkDisableFreqChange->deactivate();
}
else {
    chkRetainFreqLock->activate();
    chkDisableFreqChange->activate();
}
progdefaults.changed = true;}
          tooltip {Check this to be notified when an RSID is received
without changing modem and frequency} xywh {251 79 168 20} down_box DOWN_BOX
          code0 {chkRSidNotifyOnly->value(progdefaults.rsid_notify_only);}
        }
        Fl_Button bRSIDRxModes {
          label {Receive modes}
          callback {mode_browser->label(o->label());
mode_browser->callback(0);
mode_browser->show_(&progdefaults.rsid_rx_modes);
progdefaults.changed = true;}
          xywh {251 48 130 24}
        }
        Fl_Check_Button chkRSidWideSearch {
          label {Searches passband}
          callback {progdefaults.rsidWideSearch=o->value();
rxid_selection_color();
progdefaults.changed = true;}
          tooltip {ON - search over entire waterfall
OFF - limit search to +/- 200 Hz} xywh {251 110 203 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.rsidWideSearch);}
        }
        Fl_Check_Button chkRSidMark {
          label {Mark prev freq/mode}
          callback {progdefaults.rsid_mark = o->value();
progdefaults.changed = true;}
          tooltip {Insert RX text marker before
changing frequency and modem} xywh {251 142 203 20} down_box DOWN_BOX
          code0 {chkRSidMark->value(progdefaults.rsid_mark);}
        }
        Fl_Check_Button chkRSidAutoDisable {
          label {Disables detector}
          callback {progdefaults.rsid_auto_disable = o->value();
progdefaults.changed = true;}
          tooltip {Disable further detection when RSID is received} xywh {251 174 203 20} down_box DOWN_BOX
          code0 {if (progdefaults.rsid_notify_only) progdefaults.rsid_auto_disable = false;}
          code1 {chkRSidAutoDisable->value(progdefaults.rsid_auto_disable);}
          code2 {if (progdefaults.rsid_notify_only) chkRSidAutoDisable->deactivate();}
        }
        Fl_Group listbox_rsid_errors {
          label {Allow errors}
          callback {progdefaults.RsID_label_type = o->index();
progdefaults.changed = true;} open
          tooltip {Low = zero errors
Medium = 1 error
High = 2 errors} xywh {251 200 100 22} box DOWN_BOX color 7 align 8
          code0 {listbox_rsid_errors->add(_("Low")); listbox_rsid_errors->add(_("Medium")); listbox_rsid_errors->add(_("High"));}
          code1 {listbox_rsid_errors->index(progdefaults.RsID_label_type);}
          code2 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_ListBox
        } {}
        Fl_Counter val_RSIDsquelch {
          label {Squelch open (sec)}
          callback {progdefaults.rsid_squelch = (int)o->value();
progdefaults.changed = true;}
          tooltip {Use for triggering amplifier carrier detect} xywh {471 201 140 21} align 8 minimum 0 maximum 300 step 1
          code0 {o->value(progdefaults.rsid_squelch);}
          code1 {o->lstep(10.0);}
        }
        Fl_Check_Button chkRSidShowAlert {
          label {Disable alert dialog}
          callback {progdefaults.disable_rsid_warning_dialog_box = o->value();
progdefaults.changed = true;}
          tooltip {Do not show RsID alert dialog box} xywh {487 110 203 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.disable_rsid_warning_dialog_box);}
        }
        Fl_Check_Button chkRetainFreqLock {
          label {Retain tx freq lock}
          callback {progdefaults.retain_freq_lock = o->value();
progdefaults.changed = true;}
          tooltip {Retain TX lock frequency (Lk) when changing to RX RsID frequency} xywh {487 142 203 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.retain_freq_lock);}
        }
        Fl_Check_Button chkDisableFreqChange {
          label {Disable freq change}
          callback {progdefaults.disable_rsid_freq_change = o->value();
progdefaults.changed = true;}
          tooltip {Do not automatically change to RX RsID frequency} xywh {487 174 203 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.disable_rsid_freq_change);}
        }
        Fl_Group {} {
          label {The RsID notification message contents and
display characteristics are configured on the
"Notifications" configure dialog.} open
          xywh {427 41 330 60} box BORDER_BOX align 21
        } {}
      }
      Fl_Group {} {
        label {Pre-Signal Tone} open
        xywh {243 245 265 97} box ENGRAVED_FRAME align 21
      } {
        Fl_Counter val_pretone {
          label Seconds
          callback {progdefaults.pretone = o->value();
progdefaults.changed = true;}
          tooltip {Use for triggering amplifier carrier detect} xywh {299 283 140 21} minimum 0 maximum 10
          code0 {o->value(progdefaults.pretone);}
        }
      }
      Fl_Group {} {
        label {Reed-Solomon ID (Tx)} open
        xywh {511 245 265 97} box ENGRAVED_FRAME align 21
      } {
        Fl_Button bRSIDTxModes {
          label {Transmit modes}
          callback {mode_browser->label(o->label());
mode_browser->callback(0);
mode_browser->show_(&progdefaults.rsid_tx_modes);
progdefaults.changed = true;}
          xywh {588 272 130 24}
        }
        Fl_Check_Button btn_post_rsid {
          label {End of xmt ID}
          callback {progdefaults.rsid_post=o->value();
progdefaults.changed = true;}
          tooltip {Add RsID signal to end of transmission} xywh {588 307 97 17} down_box DOWN_BOX
          code0 {o->value(progdefaults.rsid_post);}
        }
      }
    }
    Fl_Group {} {
      label {IDs/Video}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("IDs/Video"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("IDs/Video"));}
      code3 {tab_tree->close(_("IDs"));}
    } {
      Fl_Group {} {
        label {Video Preamble ID} open
        xywh {237 47 536 189} box ENGRAVED_FRAME align 21
      } {
        Fl_Check_Button btnsendid {
          label {Transmit mode ID}
          callback {progdefaults.sendid=o->value();
progdefaults.changed = true;}
          tooltip {Waterfall video ID} xywh {255 81 150 20} down_box DOWN_BOX
        }
        Fl_Check_Button btnsendvideotext {
          label {Transmit video text}
          callback {progdefaults.sendtextid=o->value();
progdefaults.changed = true;}
          tooltip {Waterfall video text} xywh {255 113 155 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.sendtextid);}
        }
        Fl_Input valVideotext {
          label {:}
          callback {progdefaults.strTextid = o->value();
progdefaults.changed = true;}
          tooltip {Limit to a few characters,
as in CQEM or IOTA etc.} xywh {422 111 323 24}
          code0 {o->value(progdefaults.strTextid.c_str());}
          code1 {valVideotext->labelsize(FL_NORMAL_SIZE);}
          class Fl_Input2
        }
        Fl_Check_Button chkID_SMALL {
          label {Use small font}
          callback {progdefaults.ID_SMALL=o->value();
progdefaults.changed = true;}
          tooltip {ON - small font
OFF - large font} xywh {255 145 120 20} down_box DOWN_BOX value 1
          code0 {o->value(progdefaults.ID_SMALL);}
        }
        Fl_Value_Slider sldrVideowidth {
          label {Chars/Row:}
          callback {progdefaults.videowidth = (int)o->value();
progdefaults.changed = true;}
          tooltip {Set the number of characters per row} xywh {495 143 125 24} type Horizontal align 4 minimum 1 maximum 8 step 1 value 4 textsize 14
          code0 {o->value(progdefaults.videowidth);}
          code2 {o->labelsize(FL_NORMAL_SIZE); o->textsize(FL_NORMAL_SIZE);}
          class Fl_Value_Slider2
        }
        Fl_Check_Button btn_vidlimit {
          label {500 Hz limit}
          callback {progdefaults.vidlimit=o->value();
progdefaults.changed = true;}
          xywh {255 177 110 15} down_box DOWN_BOX
          code0 {o->value(progdefaults.vidlimit);}
        }
        Fl_Check_Button btn_vidmodelimit {
          label {Mode width limit}
          callback {progdefaults.vidmodelimit=o->value();
progdefaults.changed=true;}
          xywh {255 205 110 15} down_box DOWN_BOX
          code0 {o->value(progdefaults.vidmodelimit);}
        }
        Fl_Button bVideoIDModes {
          label {Video ID modes}
          callback {mode_browser->label(o->label());
mode_browser->callback(0);
mode_browser->show_(&progdefaults.videoid_modes);
progdefaults.changed = true;}
          xywh {625 78 120 24}
        }
      }
    }
    Fl_Group {} {
      label {Logging/MacLogger}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Logging/MacLogger"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Logging/MacLogger"));}
    } {
      Fl_Check_Button btnConnectToMaclogger {
        label {Connect to MacLogger}
        callback {progdefaults.connect_to_maclogger = o->value();
if (progdefaults.connect_to_maclogger == false)
  maclogger_close();
else
  maclogger_init();
progdefaults.changed = true;}
        xywh {211 35 186 20} down_box DOWN_BOX
        code0 {o->value(progdefaults.connect_to_maclogger);}
        code1 {\#include "maclogger.h"}
      }
      Fl_Check_Button btn_capture_maclogger_radio {
        label {Capture Radio Report}
        callback {progdefaults.capture_maclogger_radio = o->value();
progdefaults.changed = true;}
        xywh {406 35 186 20} down_box DOWN_BOX value 1
        code0 {o->value(progdefaults.capture_maclogger_radio);}
      }
      Fl_Check_Button btn_capture_maclogger_log {
        label {Capture Log Report}
        callback {progdefaults.capture_maclogger_log = o->value();
progdefaults.changed = true;}
        xywh {406 60 186 21} down_box DOWN_BOX
        code0 {o->value(progdefaults.capture_maclogger_log);}
      }
      Fl_Check_Button btn_capture_maclogger_lookup {
        label {Capture Lookup }
        callback {progdefaults.capture_maclogger_lookup = o->value();
progdefaults.changed = true;}
        xywh {606 35 186 20} down_box DOWN_BOX
        code0 {o->value(progdefaults.capture_maclogger_lookup);}
      }
      Fl_Check_Button btn_capture_maclogger_spot_tune {
        label {Capture Spot Tune}
        callback {progdefaults.capture_maclogger_spot_tune = o->value();
progdefaults.changed = true;}
        xywh {606 60 186 21} down_box DOWN_BOX
        code0 {o->value(progdefaults.capture_maclogger_spot_tune);}
      }
      Fl_Check_Button btn_capture_maclogger_spot_report {
        label {Capture Spot Report}
        callback {progdefaults.capture_maclogger_spot_report = o->value();
progdefaults.changed = true;}
        xywh {606 88 186 21} down_box DOWN_BOX
        code0 {o->value(progdefaults.capture_maclogger_spot_report);}
      }
      Fl_Check_Button btn_enable_maclogger_log {
        label {Enable UDP log file}
        callback {progdefaults.enable_maclogger_log = o->value();
progdefaults.changed = true;}
        xywh {211 117 165 26} down_box DOWN_BOX
        code0 {o->value(progdefaults.enable_maclogger_log);}
      }
      Fl_Text_Display txt_UDP_data {
        label {UDP data stream}
        xywh {210 164 580 161} align 5
        code0 {Fl_Text_Buffer *txtbuffer = new Fl_Text_Buffer();}
        code1 {o->buffer(txtbuffer);}
      }
      Fl_Output txt_maclogger_log_filename {
        xywh {379 117 272 26}
        code0 {o->value(progdefaults.maclogger_log_filename.c_str());}
      }
      Fl_Button {} {
        label {Clear UDP text}
        callback {txt_UDP_data->buffer()->text("");}
        xywh {661 117 129 26}
      }
      Fl_Check_Button btn_maclogger_spot_rx {
        label {Tune to Rx Spot}
        callback {progdefaults.maclogger_spot_rx = o->value();
progdefaults.changed = true;}
        tooltip {ON - use Rx spot freq
OFF - use Tx spot freq} xywh {406 88 186 21} down_box DOWN_BOX
        code0 {o->value(progdefaults.maclogger_spot_rx);}
      }
    }
    Fl_Group {} {
      label {Logging/N3FJP logs}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Logging/N3FJP logs"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Logging/N3FJP logs"));}
    } {
      Fl_Text_Display txt_N3FJP_data {
        label {TCP/IP Data Stream}
        xywh {205 94 590 150} align 5
        code0 {Fl_Text_Buffer *txtbuffer = new Fl_Text_Buffer();}
        code1 {o->buffer(txtbuffer);}
      }
      Fl_Button {} {
        label {Clear text}
        callback {txt_N3FJP_data->buffer()->text("");}
        xywh {701 247 90 24}
      }
      Fl_Input txt_N3FJP_ip_address {
        label Address
        callback {progdefaults.N3FJP_address = o->value();
progdefaults.changed = true;}
        tooltip {N3FJP Server IP Address} xywh {205 49 350 25} align 5
        code0 {o->labelsize(FL_NORMAL_SIZE);}
        code1 {o->value(progdefaults.N3FJP_address.c_str());}
        class Fl_Input2
      }
      Fl_Input txt_N3FJP_ip_port_no {
        label Port
        callback {progdefaults.N3FJP_port = o->value();
progdefaults.changed = true;}
        tooltip {N3FJP Server IP Port} xywh {565 49 55 25} align 5
        code0 {o->labelsize(FL_NORMAL_SIZE);}
        code1 {o->value(progdefaults.N3FJP_port.c_str());}
        class Fl_Input2
      }
      Fl_Button btn_default_N3FJP_ip {
        label Default
        callback {txt_N3FJP_ip_address->value("127.0.0.1");
progdefaults.N3FJP_address = "127.0.0.1";
txt_N3FJP_ip_port_no->value("1100");
progdefaults.N3FJP_port = "1100";
progdefaults.changed = true;}
        tooltip {Returns IP Address and port
number to the default value.} xywh {623 49 67 25}
      }
      Fl_Check_Button btn_enable_N3FJP_log {
        label {Enable Data Stream}
        callback {progdefaults.enable_N3FJP_log = o->value();
progdefaults.changed = true;}
        xywh {210 246 165 26} down_box DOWN_BOX
        code0 {o->value(progdefaults.enable_N3FJP_log);}
      }
      Fl_Check_Button btn_connect_to_n3fjp {
        label Connect
        callback {progdefaults.connect_to_n3fjp=o->value();
progdefaults.changed=true;}
        xywh {695 39 70 15} down_box DOWN_BOX
        code0 {o->value(progdefaults.connect_to_n3fjp);}
      }
      Fl_Box box_n3fjp_connected {
        label Connected
        xywh {695 66 16 16} box DIAMOND_DOWN_BOX color 52 selection_color 58 align 8
      }
      Fl_Check_Button btn_N3FJP_sweet_spot {
        label {Center DXspot freq at sweet spot}
        callback {progdefaults.N3FJP_sweet_spot = o->value();
progdefaults.changed = true;}
        tooltip {N3FJP DX spots centered on mode sweet spot} xywh {210 299 255 26} down_box DOWN_BOX
        code0 {o->value(progdefaults.N3FJP_sweet_spot);}
      }
      Fl_Check_Button btn_N3FJP_modem_carrier {
        label {Report actual modem RF frequency}
        callback {progdefaults.N3FJP_modem_carrier = o->value();
progdefaults.changed = true;}
        tooltip {Suppressed carrier +/- AF injection frequency} xywh {475 299 255 26} down_box DOWN_BOX
        code0 {o->value(progdefaults.N3FJP_modem_carrier);}
      }
      Fl_Check_Button btn_enable_N3FJP_RIGTX {
        label {PTT via <RIGTX> and <RIGRX>}
        callback {progdefaults.enable_N3FJP_RIGTX = o->value();
progdefaults.changed = true;}
        xywh {210 273 165 26} down_box DOWN_BOX
        code0 {o->value(progdefaults.enable_N3FJP_RIGTX);}
      }
    }
    Fl_Group {} {
      label {Logging/Call Lookup}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Logging/Call Lookup"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Logging/Call Lookup"));}
    } {
      Fl_Group {} {
        label {Web Browser lookup} open
        xywh {208 24 585 131} box ENGRAVED_FRAME align 21
      } {
        Fl_Round_Button btnQRZWEBnotavailable {
          label None
          callback {set_qrzweb_buttons(o);
progdefaults.QRZWEB = QRZWEBNONE;
progdefaults.changed = true;}
          tooltip {Do not use callsign lookup via web browser} xywh {248 43 61 20} down_box DOWN_BOX value 1
          code0 {o->value(progdefaults.QRZWEB == QRZWEBNONE);}
        }
        Fl_Round_Button btnQRZonline {
          label {QRZ on line}
          callback {set_qrzweb_buttons(o);
progdefaults.QRZWEB = QRZHTML;
progdefaults.changed = true;}
          tooltip {Visit QRZ web site} xywh {248 63 83 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.QRZWEB == QRZHTML);}
        }
        Fl_Round_Button btnHAMCALLonline {
          label {HamCall online}
          callback {set_qrzweb_buttons(o);
progdefaults.QRZWEB = HAMCALLHTML;
progdefaults.changed = true;}
          tooltip {Visit Hamcall web site} xywh {248 84 83 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.QRZWEB == HAMCALLHTML);}
        }
        Fl_Round_Button btnHamQTHonline {
          label {HamQTH online}
          callback {set_qrzweb_buttons(o);
progdefaults.QRZWEB = HAMQTHHTML;
progdefaults.changed = true;}
          tooltip {Visit hamQTH web site} xywh {248 105 20 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.QRZWEB == HAMQTHHTML);}
        }
        Fl_Round_Button btnCallookOnline {
          label {Callook online}
          callback {set_qrzweb_buttons(o);
progdefaults.QRZWEB = CALLOOKHTML;
progdefaults.changed = true;}
          tooltip {Visit hamQTH web site} xywh {248 126 20 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.QRZWEB == CALLOOKHTML);}
        }
        Fl_Input inp_qrzurl {
          label QRZ
          callback {progdefaults.qrzurl = o->value();
progdefaults.changed=true;}
          xywh {502 37 270 22}
          code0 {o->value(progdefaults.qrzurl.c_str());}
          class Fl_Input2
        }
        Fl_Input inp_hamcallurl {
          label Hamcall
          callback {progdefaults.hamcallurl = o->value();
progdefaults.changed = true;}
          xywh {502 64 270 22}
          code0 {o->value(progdefaults.hamcallurl.c_str());}
          class Fl_Input2
        }
        Fl_Input inp_hamqthurl {
          label HamQTH
          callback {progdefaults.hamqthurl = o->value();
progdefaults.changed = true;}
          xywh {502 92 270 22}
          code0 {o->value(progdefaults.hamqthurl.c_str());}
          class Fl_Input2
        }
        Fl_Input inp_callook_url {
          label Callook
          callback {progdefaults.callookurl = o->value();
progdefaults.changed = true;}
          tooltip {Callook.info web site} xywh {502 121 270 22}
          code0 {o->value(progdefaults.callookurl.c_str());}
          class Fl_Input2
        }
      }
      Fl_Group {} {
        label {Data base lookup} open
        xywh {208 156 585 185} box ENGRAVED_FRAME align 21
      } {
        Fl_Round_Button btnQRZXMLnotavailable {
          label None
          callback {set_qrzxml_buttons(o);
progdefaults.QRZXML = QRZXMLNONE;
progdefaults.changed = true;}
          tooltip {Do not use callsign database} xywh {255 179 69 20} down_box DOWN_BOX value 1
          code0 {o->value(progdefaults.QRZXML == QRZXMLNONE);}
        }
        Fl_Round_Button btnQRZcdrom {
          label {QRZ cdrom}
          callback {set_qrzxml_buttons(o);
progdefaults.QRZXML = QRZCD;
progdefaults.changed = true;}
          tooltip {Use CD or hard drive CD image} xywh {255 205 76 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.QRZXML == QRZCD);}
        }
        Fl_Round_Button btnQRZsub {
          label {QRZ.com}
          callback {set_qrzxml_buttons(o);
progdefaults.QRZXML = QRZNET;
progdefaults.changed = true;}
          tooltip {You need a paid QRZ online
subscription to access} xywh {255 231 137 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.QRZXML == QRZNET);}
        }
        Fl_Round_Button btnHamcall {
          label {Hamcall.net}
          callback {set_qrzxml_buttons(o);
progdefaults.QRZXML = HAMCALLNET;
progdefaults.changed = true;}
          tooltip {You need a paid Hamcall online
subscription to access} xywh {255 258 137 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.QRZXML == HAMCALLNET);}
        }
        Fl_Round_Button btnHamQTH {
          label {HamQTH.com}
          callback {set_qrzxml_buttons(o);
progdefaults.QRZXML = HAMQTH;
progdefaults.changed = true;}
          tooltip {Free service courtesy of OK} xywh {255 284 137 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.QRZXML == HAMQTH);}
        }
        Fl_Round_Button btnCALLOOK {
          label {Callook.info}
          callback {set_qrzxml_buttons(o);
progdefaults.QRZXML = CALLOOK;
progdefaults.changed = true;}
          tooltip {Callook.info lookup (free service US callsigns only)} xywh {255 311 113 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.QRZXML == CALLOOK);}
        }
        Fl_Input txtQRZpathname {
          callback {progdefaults.QRZpathname = o->value();
progdefaults.QRZchanged = true;
progdefaults.changed = true;}
          tooltip {ie: /home/dave/CALLBK/ or C:/CALLBK/
Leave blank to search for database} xywh {372 204 401 22}
          code0 {o->value(progdefaults.QRZpathname.c_str());}
          code1 {txtQRZpathname->labelsize(FL_NORMAL_SIZE);}
          class Fl_Input2
        }
        Fl_Input inpQRZusername {
          label {User name}
          callback {progdefaults.QRZusername = o->value();
progdefaults.changed = true;}
          tooltip {Login name for QRZ / Hamcall / HamQTH} xywh {482 230 163 22}
          code0 {o->value(progdefaults.QRZusername.c_str());}
          code1 {inpQRZusername->labelsize(FL_NORMAL_SIZE);}
          class Fl_Input2
        }
        Fl_Input inpQRZuserpassword {
          label Password
          callback {progdefaults.QRZuserpassword = o->value();
progdefaults.changed = true;}
          tooltip {Password for QRZ / Hamcall / HamQTH} xywh {482 257 163 22}
          code0 {o->value(progdefaults.QRZuserpassword.c_str());}
          code1 {o->type(FL_SECRET_INPUT);}
          code2 {inpQRZuserpassword->labelsize(FL_NORMAL_SIZE);}
          class Fl_Input2
        }
        Fl_Button btnQRZpasswordShow {
          label Show
          callback {inpQRZuserpassword->type(inpQRZuserpassword->type() ^ FL_SECRET_INPUT);
inpQRZuserpassword->redraw();
o->label((inpQRZuserpassword->type() & FL_SECRET_INPUT) ? "Show" : "Hide");}
          tooltip {Show password in plain text} xywh {657 257 76 22}
        }
        Fl_Group {} {open
          xywh {377 307 403 27} box ENGRAVED_FRAME
        } {
          Fl_Check_Button btn_notes_address {
            label {Add address to notes field}
            callback {progdefaults.notes_address = o->value();
progdefaults.changed = true;}
            xywh {401 313 207 15} down_box DOWN_BOX
            code0 {o->value(progdefaults.notes_address);}
          }
          Fl_Check_Button btn_clear_notes {
            label {clear old data}
            callback {progdefaults.clear_notes = o->value();
progdefaults.changed= true;}
            xywh {628 313 122 15} down_box DOWN_BOX
            code0 {o->value(progdefaults.clear_notes);}
          }
        }
      }
    }
    Fl_Group {} {
      label {Logging/eQSL}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Logging/eQSL"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Logging/eQSL"));}
    } {
      Fl_Input inpEQSL_www_url {
        label {www url}
        callback {progdefaults.eqsl_www_url = o->value();
progdefaults.changed = true;}
        tooltip {Your login name} xywh {355 20 390 22}
        code0 {o->value(progdefaults.eqsl_www_url.c_str());}
        code1 {o->labelsize(FL_NORMAL_SIZE);}
        class Fl_Input2
      }
      Fl_Input inpEQSL_id {
        label {User ID}
        callback {progdefaults.eqsl_id = o->value();
progdefaults.changed = true;}
        tooltip {Your login name} xywh {354 43 150 22}
        code0 {o->value(progdefaults.eqsl_id.c_str());}
        code1 {o->labelsize(FL_NORMAL_SIZE);}
        class Fl_Input2
      }
      Fl_Input inpEQSL_pwd {
        label Password
        callback {progdefaults.eqsl_pwd = o->value();
progdefaults.changed = true;}
        tooltip {Your login password} xywh {354 66 150 22}
        code0 {o->value(progdefaults.eqsl_pwd.c_str());}
        code1 {o->type(FL_SECRET_INPUT);}
        code2 {o->labelsize(FL_NORMAL_SIZE);}
        class Fl_Input2
      }
      Fl_Button btnEQSL_pwd_show {
        label Show
        callback {inpEQSL_pwd->type(inpEQSL_pwd->type() ^ FL_SECRET_INPUT);
inpEQSL_pwd->redraw();
o->label((inpEQSL_pwd->type() & FL_SECRET_INPUT) ? _("Show") : _("Hide"));}
        tooltip {Show password in plain text} xywh {510 66 70 22}
      }
      Fl_Input inpEQSL_nick {
        label {QTH Nickname}
        callback {progdefaults.eqsl_nick = o->value();
progdefaults.changed = true;}
        tooltip {Your login name} xywh {354 90 150 22}
        code0 {o->value(progdefaults.eqsl_nick.c_str());}
        code1 {o->labelsize(FL_NORMAL_SIZE);}
        class Fl_Input2
      }
      Fl_Button btn_verify_eqsl {
        label Verify
        callback cb_btn_verify_eqsl
        tooltip {Verify database with eQSL download file} xywh {675 90 70 22}
      }
      Fl_Group {} {
        label Options open
        xywh {242 118 516 223} box ENGRAVED_FRAME align 21
      } {
        Fl_Check_Button btn_send_when_logged {
          label {send when logged (log button, <LOG>, <LNW>)}
          callback {progdefaults.eqsl_when_logged = o->value();
progdefaults.changed = true;}
          tooltip {automatic data upload} xywh {326 127 70 15} down_box DOWN_BOX
          code0 {o->value(progdefaults.eqsl_when_logged);}
        }
        Fl_Check_Button btn_send_datetime_off {
          label {Use date/time off for log entry}
          callback {progdefaults.eqsl_datetime_off = o->value();
progdefaults.changed = true;}
          tooltip {default uses date/time on} xywh {326 147 70 15} down_box DOWN_BOX
          code0 {o->value(progdefaults.eqsl_datetime_off);}
        }
        Fl_Check_Button btn_show_eqsl_delivery {
          label {Show delivery message}
          callback {progdefaults.eqsl_show_delivery = o->value();
progdefaults.changed = true;}
          tooltip {Display timed delivery message if enabled} xywh {326 167 70 15} down_box DOWN_BOX
          code0 {o->value(progdefaults.eqsl_show_delivery);}
        }
        Fl_Input txt_eqsl_default_message {
          label {Default message}
          callback {progdefaults.eqsl_default_message = o->value();
progdefaults.changed = true;}
          tooltip {default text to send with <LOG> etc} xywh {295 208 451 40} type Multiline align 5 when 1
          code0 {o->value(progdefaults.eqsl_default_message.c_str());}
          class Fl_Input2
        }
        Fl_Group {} {
          label {Text Tags (tags use {} delimiters)} open
          xywh {258 254 481 81} box FLAT_BOX align 21
        } {
          Fl_Box eqsl_txt1 {
            label {  {CALL} other ops call sign}
            xywh {264 294 220 17} align 20
          }
          Fl_Box eqsl_txt2 {
            label {  {MODE} full mode / submode}
            xywh {262 313 220 17} align 20
          }
          Fl_Box eqsl_txt3 {
            label {{NAME} other ops name}
            xywh {510 294 220 17} align 20
          }
          Fl_Box {} {
            label {These tags can also be used in <EQSL:[message]>}
            xywh {280 273 440 17}
          }
        }
      }
    }
    Fl_Group {} {
      label {Logging/LoTW}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Logging/LoTW"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Logging/LoTW"));}
    } {
      Fl_Input txt_lotw_pathname {
        label {tqsl:}
        callback {progdefaults.lotw_pathname = o->value();
progdefaults.changed = true;}
        tooltip {Enter full path-filename for tqsl executable} xywh {283 50 422 24} when 1
        code0 {o->value(progdefaults.lotw_pathname.c_str());}
        class Fl_Input2
      }
      Fl_Input inpLOTW_pwd {
        label Password
        callback {progdefaults.lotw_pwd = o->value();
progdefaults.changed = true;}
        tooltip {Your tqsl login password} xywh {283 85 225 24}
        code0 {o->value(progdefaults.lotw_pwd.c_str());}
        code1 {o->type(FL_SECRET_INPUT);}
        code2 {inpLOTW_pwd->labelsize(FL_NORMAL_SIZE);}
        class Fl_Input2
      }
      Fl_Check_Button btn_submit_lotw_password {
        label {Password required}
        callback {progdefaults.submit_lotw_password=o->value();
progdefaults.changed=true;}
        tooltip {Submit password with each upload} xywh {605 89 162 16} down_box DOWN_BOX
        code0 {o->value(progdefaults.submit_lotw_password);}
      }
      Fl_Input inpLOTW_location {
        label Location
        callback {progdefaults.lotw_location = o->value();
progdefaults.changed = true;}
        tooltip {tqsl station location} xywh {283 116 250 24}
        code0 {o->value(progdefaults.lotw_location.c_str());}
        code1 {inpLOTW_pwd->labelsize(FL_NORMAL_SIZE);}
        class Fl_Input2
      }
      Fl_Button btn_select_lotw {
        label Locate
        callback {std::string str = select_binary_pathname(progdefaults.lotw_pathname);
txt_lotw_pathname->value(str.c_str());
progdefaults.lotw_pathname = str;
progdefaults.changed = true;}
        tooltip {Locate tqsl executable} xywh {710 50 70 24}
      }
      Fl_Check_Button btn_lotw_quiet_mode {
        label {Quiet mode [-q], do not open tqsl dialog}
        callback {progdefaults.lotw_quiet_mode=o->value();
progdefaults.changed=true;}
        tooltip {Operate tqsl in batch mode (no dialog)} xywh {243 149 309 16} down_box DOWN_BOX
        code0 {o->value(progdefaults.lotw_quiet_mode);}
      }
      Fl_Check_Button btn_submit_lotw {
        label {Send QSO data to LoTW when logged}
        callback {progdefaults.submit_lotw=o->value();
progdefaults.changed=true;}
        tooltip {Submit each QSO as logged} xywh {243 176 289 16} down_box DOWN_BOX
        code0 {o->value(progdefaults.submit_lotw);}
      }
      Fl_Check_Button btn_show_lotw_delivery {
        label {Show delivery message}
        callback {progdefaults.lotw_show_delivery = o->value();
progdefaults.changed = true;}
        tooltip {Display timed delivery message if enabled} xywh {243 203 70 15} down_box DOWN_BOX
        code0 {o->value(progdefaults.lotw_show_delivery);}
      }
      Fl_Button btn_export_lotw {
        label Export
        callback {cb_btnExportLoTW();}
        tooltip {Export records for LoTW upload} xywh {216 232 70 24}
      }
      Fl_Button btn_review_lotw {
        label Check
        callback {cb_review_lotw();}
        tooltip {Review lotw.adif file before sending with tqsl} xywh {216 259 70 24}
      }
      Fl_Button btn_send_lotw {
        label Send
        callback {cb_send_lotw();}
        tooltip {Send lotw.adif via tqsl} xywh {216 287 70 24}
      }
      Fl_Box {} {
        label {Export logbook records for LoTW upload}
        xywh {291 232 346 24} align 20
      }
      Fl_Box {} {
        label {Review / edit the exported LoTW upload adif file}
        xywh {291 259 346 24} align 20
      }
      Fl_Box {} {
        label {Submit the upload adif file to LoTW}
        xywh {291 287 346 24} align 20
      }
      Fl_Box {} {
        label {You must have tqsl installed and it's location recorded for LoTW updates to work!}
        xywh {212 22 574 24} align 16
      }
      Fl_Button btnLOTW_pwd_show {
        label Show
        callback {inpLOTW_pwd->type(inpLOTW_pwd->type() ^ FL_SECRET_INPUT);
inpLOTW_pwd->redraw();
o->label((inpLOTW_pwd->type() & FL_SECRET_INPUT) ? _("Show") : _("Hide"));}
        tooltip {Show password in plain text} xywh {516 85 70 24}
      }
      Fl_Box {} {
        label {Use this tqsl station location}
        xywh {540 116 211 24} align 20
      }
      Fl_Button btn_verify_lotw {
        label Match
        callback cb_btn_verify_lotw
        tooltip {Verify database with LoTW download file} xywh {216 315 70 24}
      }
      Fl_Box {} {
        label {Match logbook records with LoTW download file}
        xywh {291 315 346 24} align 20
      }
      Fl_Button btn_view_unmatched {
        label {View Unmatched}
        callback cb_btn_view_unmatched
        tooltip {Verify database with LoTW download file} xywh {645 313 139 24} deactivate
      }
      Fl_Counter cnt_tracefile_timeout {
        label Timeout
        callback {progdefaults.tracefile_timeout = o->value();}
        tooltip {Wait NN seconds for LoTW response} xywh {647 146 79 21} type Simple align 4 minimum 4 maximum 60 step 1 value 5
        code0 {o->value(progdefaults.tracefile_timeout);}
      }
    }
    Fl_Group {} {
      label {Logging/QSO logging}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Logging/QSO logging"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Logging/QSO logging"));}
      code3 {tab_tree->close(_("Logging"));}
    } {
      Fl_Check_Button btnNagMe {
        label {Prompt to save log on exit}
        callback {btn2NagMe->value(o->value());
progdefaults.NagMe=o->value();
progdefaults.changed = true;}
        tooltip {Bug me about saving log entries} xywh {255 63 236 20} down_box DOWN_BOX
        code0 {o->value(progdefaults.NagMe);}
      }
      Fl_Check_Button btnClearOnSave {
        label {Clear on save}
        callback {progdefaults.ClearOnSave=o->value();
progdefaults.changed = true;}
        tooltip {Clear log entries after saving or using macro <LOG>} xywh {255 92 236 20} down_box DOWN_BOX
        code0 {o->value(progdefaults.ClearOnSave);}
      }
      Fl_Check_Button btnCallUpperCase {
        label {Convert callsign to upper case}
        callback {progdefaults.calluppercase = o->value();
progdefaults.changed = true;}
        tooltip {Force callsign field to UPPERCASE} xywh {255 121 236 20} down_box DOWN_BOX
        code0 {o->value(progdefaults.calluppercase);}
      }
      Fl_Check_Button btnAutoFillQSO {
        label {Auto-fill Country and Azimuth}
        callback {progdefaults.autofill_qso_fields = o->value();
progdefaults.changed = true;}
        tooltip {Fill in Country / Azimuth using cty.dat information} xywh {255 151 236 20} down_box DOWN_BOX
        code0 {o->value(progdefaults.autofill_qso_fields);}
      }
      Fl_Check_Button btnDateTimeSort {
        label {Sort by Date/Time OFF}
        callback {progdefaults.sort_date_time_off = o->value();
progdefaults.changed = true;
reload_browser();}
        tooltip {Sort by date/time OFF - effects all ADIF/Cabrillo reports} xywh {508 63 190 20} down_box DOWN_BOX
        code0 {o->value(progdefaults.sort_date_time_off);}
      }
      Fl_Check_Button btndate_time_force {
        label {Date time ON == OFF}
        callback {progdefaults.force_date_time = o->value();
progdefaults.changed = true;}
        tooltip {Force date/time ON == date/time OFF} xywh {508 92 190 20} down_box DOWN_BOX
        code0 {o->value(progdefaults.force_date_time);}
      }
      Fl_Check_Button btnRSTindefault {
        label {Default RST in to 599/59}
        callback {progdefaults.RSTin_default = o->value();
progdefaults.changed = true;}
        tooltip {Clear log controls sets RST in to 599/59} xywh {508 121 213 20} down_box DOWN_BOX
        code0 {o->value(progdefaults.RSTin_default);}
      }
      Fl_Check_Button btnRSTdefault {
        label {Default RST out to 599/59}
        callback {progdefaults.RSTdefault = o->value();
progdefaults.changed = true;}
        tooltip {Clear log controls sets RST out to 599/59} xywh {508 151 216 20} down_box DOWN_BOX
        code0 {o->value(progdefaults.RSTdefault);}
      }
      Fl_Input txt_cty_dat_pathname {
        label {cty.dat folder}
        callback {progdefaults.cty_dat_pathname = o->value();
progdefaults.changed = true;}
        tooltip {Enter full path-name for cty.dat folder} xywh {375 212 346 24} when 1
        code0 {o->value(progdefaults.cty_dat_pathname.c_str());}
        code1 {\#include "dxcc.h"}
        class Fl_Input2
      }
      Fl_Button btn_select_cty_dat {
        label Browse
        callback {select_cty_dat_pathname();}
        tooltip {Locate cty.dat file} xywh {256 241 75 24}
      }
      Fl_Button btn_default_cty_dat {
        label Default
        callback {default_cty_dat_pathname();}
        tooltip {Restore cty.dat default folder} xywh {351 241 75 24}
      }
      Fl_Button btn_reload_cty_dat {
        label Reload
        callback {reload_cty_dat();}
        tooltip {Reload cty.dat} xywh {446 241 75 24}
      }
      Fl_Input inpMyPower {
        label {Transmit Power}
        callback {progdefaults.mytxpower = o->value();
progdefaults.changed = true;}
        tooltip {Tx power used for logbook entries} xywh {671 241 50 24}
        code0 {o->value(progdefaults.mytxpower.c_str());}
        code1 {o->labelsize(FL_NORMAL_SIZE);}
        class Fl_Input2
      }
      Fl_Check_Button btnDisplayLogbookRead {
        label {Display logbook read datum at start}
        callback {progdefaults.DisplayLogbookRead = o->value();
progdefaults.changed = true;}
        tooltip {The filename is written to the RX text area} xywh {255 181 277 20} down_box DOWN_BOX
        code0 {o->value(progdefaults.DisplayLogbookRead);}
      }
    }
    Fl_Group {} {
      label {Modem/CW/General}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Modem/CW/General"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Modem/CW/General"));}
    } {
      Fl_Group {} {
        label Receive
        xywh {225 37 560 147} box ENGRAVED_FRAME align 21
      } {
        Fl_Check_Button btnCWuseSOMdecoding {
          label {SOM decoding}
          callback {progdefaults.CWuseSOMdecoding = o->value();
progdefaults.changed = true;}
          tooltip {Self Organizing Mapping} xywh {296 72 125 20} down_box DOWN_BOX value 1
          code0 {o->value(progdefaults.CWuseSOMdecoding);}
        }
        Fl_Check_Button btnCWrcvTrack {
          label Tracking
          callback {progdefaults.CWtrack = o->value();
progdefaults.changed = true;}
          tooltip {Automatic Rx speed tracking} xywh {450 72 80 20} down_box DOWN_BOX value 1
          code0 {o->value(progdefaults.CWtrack);}
        }
        Fl_Value_Slider sldrCWbandwidth {
          label {Filter bandwidth}
          callback {progdefaults.CWbandwidth = (int)o->value();
progdefaults.changed = true;}
          tooltip {CW dsp filter bandwidth} xywh {250 113 250 20} type Horizontal align 5 minimum 10 maximum 400 step 1 value 66 textsize 14
          code0 {o->value(progdefaults.CWbandwidth);}
          code1 {o->labelsize(FL_NORMAL_SIZE); o->textsize(FL_NORMAL_SIZE);}
          class Fl_Value_Slider2
        }
        Fl_Check_Button btnCWmfilt {
          label {Matched Filt'}
          callback {progdefaults.CWmfilt = o->value();
progdefaults.changed = true;}
          tooltip {Matched Filter bandwidth} xywh {503 113 80 20} down_box DOWN_BOX value 1
          code0 {o->value(progdefaults.CWmfilt);}
        }
        Fl_Value_Output valCWrcvWPM {
          label {Rx WPM}
          callback {progdefaults.changed = true;}
          xywh {250 152 35 20} color 7 align 5
        }
        Fl_Progress prgsCWrcvWPM {
          tooltip {Tracked CW speed in WPM} xywh {286 152 214 20} color 49 selection_color 15 align 0
        }
        Fl_Counter cntLower {
          label Lower
          callback {progdefaults.CWlower = o->value();
progdefaults.changed = true;}
          tooltip {Detector low threshold} xywh {409 72 65 20} type Simple align 1 minimum 0.01 maximum 0.99 step 0.01 value 0.45 hide
          code0 {o->value(progdefaults.CWlower);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Counter2
        }
        Fl_Counter cntUpper {
          label Upper
          callback {progdefaults.CWupper = o->value();
progdefaults.changed = true;}
          tooltip {Detector high threshold} xywh {502 72 65 20} type Simple align 1 minimum 0.01 maximum 0.99 step 0.01 value 0.55 hide
          code0 {o->value(progdefaults.CWupper);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Counter2
        }
        Fl_Counter cntCWrange {
          label Range
          callback {progdefaults.CWrange = (int)o->value();
progdefaults.changed = true;}
          tooltip {Range +/- wpm} xywh {503 151 65 20} type Simple align 8 minimum 5 maximum 25 step 1 value 10
          code0 {o->value(progdefaults.CWrange);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Counter2
        }
        Fl_Group {} {
          label Squelch open
          xywh {625 74 135 95} box ENGRAVED_BOX align 17
        } {
          Fl_Choice mnu_cwrx_attack {
            label Attack
            callback {progdefaults.cwrx_attack = o->value();
progdefaults.changed = true;} open
            xywh {680 104 72 20} down_box BORDER_BOX
            code0 {o->add("Slow|Med|Fast");}
            code1 {o->value(progdefaults.cwrx_attack);}
          } {}
          Fl_Choice mnu_cwrx_decay {
            label Decay
            callback {progdefaults.cwrx_decay = o->value();
progdefaults.changed = true;} open
            xywh {680 139 72 20} down_box BORDER_BOX
            code0 {o->add("Slow|Med|Fast");}
            code1 {o->value(progdefaults.cwrx_decay);}
          } {}
        }
      }
      Fl_Group {} {
        label Transmit open
        xywh {225 184 560 161} box ENGRAVED_FRAME align 21
      } {
        Fl_Value_Slider sldrCWxmtWPM {
          label {char WPM}
          callback {progdefaults.CWspeed = (int)o->value();
cntCW_WPM->value(progdefaults.CWspeed);
cntr_nanoCW_WPM->value(progdefaults.CWspeed);
progdefaults.changed = true;
sync_cw_parameters();}
          tooltip {My transmit CW WPM} xywh {250 213 440 20} type Horizontal align 8 minimum 5 maximum 100 step 1 value 20 textsize 14
          code0 {o->value(progdefaults.CWspeed);}
          code1 {o->labelsize(FL_NORMAL_SIZE); o->textsize(FL_NORMAL_SIZE);}
          class Fl_Value_Slider2
        }
        Fl_Counter cntCWdefWPM {
          label Default
          callback {progdefaults.defCWspeed = (int)o->value();
progdefaults.changed = true;}
          tooltip {The default CW speed} xywh {291 254 64 20} type Simple align 1 minimum 5 maximum 200 step 1 value 18
          code0 {o->value(progdefaults.defCWspeed);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Counter2
        }
        Fl_Counter cntCWlowerlimit {
          label {Lower limit}
          callback {progdefaults.CWlowerlimit = (int)o->value();
progdefaults.changed = true;
sldrCWxmtWPM->minimum(progdefaults.CWlowerlimit);
sldrCWxmtWPM->value(progdefaults.CWspeed);
sldrCWxmtWPM->redraw();
cntCWupperlimit->minimum(progdefaults.CWlowerlimit+20);
cntCW_WPM->minimum(progdefaults.CWlowerlimit);}
          tooltip {No slower than this} xywh {445 254 65 20} type Simple align 1 minimum 5 maximum 20 step 5 value 10
          code0 {o->value(progdefaults.CWlowerlimit);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
        }
        Fl_Counter cntCWupperlimit {
          label {Upper limit}
          callback {progdefaults.CWupperlimit = (int)o->value();
progdefaults.changed = true;
sldrCWxmtWPM->maximum(progdefaults.CWupperlimit);
sldrCWxmtWPM->value(progdefaults.CWspeed);
sldrCWxmtWPM->redraw();
cntCWlowerlimit->maximum(progdefaults.CWupperlimit-20);
cntCW_WPM->maximum(progdefaults.CWupperlimit);}
          tooltip {No faster than this} xywh {601 254 65 20} type Simple align 1 minimum 25 maximum 200 step 5 value 100
          code0 {o->value(progdefaults.CWupperlimit);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
        }
        Fl_Value_Slider sldrCWfarnsworth {
          label {text WPM}
          callback {progdefaults.CWfarnsworth = (int)o->value();
progdefaults.changed = true;}
          tooltip {My transmit CW WPM} xywh {250 308 440 20} type Horizontal align 8 minimum 5 maximum 100 step 1 value 20 textsize 14
          code0 {o->value(progdefaults.CWfarnsworth);}
          code1 {o->labelsize(FL_NORMAL_SIZE); o->textsize(FL_NORMAL_SIZE);}
          class Fl_Value_Slider2
        }
        Fl_Check_Button btnCWusefarnsworth {
          label {Use Farnsworth timing}
          callback {progdefaults.CWusefarnsworth=o->value();
progdefaults.changed = true;}
          tooltip {text WPM <= char WPM} xywh {270 285 180 15} down_box DOWN_BOX
          code0 {o->value(progdefaults.CWusefarnsworth);}
        }
      }
    }
    Fl_Group {} {
      label {Modem/CW/Timing and QSK}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Modem/CW/Timing and QSK"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Modem/CW/Timing and QSK"));}
    } {
      Fl_Group {} {
        label Timing open
        xywh {205 28 590 124} box ENGRAVED_FRAME align 21
      } {
        Fl_Counter cntCWdash2dot {
          label {Dash/Dot}
          callback {progdefaults.CWdash2dot=o->value();
cnt_nanoCWdash2dot->value(progdefaults.CWdash2dot);
progdefaults.changed = true;}
          tooltip {Dash to dot ratio} xywh {335 44 125 24} align 8 minimum 2.5 maximum 4 value 3
          code0 {o->value(progdefaults.CWdash2dot);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          code2 {o->lstep(1);}
          class Fl_Counter2
        }
        Fl_Counter cntCWrisetime {
          label {Edge timing}
          callback {progdefaults.CWrisetime=o->value();
progdefaults.changed = true;}
          tooltip {Leading and Trailing edge risetimes (msec)} xywh {335 75 125 24} align 8 minimum 0 maximum 15 value 4
          code0 {o->value(progdefaults.CWrisetime);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          code2 {o->lstep(1);}
          class Fl_Counter2
        }
        Fl_Group i_listboxQSKshape {
          label {Edge shape}
          callback {progdefaults.QSKshape = o->index();
progdefaults.changed = true;} open
          tooltip {Hanning/Blackman - use edge timing
BPF - use BPF bandwidth} xywh {335 108 125 24} box DOWN_BOX color 7 align 8
          code0 {o->add("Hanning|Blackman");}
          code1 {o->index(progdefaults.QSKshape);}
          code2 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_ListBox
        } {}
      }
      Fl_Group {} {
        label QSK open
        xywh {205 155 590 153} box ENGRAVED_FRAME align 21
      } {
        Fl_Check_Button btnQSK {
          label {QSK on right audio channel}
          callback {progdefaults.QSK = o->value();
btnQSK2->value(o->value());
progdefaults.changed = true;
if (o->value()) {
  progdefaults.sig_on_right_channel = false;
  chkAudioStereoOut->value(0);
  progdefaults.PTTrightchannel = false;
  btnPTTrightchannel->value(0);
}}
          tooltip {Generate square wave signal on right channel} xywh {267 172 217 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.QSK);}
        }
        Fl_Counter cntQSKfrequency {
          label {QSK frequency}
          callback {progdefaults.QSKfrequency=o->value();
progdefaults.changed = true;}
          tooltip {Fundamental frequency of QSK square wave signal} xywh {215 206 125 24} align 8 minimum 800 maximum 8000 step 5 value 3200
          code0 {o->value(progdefaults.QSKfrequency);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          code2 {o->lstep(100);}
          class Fl_Counter2
        }
        Fl_Counter cntPreTiming {
          label {Pre-keydown timing (ms)}
          callback {progdefaults.CWpre = o->value();
progdefaults.changed = true;}
          tooltip {Msec pre-keydown} xywh {476 206 125 24} align 8 minimum 0 maximum 100
          code0 {o->value(progdefaults.CWpre);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          code2 {o->lstep(1);}
          class Fl_Counter2
        }
        Fl_Counter cntPostTiming {
          label {Post-keydown timing (ms)}
          callback {progdefaults.CWpost = o->value();
progdefaults.changed = true;}
          tooltip {Msec post-keydown} xywh {476 237 125 24} align 8 minimum 0 maximum 100
          code0 {o->value(progdefaults.CWpost);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          code2 {o->lstep(1);}
          class Fl_Counter2
        }
        Fl_Counter cntQSKamp {
          label {QSK amplitude}
          callback {progdefaults.QSKamp=o->value();
progdefaults.changed = true;}
          tooltip {Amplitude of right channel QSK signal} xywh {215 237 125 24} align 8 minimum 0 maximum 1 step 0.01 value 0.8
          code0 {o->value(progdefaults.QSKamp);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          code2 {o->lstep(0.1);}
          class Fl_Counter2
        }
        Fl_Counter cntQSKrisetime {
          label {Edge timing}
          callback {progdefaults.QSKrisetime=o->value();
progdefaults.changed = true;}
          tooltip {Leading and Trailing edge risetimes (msec)} xywh {215 270 125 24} align 8 minimum 0 maximum 15 value 4
          code0 {o->value(progdefaults.QSKrisetime);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          code2 {o->lstep(1);}
          class Fl_Counter2
        }
      }
      Fl_Group {} {
        label {Send Test character} open
        xywh {205 310 590 40} box ENGRAVED_BOX align 21
      } {
        Fl_Group i_listbox_test_char {
          label {Test char}
          callback {progdefaults.TestChar = o->index();} open
          tooltip {Test character for QSK adjustment} xywh {391 319 112 22} box DOWN_BOX color 7 align 8
          code0 {extern char szTestChar[];}
          code1 {o->add(szTestChar);}
          code2 {o->index(progdefaults.TestChar);}
          code3 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_ListBox
        } {}
        Fl_Check_Button btnQSKadjust {
          label {Send continuously}
          callback {progdefaults.QSKadjust = o->value();}
          tooltip {Send a continuous stream of test characters} xywh {585 321 152 18} down_box DOWN_BOX
          code0 {o->value(progdefaults.QSKadjust);}
        }
      }
    }
    Fl_Group {} {
      label {Modem/CW/Prosigns}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Modem/CW/Prosigns"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Modem/CW/Prosigns"));}
    } {
      Fl_Group {} {
        label {Use these for WinKeyer
and nanoCW}
        xywh {555 39 182 262} box ENGRAVED_FRAME align 17
      } {
        Fl_Box {} {
          label {" RR}
          tooltip {.-..-.} xywh {615 70 59 22}
        }
        Fl_Box {} {
          label {$ SX}
          tooltip {...-..-} xywh {615 90 59 22}
        }
        Fl_Box {} {
          label {' WG}
          tooltip {.----.} xywh {615 109 59 22}
        }
        Fl_Box {} {
          label {( KN}
          tooltip {-.--.} xywh {615 128 59 22}
        }
        Fl_Box {} {
          label {) KK}
          tooltip {-.--.-} xywh {615 147 59 22}
        }
        Fl_Box {} {
          label {+ AR}
          tooltip {.-.-.} xywh {615 166 59 22}
        }
        Fl_Box {} {
          label {< AR}
          tooltip {.-.-.} xywh {615 185 59 22}
        }
        Fl_Box {} {
          label {> SK}
          tooltip {...-.-} xywh {615 204 59 22}
        }
        Fl_Box {} {
          label {= BT}
          tooltip {-...-} xywh {615 223 59 22}
        }
        Fl_Box {} {
          label {- DU}
          tooltip {-....-} xywh {615 242 59 22}
        }
        Fl_Box {} {
          label {@@ AC}
          tooltip {.--.-.} xywh {615 263 59 22}
        }
      }
      Fl_Group {listbox_prosign[0]} {
        label {<BT>}
        callback {int c = o->index();
for (int i = 0; i < 9; i++)
  if (listbox_prosign[i]->index() == c) {
    listbox_prosign[i]->index(12);
    progdefaults.CW_prosigns[i] = ' ';
  }
o->index(c);
char ps[] = "~%&+={}<>[] ";
progdefaults.CW_prosigns[0] = ps[c];
progdefaults.changed = true;} open
        xywh {304 50 47 22} box DOWN_BOX color 7 align 4
        code0 {o->add(szProsigns);}
        code1 {char s[2] = " "; s[0] = progdefaults.CW_prosigns[0];}
        code2 {o->value(s);
                       o->labelsize(FL_NORMAL_SIZE);}
        class Fl_ListBox
      } {}
      Fl_Group {listbox_prosign[1]} {
        label {<AA>}
        callback {int c = o->index();
for (int i = 0; i < 9; i++)
  if (listbox_prosign[i]->index() == c) {
    listbox_prosign[i]->index(12);
    progdefaults.CW_prosigns[i] = ' ';
  }
o->index(c);
char ps[] = "~%&+={}<>[] ";
progdefaults.CW_prosigns[1] = ps[c];
progdefaults.changed = true;} open
        xywh {304 77 47 22} box DOWN_BOX color 7 align 4
        code0 {o->add(szProsigns);}
        code1 {char s[2] = " "; s[0] = progdefaults.CW_prosigns[1];}
        code2 {o->value(s);
                       o->labelsize(FL_NORMAL_SIZE);}
        class Fl_ListBox
      } {}
      Fl_Group {listbox_prosign[2]} {
        label {<AS>}
        callback {int c = o->index();
for (int i = 0; i < 9; i++)
  if (listbox_prosign[i]->index() == c) {
    listbox_prosign[i]->index(12);
    progdefaults.CW_prosigns[i] = ' ';
  }
o->index(c);
char ps[] = "~%&+={}<>[] ";
progdefaults.CW_prosigns[2] = ps[c];
progdefaults.changed = true;} open
        xywh {304 105 47 22} box DOWN_BOX color 7 align 4
        code0 {o->add(szProsigns);}
        code1 {char s[2] = " "; s[0] = progdefaults.CW_prosigns[2];}
        code2 {o->value(s);
                       o->labelsize(FL_NORMAL_SIZE);}
        class Fl_ListBox
      } {}
      Fl_Group {listbox_prosign[3]} {
        label {<AR>}
        callback {int c = o->index();
for (int i = 0; i < 9; i++)
  if (listbox_prosign[i]->index() == c) {
    listbox_prosign[i]->index(12);
    progdefaults.CW_prosigns[i] = ' ';
  }
o->index(c);
char ps[] = "~%&+={}<>[] ";
progdefaults.CW_prosigns[3] = ps[c];
progdefaults.changed = true;} open
        xywh {304 132 47 22} box DOWN_BOX color 7 align 4
        code0 {o->add(szProsigns);}
        code1 {char s[2] = " "; s[0] = progdefaults.CW_prosigns[3];}
        code2 {o->value(s);}
        class Fl_ListBox
      } {}
      Fl_Group {listbox_prosign[4]} {
        label {<SK>}
        callback {int c = o->index();
for (int i = 0; i < 9; i++)
  if (listbox_prosign[i]->index() == c) {
    listbox_prosign[i]->index(12);
    progdefaults.CW_prosigns[i] = ' ';
  }
o->index(c);
char ps[] = "~%&+={}<>[] ";
progdefaults.CW_prosigns[4] = ps[c];
progdefaults.changed = true;} open
        xywh {304 160 47 22} box DOWN_BOX color 7 align 4
        code0 {o->add(szProsigns);}
        code1 {char s[2] = " "; s[0] = progdefaults.CW_prosigns[4];}
        code2 {o->value(s);
                       o->labelsize(FL_NORMAL_SIZE);}
        class Fl_ListBox
      } {}
      Fl_Group {listbox_prosign[5]} {
        label {<KN>}
        callback {int c = o->index();
for (int i = 0; i < 9; i++)
  if (listbox_prosign[i]->index() == c) {
    listbox_prosign[i]->index(12);
    progdefaults.CW_prosigns[i] = ' ';
  }
o->index(c);
char ps[] = "~%&+={}<>[] ";
progdefaults.CW_prosigns[5] = ps[c];
progdefaults.changed = true;} open
        xywh {304 188 47 22} box DOWN_BOX color 7 align 4
        code0 {o->add(szProsigns);}
        code1 {char s[2] = " "; s[0] = progdefaults.CW_prosigns[5];}
        code2 {o->value(s);
                       o->labelsize(FL_NORMAL_SIZE);}
        class Fl_ListBox
      } {}
      Fl_Group {listbox_prosign[6]} {
        label {<INT>}
        callback {int c = o->index();
for (int i = 0; i < 9; i++)
  if (listbox_prosign[i]->index() == c) {
    listbox_prosign[i]->index(12);
    progdefaults.CW_prosigns[i] = ' ';
  }
o->index(c);
char ps[] = "~%&+={}<>[] ";
progdefaults.CW_prosigns[6] = ps[c];
progdefaults.changed = true;} open
        xywh {304 215 47 22} box DOWN_BOX color 7 align 4
        code0 {o->add(szProsigns);}
        code1 {char s[2] = " "; s[0] = progdefaults.CW_prosigns[6];}
        code2 {o->value(s);
                       o->labelsize(FL_NORMAL_SIZE);}
        class Fl_ListBox
      } {}
      Fl_Group {listbox_prosign[7]} {
        label {<HM>}
        callback {int c = o->index();
for (int i = 0; i < 9; i++)
  if (listbox_prosign[i]->index() == c) {
    listbox_prosign[i]->index(12);
    progdefaults.CW_prosigns[i] = ' ';
  }
o->index(c);
char ps[] = "~%&+={}<>[] ";
progdefaults.CW_prosigns[7] = ps[c];
progdefaults.changed = true;;} open
        xywh {304 243 47 22} box DOWN_BOX color 7 align 4
        code0 {o->add(szProsigns);}
        code1 {char s[2] = " "; s[0] = progdefaults.CW_prosigns[7];}
        code2 {o->value(s);
                       o->labelsize(FL_NORMAL_SIZE);}
        class Fl_ListBox
      } {}
      Fl_Group {listbox_prosign[8]} {
        label {<VE>}
        callback {int c = o->index();
for (int i = 0; i < 9; i++)
  if (listbox_prosign[i]->index() == c) {
    listbox_prosign[i]->index(12);
    progdefaults.CW_prosigns[i] = ' ';
  }
o->index(c);
char ps[] = "~%&+={}<>[] ";
progdefaults.CW_prosigns[8] = ps[c];
progdefaults.changed = true;} open
        xywh {304 271 47 22} box DOWN_BOX color 7 align 4
        code0 {o->add(szProsigns);}
        code1 {char s[2] = " "; s[0] = progdefaults.CW_prosigns[8];}
        code2 {o->value(s);
                       o->labelsize(FL_NORMAL_SIZE);}
        class Fl_ListBox
      } {}
      Fl_Check_Button btnCW_use_paren {
        label {Use '(' paren not KN}
        callback {progdefaults.CW_use_paren=o->value();
progdefaults.changed = true;}
        xywh {354 187 68 15} down_box DOWN_BOX
        code0 {o->value(progdefaults.CW_use_paren);}
      }
      Fl_Check_Button btnCW_prosign_display {
        label {Display decoded as assigned key}
        callback {progdefaults.CW_prosign_display=o->value();
progdefaults.changed = true;}
        tooltip {Display the decoded prosign in the RX text using the short cut key} xywh {304 301 68 15} down_box DOWN_BOX
        code0 {o->value(progdefaults.CW_prosign_display);}
      }
    }
    Fl_Group {} {
      label {Modem/CW/Extended Chars.}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Modem/CW/Extended Chars."));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Modem/CW/Extended Chars."));}
    } {
      Fl_Group {} {
        label {Check to enable character encode/decode
Select one character from each group} open
        xywh {205 30 590 286} box FLAT_BOX align 17
      } {
        Fl_Group {} {open
          xywh {210 109 99 80} box ENGRAVED_FRAME
        } {
          Fl_Check_Button btn_A_aelig {
            label {A aelig}
            callback {progdefaults.A_aelig = o->value();
if (progdefaults.A_aelig) {
	progdefaults.A_umlaut = false;
	btn_A_umlaut->value(0);
}
btn_A_umlaut->redraw();
progdefaults.changed = true;
CW_table_changed = true;}
            tooltip {Swap left/right keyer contacts} xywh {216 125 70 15} down_box DOWN_BOX
            code0 {\#include "cw.h"}
            code1 {o->value(progdefaults.A_aelig);}
          }
          Fl_Check_Button btn_A_umlaut {
            label { A umlaut}
            callback {progdefaults.A_umlaut = o->value();
if (progdefaults.A_umlaut) {
	progdefaults.A_aelig = false;
	btn_A_aelig->value(0);
}
btn_A_aelig->redraw();
progdefaults.changed = true;
CW_table_changed = true;}
            tooltip {Swap left/right keyer contacts} xywh {216 162 70 15} down_box DOWN_BOX
            code0 {o->value(progdefaults.A_umlaut);}
          }
        }
        Fl_Check_Button btn_A_ring {
          label { A ring}
          callback {progdefaults.A_ring = o->value();
progdefaults.changed = true;
CW_table_changed = true;}
          tooltip {Swap left/right keyer contacts} xywh {216 199 70 15} down_box DOWN_BOX
          code0 {o->value(progdefaults.A_ring);}
        }
        Fl_Group {} {open
          xywh {311 109 99 120} box ENGRAVED_FRAME
        } {
          Fl_Check_Button btn_O_acute {
            label { O acute}
            callback {progdefaults.O_acute = o->value();
if (progdefaults.O_acute) {
	progdefaults.O_umlaut = false;
	btn_O_umlaut->value(0);
	progdefaults.O_slash = false;
	btn_O_slash->value(0);
}
btn_O_umlaut->redraw();
btn_O_slash->redraw();
progdefaults.changed = true;
CW_table_changed = true;}
            tooltip {Swap left/right keyer contacts} xywh {316 125 70 15} down_box DOWN_BOX
            code0 {o->value(progdefaults.O_acute);}
          }
          Fl_Check_Button btn_O_slash {
            label { O slash}
            callback {progdefaults.O_slash = o->value();
if (progdefaults.O_slash) {
	progdefaults.O_umlaut = false;
	btn_O_umlaut->value(0);
	progdefaults.O_acute = false;
	btn_O_acute->value(0);
}
btn_O_umlaut->redraw();
btn_O_acute->redraw();
progdefaults.changed = true;
CW_table_changed = true;}
            tooltip {Swap left/right keyer contacts} xywh {316 199 70 15} down_box DOWN_BOX
            code0 {o->value(progdefaults.O_slash);}
          }
          Fl_Check_Button btn_O_umlaut {
            label { O umlaut}
            callback {progdefaults.O_umlaut = o->value();
if (progdefaults.O_umlaut) {
	progdefaults.O_acute = false;
	btn_O_acute->value(0);
	progdefaults.O_slash = false;
	btn_O_slash->value(0);
}
btn_O_acute->redraw();
btn_O_slash->redraw();
progdefaults.changed = true;
CW_table_changed = true;}
            tooltip {Swap left/right keyer contacts} xywh {316 162 70 15} down_box DOWN_BOX
            code0 {o->value(progdefaults.O_umlaut);}
          }
        }
        Fl_Check_Button btn_C_cedilla {
          label { C cedilla}
          callback {progdefaults.C_cedilla = o->value();
progdefaults.changed = true;
CW_table_changed = true;}
          tooltip {Swap left/right keyer contacts} xywh {413 125 70 15} down_box DOWN_BOX
          code0 {o->value(progdefaults.C_cedilla);}
        }
        Fl_Check_Button btn_E_grave {
          label { E grave}
          callback {progdefaults.E_grave = o->value();
progdefaults.changed = true;
CW_table_changed = true;}
          tooltip {Swap left/right keyer contacts} xywh {511 125 70 15} down_box DOWN_BOX
          code0 {o->value(progdefaults.E_grave);}
        }
        Fl_Check_Button btn_E_acute {
          label { E acute}
          callback {progdefaults.E_acute = o->value();
progdefaults.changed = true;
CW_table_changed = true;}
          tooltip {Swap left/right keyer contacts} xywh {511 162 70 15} down_box DOWN_BOX
          code0 {o->value(progdefaults.E_acute);}
        }
        Fl_Check_Button btn_N_tilde {
          label { N tilde}
          callback {progdefaults.N_tilde = o->value();
progdefaults.changed = true;
CW_table_changed = true;}
          tooltip {Swap left/right keyer contacts} xywh {604 125 70 15} down_box DOWN_BOX
          code0 {o->value(progdefaults.N_tilde);}
        }
        Fl_Group {} {open
          xywh {690 109 99 80} box ENGRAVED_FRAME
        } {
          Fl_Check_Button btn_U_umlaut {
            label { U umlaut}
            callback {progdefaults.U_umlaut = o->value();
if (progdefaults.U_umlaut) {
	progdefaults.U_circ = false;
	btn_U_circ->value(0);
}
btn_U_circ->redraw();
progdefaults.changed = true;
CW_table_changed = true;}
            tooltip {Swap left/right keyer contacts} xywh {695 125 70 15} down_box DOWN_BOX
            code0 {o->value(progdefaults.U_umlaut);}
          }
          Fl_Check_Button btn_U_circ {
            label { U circ}
            callback {progdefaults.U_circ = o->value();
if (progdefaults.U_circ) {
	progdefaults.U_umlaut = false;
	btn_U_umlaut->value(0);
}
btn_U_umlaut->redraw();
progdefaults.changed = true;
CW_table_changed = true;}
            tooltip {Swap left/right keyer contacts} xywh {695 162 70 15} down_box DOWN_BOX
            code0 {o->value(progdefaults.U_circ);}
          }
        }
        Fl_Group {} {
          label {See https://en.wikipedia.org/wiki/Morse_code
for information regarding extended Morse characters.} open
          xywh {310 249 403 45} align 17
        } {}
      }
    }
    Fl_Group {} {
      label {Punctuation/Noise Processing}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Modem/CW/Punctuation-Noise"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Modem/CW/Punctuation-Noise"));}
    } {
      Fl_Group {} {
        label {Check to enable character encode/decode} open
        xywh {205 30 590 185} box ENGRAVED_BOX align 17
      } {
        Fl_Check_Button btn_CW_backslash {
          label { backslash \\     ".-..-."}
          callback {progdefaults.CW_backslash = o->value();
progdefaults.changed = true;
CW_table_changed = true;}
          tooltip {disable for no printed character} xywh {265 65 70 15} down_box DOWN_BOX value 1 labelfont 4
          code0 {o->value(progdefaults.CW_backslash);}
        }
        Fl_Check_Button btn_CW_single_quote {
          label { single quote '  ".----."}
          callback {progdefaults.CW_single_quote = o->value();
progdefaults.changed = true;
CW_table_changed = true;}
          tooltip {disable for no printed character} xywh {265 92 70 15} down_box DOWN_BOX value 1 labelfont 4
          code0 {o->value(progdefaults.CW_single_quote);}
        }
        Fl_Check_Button btn_CW_dollar_sign {
          label { dollar sign $   "...-..-"}
          callback {progdefaults.CW_dollar_sign = o->value();
progdefaults.changed = true;
CW_table_changed = true;}
          tooltip {disable for no printed character} xywh {265 120 70 15} down_box DOWN_BOX value 1 labelfont 4
          code0 {o->value(progdefaults.CW_dollar_sign);}
        }
        Fl_Check_Button btn_CW_open_paren {
          label { open_paren (    "-.--."}
          callback {progdefaults.CW_open_paren = o->value();
progdefaults.changed = true;
CW_table_changed = true;}
          tooltip {disable for no printed character} xywh {265 147 70 15} down_box DOWN_BOX value 1 labelfont 4
          code0 {o->value(progdefaults.CW_open_paren);}
        }
        Fl_Check_Button btn_CW_close_paren {
          label { close paren )   "-.--.-"}
          callback {progdefaults.CW_close_paren = o->value();
progdefaults.changed = true;
CW_table_changed = true;}
          tooltip {disable for no printed character} xywh {265 175 70 15} down_box DOWN_BOX value 1 labelfont 4
          code0 {o->value(progdefaults.CW_close_paren);}
        }
        Fl_Check_Button btn_CW_colon {
          label { colon :        "---..."}
          callback {progdefaults.CW_colon = o->value();
progdefaults.changed = true;
CW_table_changed = true;}
          tooltip {disable for no printed character} xywh {535 65 70 15} down_box DOWN_BOX value 1 labelfont 4
          code0 {o->value(progdefaults.CW_colon);}
        }
        Fl_Check_Button btn_CW_semi_colon {
          label { semi colon ;   "-.-.-."}
          callback {progdefaults.CW_semi_colon = o->value();
progdefaults.changed = true;
CW_table_changed = true;}
          tooltip {disable for no printed character} xywh {535 92 70 15} down_box DOWN_BOX value 1 labelfont 4
          code0 {o->value(progdefaults.CW_semi_colon);}
        }
        Fl_Check_Button btn_CW_underscore {
          label { underscore _   "..--.-"}
          callback {progdefaults.CW_underscore = o->value();
progdefaults.changed = true;
CW_table_changed = true;}
          tooltip {disable for no printed character} xywh {535 120 70 15} down_box DOWN_BOX value 1 labelfont 4
          code0 {o->value(progdefaults.CW_underscore);}
        }
        Fl_Check_Button btn_CW_at_symbol {
          label { at symbol @@    ".--.-."}
          callback {progdefaults.CW_at_symbol = o->value();
progdefaults.changed = true;
CW_table_changed = true;}
          tooltip {disable for no printed character} xywh {535 147 70 15} down_box DOWN_BOX value 1 labelfont 4
          code0 {o->value(progdefaults.CW_at_symbol);}
        }
        Fl_Check_Button btn_CW_exclamation {
          label { exclamation !  "-.-.--"}
          callback {progdefaults.CW_exclamation = o->value();
progdefaults.changed = true;
CW_table_changed = true;}
          tooltip {disable for no printed character} xywh {535 175 70 15} down_box DOWN_BOX value 1 labelfont 4
          code0 {o->value(progdefaults.CW_exclamation);}
        }
      }
      Fl_Group {} {
        label {Unknown character decode (noise)} open
        xywh {205 203 590 142} box ENGRAVED_BOX align 17
      } {
        Fl_Check_Button btn_CW_noise0 {
          label { Do not display unknown MORSE symbol}
          callback {progdefaults.CW_noise = 0;
if (o->value()) {
  btn_CW_noise1->value(0);
  btn_CW_noise2->value(0);
  btn_CW_noise3->value(0);
  }
else
  progdefaults.CW_noise = 0;
progdefaults.changed = true;}
          tooltip {disable '*'or no printed character} xywh {265 226 193 24} down_box DOWN_BOX labelfont 4
          code0 {o->value(progdefaults.CW_noise == 0);}
        }
        Fl_Check_Button btn_CW_noise1 {
          label { Display '*' character for unknown MORSE symbol}
          callback {progdefaults.CW_noise = '*';
if (o->value()) {
  btn_CW_noise0->value(0);
  btn_CW_noise2->value(0);
  btn_CW_noise3->value(0);
  }
else
  progdefaults.CW_noise = 0;
progdefaults.changed = true;}
          tooltip {disable '*'or no printed character} xywh {265 254 193 24} down_box DOWN_BOX labelfont 4
          code0 {o->value(progdefaults.CW_noise == '*');}
        }
        Fl_Check_Button btn_CW_noise2 {
          label { Display '_' character for unknown MORSE symbol}
          callback {progdefaults.CW_noise = o->value();
if (o->value()) {
  btn_CW_noise0->value(0);
  btn_CW_noise1->value(0);
  btn_CW_noise3->value(0);
  }
else
  progdefaults.CW_noise = 0;
progdefaults.changed = true;}
          tooltip {disable '_' for no printed character} xywh {265 283 193 24} down_box DOWN_BOX labelfont 4
          code0 {o->value(progdefaults.CW_noise == '_');}
        }
        Fl_Check_Button btn_CW_noise3 {
          label { Display ' ' character for unknown MORSE symbol}
          callback {progdefaults.CW_noise = ' ';
if (o->value()) {
  btn_CW_noise0->value(0);
  btn_CW_noise1->value(0);
  btn_CW_noise2->value(0);
  }
else
  progdefaults.CW_noise = 0;
progdefaults.changed = true;}
          tooltip {disable ' ' for no printed character} xywh {265 312 193 24} down_box DOWN_BOX labelfont 4
          code0 {o->value(progdefaults.CW_noise == ' ');}
        }
      }
    }
    Fl_Group {} {
      label {Modem/CW/WinKeyer}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Modem/CW/WinKeyer"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Modem/CW/WinKeyer"));}
    } {
      Fl_Group select_WK_CommPort {
        label {Ser. Port}
        callback {progStatus.WK_serial_port_name = o->value();
select_WKFSK_CommPort->value(progStatus.WK_serial_port_name.c_str());} open
        tooltip {Xcvr serial port} xywh {274 30 405 25} box DOWN_BOX color 55 align 4
        code0 {\#include "combo.h"}
        code1 {\#include "winkeyer.h"}
        code2 {o->value(progStatus.WK_serial_port_name.c_str());}
        class Fl_ComboBox
      } {}
      Fl_Light_Button btn_WKCW_connect {
        label Connect
        callback {WKCW_connect(o->value());}
        tooltip {Connect / Disconnect from WinKeyer} xywh {705 30 80 25}
        code0 {o->value(progStatus.WK_online);}
      }
      Fl_Box box_WK_wait {
        label Wait
        xywh {269 66 16 16} box DIAMOND_DOWN_BOX align 8
      }
      Fl_Box box_WK_break_in {
        label Bk
        xywh {344 66 16 16} box DIAMOND_DOWN_BOX align 8
      }
      Fl_Box box_WK_busy {
        label Busy
        xywh {419 66 16 16} box DIAMOND_DOWN_BOX align 8
      }
      Fl_Box box_WK_xoff {
        label Bfr
        xywh {494 66 16 16} box DIAMOND_DOWN_BOX align 8
      }
      Fl_Box box_WK_keydown {
        label Key
        xywh {570 66 16 16} box DIAMOND_DOWN_BOX align 8
      }
      Fl_Group choice_WK_keyer_mode {
        label {Keyer Mode}
        callback {WK_change_choice_keyer_mode();} open
        xywh {237 104 90 22} box BORDER_BOX color 55
        code0 {\#include "combo.h"}
        class Fl_ComboBox
      } {}
      Fl_Group choice_WK_hang {
        label Hang
        callback {WK_change_choice_hang();} open
        xywh {383 104 90 22} box BORDER_BOX color 55
        class Fl_ComboBox
      } {}
      Fl_Group choice_WK_sidetone {
        label Sidetone
        callback {WK_change_choice_sidetone();} open
        xywh {530 104 90 22} box BORDER_BOX color 55
        class Fl_ComboBox
      } {}
      Fl_Group choice_WK_output_pins {
        label {Output PIns}
        callback {WK_change_choice_output_pins();} open
        xywh {677 104 90 22} box BORDER_BOX color 55
        class Fl_ComboBox
      } {}
      Fl_Check_Button btn_WK_use_pot {
        label {Use Pot}
        callback {WK_use_pot_changed();}
        tooltip {Winkeyer pot controls WPM} xywh {623 64 20 16} down_box DOWN_BOX align 8 when 1
      }
      Fl_Output txt_WK_wpm {
        tooltip {WPM setting} xywh {710 61 50 24}
      }
      Fl_Group {} {
        label ModeReg open
        xywh {210 132 134 184} box ENGRAVED_FRAME align 17
      } {
        Fl_Check_Button btn_WK_swap {
          label Swap
          callback {WK_change_btn_swap();}
          tooltip {Swap left/right keyer contacts} xywh {220 174 70 15} down_box DOWN_BOX
        }
        Fl_Check_Button btn_WK_auto_space {
          label {Auto Space}
          callback {WK_change_btn_auto_space();}
          tooltip {Enable paddle auto spacing of characters} xywh {220 204 70 15} down_box DOWN_BOX
        }
        Fl_Check_Button btn_WK_ct_space {
          label {CT space}
          callback {WK_change_btn_ct_space();}
          tooltip {Enable contest character spacing} xywh {220 234 70 15} down_box DOWN_BOX
        }
        Fl_Check_Button btn_WK_paddledog {
          label {Paddle Dog}
          callback {WK_change_btn_paddledog();}
          xywh {220 264 70 15} down_box DOWN_BOX
        }
        Fl_Check_Button btn_WK_cut_zeronine {
          label {Cut 0/9}
          callback {WK_change_btn_cut_zeronine();}
          tooltip {Use T/N for 0/9} xywh {220 294 70 15} down_box DOWN_BOX
        }
      }
      Fl_Group {} {
        label ModeReg open
        xywh {367 132 134 184} box ENGRAVED_FRAME align 17
      } {
        Fl_Check_Button btn_WK_paddle_echo {
          label {Paddle echo}
          callback {WK_change_btn_paddle_echo();}
          tooltip {Echo paddle chars to Rx Panel} xywh {373 174 70 16} down_box DOWN_BOX
        }
        Fl_Check_Button btn_WK_serial_echo {
          label {Serial echo}
          callback {WK_change_btn_serial_echo();}
          xywh {373 204 70 16} down_box DOWN_BOX value 1
        }
        Fl_Check_Button btn_WK_sidetone_on {
          label {Tone Keyer}
          callback {WK_change_btn_sidetone_on();}
          tooltip {Enable Winkeyer tone keying} xywh {373 234 103 16} down_box DOWN_BOX
        }
        Fl_Check_Button btn_WK_tone_on {
          label {Tone ON}
          callback {WK_change_btn_tone_on();}
          tooltip {Enable Winkeyer audio tone} xywh {373 264 87 16} down_box DOWN_BOX
        }
        Fl_Check_Button btn_WK_ptt_on {
          label {PTT ON}
          callback {WK_change_btn_ptt_on();}
          tooltip {Enable Winkeyer PTT output} xywh {373 294 87 16} down_box DOWN_BOX
        }
      }
      Fl_Group {} {
        label {WPM Settings} open
        xywh {510 132 112 209} box ENGRAVED_FRAME align 17
      } {
        Fl_Counter cntr_WK_min_wpm {
          label {Min WPM}
          callback {WK_change_cntr_min_wpm();
if ((o->value() + cntr_WK_rng_wpm->value()) > 55)
  cntr_WK_rng_wpm->value(55 - o->value());}
          tooltip {Minimum WPM setting
default = 10} xywh {531 172 64 22} type Simple minimum 10 maximum 30 step 1 value 10
        }
        Fl_Counter cntr_WK_rng_wpm {
          label {Rng WPM}
          callback {WK_change_cntr_rng_wpm();
if ((cntr_WK_min_wpm->value() + o->value()) > 55)
o->value(55 - cntr_WK_min_wpm->value());}
          tooltip {Range WPM setting
default = 25} xywh {531 215 64 21} type Simple
        }
        Fl_Counter cntr_WK_farnsworth {
          label Farsnworth
          callback {WK_change_cntr_farnsworth();}
          tooltip {Farnsworth keying (0 = none)
default = 0} xywh {531 257 64 22} type Simple
        }
        Fl_Counter cntr_WK_cmd_wpm {
          label {Cmd WPM}
          callback {WK_change_cntr_cmd_wpm();}
          tooltip {WPM speed for Winkeyer Command strings
default = 18} xywh {531 300 64 22} type Simple
        }
      }
      Fl_Group {} {
        label {Timing/Settings} open
        xywh {630 132 160 209} box ENGRAVED_FRAME align 17
      } {
        Fl_Counter cntr_WK_ratio {
          label Ratio
          callback {WK_change_cntr_ratio();}
          tooltip {Keying ratio
default = 3.0} xywh {642 172 64 22} type Simple
        }
        Fl_Counter cntr_WK_comp {
          label Comp
          callback {WK_change_cntr_comp();}
          tooltip {Compensation in msec
default = 0} xywh {642 215 64 21} type Simple
        }
        Fl_Counter cntr_WK_first_ext {
          label {1st Ext}
          callback {WK_change_cntr_first_ext();}
          tooltip {Extra duration to first dit/dot in msec
default = 0} xywh {642 257 64 22} type Simple
        }
        Fl_Counter cntr_WK_sample {
          label Sample
          callback {WK_change_cntr_sample();}
          tooltip {Paddle sampling (see Winkeyer manual)
default = 50} xywh {642 300 64 22} type Simple
        }
        Fl_Counter cntr_WK_weight {
          label Weight
          callback {WK_change_cntr_weight();}
          tooltip {Keying weight
default = 50} xywh {713 172 64 22} type Simple
        }
        Fl_Counter cntr_WK_leadin {
          label Leadin
          callback {WK_change_cntr_leadin();}
          tooltip {Leadin in msec
default = 0} xywh {713 215 64 21} type Simple
        }
        Fl_Counter cntr_WK_tail {
          label Tail
          callback {WK_change_cntr_tail();}
          tooltip {Extend last dit/dot in msec
default = 0} xywh {713 257 64 22} type Simple
        }
      }
      Fl_Group {} {open
        xywh {210 317 291 25} box ENGRAVED_FRAME
      } {
        Fl_Check_Button btnK3NG {
          label {K3NG Arduino sketch emulation}
          callback {progdefaults.WK_K3NGsketch = o->value();
progdefaults.changed = true;}
          tooltip {Activate for Mortty K3NG sketch} xywh {220 324 223 15} down_box DOWN_BOX
          code0 {o->value(progdefaults.WK_K3NGsketch);}
        }
      }
    }
    Fl_Group {} {
      label {Modem/CW/nanoIO}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Modem/CW/nanoIO"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Modem/CW/nanoIO"));}
    } {
      Fl_Group select_nanoCW_CommPort {
        label {Ser. Port}
        callback {progdefaults.nanoIO_serial_port_name = o->value();} open
        tooltip {nanoIO serial port} xywh {270 21 435 23} box DOWN_BOX color 55 align 4
        code0 {\#include "combo.h"}
        code1 {\#include "nanoIO.h"}
        code2 {o->value(progdefaults.nanoIO_serial_port_name.c_str());}
        class Fl_ComboBox
      } {}
      Fl_Light_Button btn_nanoCW_connect {
        label Connect
        callback {if (o->value()) {
  if (open_nanoCW()) {
    btn_nanoIO_connect->value(1);
    chk_nanoIO_CW_io->value(1);
  } else {
    o->value(0);
    btn_nanoIO_connect->value(0);
    chk_nanoIO_CW_io->value(0);
    chk_nanoIO_FSK_io->value(0);
  }
} else {
  close_nanoIO();
  o->value(0);
  btn_nanoIO_connect->value(0);
  chk_nanoIO_FSK_io->value(0);
  chk_nanoIO_CW_io->value(0);
}}
        tooltip {Connect / Disconnect from nanoIO} xywh {711 21 80 22}
      }
      Fl_Counter cntr_nanoCW_paddle_WPM {
        label Paddle
        callback {progdefaults.CW_keyspeed = (int)o->value();
set_nano_keyerWPM(progdefaults.CW_keyspeed);
progdefaults.changed = true;}
        tooltip {CW wpm using paddle keyer} xywh {260 48 110 22} align 4 minimum 5 maximum 100 step 1 value 20
        code0 {o->value(progdefaults.CW_keyspeed);}
        code1 {o->lstep(5);}
      }
      Fl_Text_Display txt_nano_CW_io {
        xywh {204 155 590 189} align 25
        code0 {\#include "FTextRXTX.h"}
        code1 {o->setFont(progdefaults.RxFontnbr);}
        code2 {o->setFontSize(12);}
        class FTextView
      }
      Fl_Counter cntr_nanoCW_WPM {
        label {Comp'}
        callback {progdefaults.CWspeed = (int)o->value();
cntCW_WPM->value(progdefaults.CWspeed);
sldrCWxmtWPM->value(progdefaults.CWspeed);
progdefaults.changed = true;
sync_cw_parameters();}
        tooltip {CW wpm keyboard strings} xywh {260 74 110 22} align 4 minimum 5 maximum 100 step 1 value 20
        code0 {o->value(progdefaults.CWspeed);}
        code1 {o->lstep(5);}
      }
      Fl_Counter cnt_nanoCWdash2dot {
        label {Dash/Dot}
        callback {progdefaults.CWdash2dot=o->value();
cntCWdash2dot->value(progdefaults.CWdash2dot);
progdefaults.changed = true;}
        tooltip {Dash to dot ratio} xywh {292 100 78 22} type Simple align 4 minimum 2.5 maximum 3.5 value 3
        code0 {o->value(progdefaults.CWdash2dot);}
        code1 {o->labelsize(FL_NORMAL_SIZE);}
        class Fl_Counter2
      }
      Fl_Group listbox_nanoIO_serbaud {
        label Baud
        callback {progdefaults.nanoIO_serbaud = o->index();
listbox_nanoIO_serbaud2->index(o->index());
progdefaults.changed = true;} open
        xywh {594 47 110 24} box DOWN_BOX color 7 align 4
        code0 {o->add("1200|4800|9600|19200|38400|57600|115200");}
        code1 {o->index(progdefaults.nanoIO_serbaud);}
        class Fl_ListBox
      } {}
      Fl_Group listbox_nano_keyer {
        label Keyer
        callback {progdefaults.nanoIO_CW_keyer = o->index();
set_nanoIO_keyer(o->index());
progdefaults.changed = true;} open
        xywh {595 73 110 24} box DOWN_BOX color 7 align 4
        code0 {o->add("Iambic-A|Iambic-B|Straight");}
        code1 {o->index(progdefaults.nanoIO_CW_keyer);}
        class Fl_ListBox
      } {}
      Fl_Group listbox_incr {
        label {Incr'}
        callback {progdefaults.nanoIO_CW_incr = o->index() + '1';
set_nanoIO_incr();
progdefaults.changed = true;} open
        xywh {645 99 60 24} box DOWN_BOX color 7 align 4
        code0 {o->add("1|2|3|4|5");}
        code1 {o->index(progdefaults.nanoIO_CW_incr - '1');}
        class Fl_ListBox
      } {}
      Fl_Button btn_cwfsk_save {
        label Save
        callback {nano_CW_save();}
        tooltip {Write state of nanoIO to Arduino EEPROM} xywh {711 74 80 22}
      }
      Fl_Button btn_cwfsk_query {
        label Status
        callback {nano_CW_query();}
        tooltip {Query state of nanoIO} xywh {711 100 80 22}
      }
      Fl_Group {} {open
        xywh {375 45 154 80} box FLAT_BOX
      } {
        Fl_Check_Button btn_nanoIO_pot {
          label {Use WPM pot'}
          callback {progdefaults.nanoIO_speed_pot=o->value();
progdefaults.changed=true;
nanoIO_use_pot();}
          tooltip {WPM pot update to nanoIO required} xywh {502 48 21 22} down_box DOWN_BOX align 4
          code0 {o->value(progdefaults.nanoIO_speed_pot);}
        }
        Fl_Counter cntr_nanoIO_min_wpm {
          label {Min WPM}
          callback {if ((o->value() + cntr_nanoIO_rng_wpm->value()) > 100)
  cntr_nanoIO_rng_wpm->value(100 - o->value());
set_nanoIO_min_max();}
          tooltip {Minimum WPM setting
default = 10} xywh {447 74 75 22} type Simple align 4 minimum 10 maximum 30 step 1 value 10
        }
        Fl_Counter cntr_nanoIO_rng_wpm {
          label {Rng WPM}
          callback {if ((cntr_nanoIO_min_wpm->value() + o->value()) > 100)
o->value(100 - cntr_nanoIO_min_wpm->value());
set_nanoIO_min_max();}
          tooltip {Range WPM setting
default = 20} xywh {447 100 75 22} type Simple align 4 minimum 10 maximum 40 step 1 value 20
        }
      }
      Fl_Check_Button btn_disable_CW_PTT {
        label {PTT off}
        callback {progdefaults.disable_CW_PTT=o->value();
progdefaults.changed=true;
nanoIO_set_cw_ptt();}
        tooltip {Disable PTT} xywh {531 99 70 24} down_box DOWN_BOX
        code0 {o->value(progdefaults.disable_CW_PTT);}
      }
      Fl_Group {} {
        label {Comp'} open
        xywh {204 125 590 30} box ENGRAVED_BOX align 20
      } {
        Fl_Counter cntrWPMtest {
          label WPM
          callback {progdefaults.nanoCW_test_wpm = o->value();
progdefaults.changed=true;}
          xywh {302 129 78 22} type Simple align 4 minimum 5 maximum 50 step 1 value 30
          code0 {o->value(progdefaults.nanoCW_test_wpm);}
        }
        Fl_Button btn_cal_variable {
          label {Test =>}
          callback {nanoIO_wpm_cal();}
          tooltip {Send "paris " WPM times} xywh {384 129 70 22}
        }
        Fl_Value_Input corr_var_wpm {
          label {secs' =>}
          tooltip {Test duration (60 seconds)} xywh {458 129 70 22} color 255 align 8
        }
        Fl_Value_Input usec_correc {
          label {Comp'}
          tooltip {Compensationin microseconds} xywh {645 129 60 22} color 255
          code0 {o->value(progdefaults.usec_correc);}
        }
        Fl_Button btn_correction {
          label Adjust
          callback {nanoIO_correction();}
          tooltip {send compensation to nanoIO} xywh {711 129 80 22}
        }
      }
      Fl_Check_Button chk_nanoIO_CW_io {
        label {CW i/o}
        callback {if (o->value() == 0) {
  o->value(1);
  return;
}
set_nanoCW();
chk_nanoIO_FSK_io->value(0);}
        tooltip {Enable CW operation} xywh {711 47 70 24} down_box DOWN_BOX
      }
    }
    Fl_Group {} {
      label {Modem/CW/DTR-RTS keying}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Modem/CW/DTR-RTS keying"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Modem/CW/DTR-RTS keying"));}
    } {
      Fl_Group {} {open
        xywh {205 25 590 130} box ENGRAVED_BOX
      } {
        Fl_Box {} {
          label {DTR/RTS keying may be assigned to flrig,

Share the RigCat serial port, share the Separate PTT serial
port, or be assigned to separate serial port.

No settings for baud, stops bits, etc are needed.}
          xywh {210 31 580 116} align 20
        }
      }
      Fl_Group {} {open
        xywh {205 157 590 40} box ENGRAVED_FRAME
      } {
        Fl_Check_Button btn_CW_KEYLINE_flrig {
          label {Use flrig DTR/CTS keying}
          callback {int val = o->value();
progdefaults.use_FLRIGkeying = val;
if (val) {
  progdefaults.CW_KEYLINE_on_cat_port = 0;
  progdefaults.CW_KEYLINE_on_ptt_port = 0;
  btn_CW_KEYLINE_catport->value(0);
  btn_CW_KEYLINE_shared_PTT->value(0);
}
progdefaults.CW_KEYLINE_changed = true;}
          xywh {215 170 23 15} down_box DOWN_BOX align 8
          code0 {o->value(progdefaults.use_FLRIGkeying);}
        }
        Fl_Check_Button btn_FLRIG_CW_disable_ptt {
          label {Disable flrig CW PTT}
          callback {progdefaults.CATkeying_disable_ptt = o->value();
btn_CAT_CW_disable_ptt->value(o->value());
progdefaults.changed = true;}
          tooltip {Required for some transceivers
e.g. TS-480} xywh {475 170 70 14} down_box DOWN_BOX
          code0 {o->value(progdefaults.CATkeying_disable_ptt);}
        }
      }
      Fl_Group {} {open
        xywh {205 199 590 145} box ENGRAVED_FRAME
      } {
        Fl_Check_Button btn_CW_KEYLINE_catport {
          label {Share RIGCAT port}
          callback {int val = o->value();
progdefaults.CW_KEYLINE_on_cat_port = val;
if (val) {
  progdefaults.CW_KEYLINE_on_ptt_port = 0;
  progdefaults.use_FLRIGkeying = 0;
  btn_CW_KEYLINE_shared_PTT->value(0);
  btn_CW_KEYLINE_flrig->value(0);
}
progdefaults.CW_KEYLINE_changed = true;}
          xywh {215 215 23 15} down_box DOWN_BOX align 8
          code0 {o->value(progdefaults.CW_KEYLINE_on_cat_port);}
        }
        Fl_Check_Button btn_CW_KEYLINE_shared_PTT {
          label {Share Separate PTT port}
          callback {int val = o->value();
progdefaults.CW_KEYLINE_on_ptt_port = val;
if (val) {
  progdefaults.CW_KEYLINE_on_cat_port = 0;
  progdefaults.use_FLRIGkeying = 0;
  btn_CW_KEYLINE_catport->value(0);
  btn_CW_KEYLINE_flrig->value(0);
}
progdefaults.CW_KEYLINE_changed = true;}
          xywh {215 246 23 15} down_box DOWN_BOX align 8
          code0 {o->value(progdefaults.CW_KEYLINE_on_ptt_port);}
        }
        Fl_Group listbox_CW_KEYLINE {
          label {CW Keyline}
          callback {progdefaults.CW_KEYLINE = o->index();} open
          xywh {471 241 90 24} box DOWN_BOX color 7
          code0 {o->add("None|RTS|DTR");}
          code1 {o->index(progdefaults.CW_KEYLINE);}
          class Fl_ListBox
        } {}
        Fl_Group listbox_PTT_KEYLINE {
          label {PTT keyline}
          callback {progdefaults.PTT_KEYLINE = o->index();
progdefaults.changed = true;} open
          xywh {693 227 90 24} box DOWN_BOX color 7 align 4 hide
          code0 {o->add("None|RTS|DTR");}
          code1 {o->index(0);//progdefaults.PTT_KEYLINE);}
          class Fl_ListBox
        } {}
        Fl_Group select_CW_KEYLINE_CommPort {
          label {Use Separate Keying Serial Port}
          callback {progdefaults.CW_KEYLINE_serial_port_name = o->value();

if (progStatus.useCW_KEYLINE) {
  close_CW_KEYLINE();
  if (!open_CW_KEYLINE()) {
    btn_CW_KEYLINE_connect->value(0);
    progStatus.useCW_KEYLINE = 0;
  }
    progStatus.useCW_KEYLINE = 1;
}
progdefaults.CW_KEYLINE_changed = true;} open
          tooltip {nanoIO serial port} xywh {210 295 470 24} box DOWN_BOX color 55 align 5
          code0 {\#include "combo.h"}
          code1 {\#include "nanoIO.h"}
          code2 {o->value(progdefaults.CW_KEYLINE_serial_port_name.c_str());}
          class Fl_ComboBox
        } {}
        Fl_Light_Button btn_CW_KEYLINE_connect {
          label Connect
          callback {if (o->value()) {
  if (!open_CW_KEYLINE())
    o->value(0);
  else {
	progStatus.useCW_KEYLINE = 1;
	btn_use_ELCTkeying->value(0);
	btn_use_KNWDkeying->value(0);
	btn_use_ICOMkeying->value(0);
	btn_use_YAESUkeying->value(0);
	progdefaults.use_ELCTkeying = 0;
	progdefaults.use_ICOMkeying = 0;
	progdefaults.use_KNWDkeying = 0;
	progdefaults.use_YAESUkeying = 0;
  }
} else {
  close_CW_KEYLINE();
  progStatus.useCW_KEYLINE = 0;
}}
          tooltip {Connect / Disconnect from nanoIO} xywh {692 295 90 24}
          code0 {o->value(progStatus.useCW_KEYLINE);}
        }
      }
      Fl_Counter cnt_cwio_comp {
        label {Comp (msec)}
        callback {progdefaults.cwio_comp = int(o->value());}
        tooltip {Timing compensation} xywh {600 241 80 24} type Simple align 1 minimum 0 maximum 10 step 1
        code0 {o->value(progdefaults.cwio_comp);}
      }
      Fl_Light_Button btn_cw_dtr_calibrate {
        label Calibrate
        callback {calibrate_cwio();}
        xywh {692 241 90 24} selection_color 6
      }
    }
    Fl_Group {} {
      label {Modem/CW/CAT Keying}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Modem/CW/CAT keying"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Modem/CW/CAT keying"));}
    } {
      Fl_Box {} {
        label {CW keying using CAT command strings.  Available for supported transceivers.
Use with RigCAT or flrig transceiver control.  A separate serial port is NOT needed.

Disable CAT PTT if transceiver interprets that as a keydown command (e.g. TS480).
Recommend setting transceiver to either semi or full break-in.

Enter correct CIV address for Icom transceivers.}
        xywh {210 23 585 140} box THIN_DOWN_BOX color 54 selection_color 54 labelsize 13 align 20
      }
      Fl_Check_Button btn_use_ICOMkeying {
        label Icom
        callback {progdefaults.use_ICOMkeying = o->value();
if (o->value()) {
  btn_use_ELCTkeying->value(0);
  btn_use_KNWDkeying->value(0);
  btn_use_YAESUkeying->value(0);
  progdefaults.use_ELCTkeying = 0;
  progdefaults.use_KNWDkeying = 0;
  progdefaults.use_YAESUkeying = 0;
  close_CW_KEYLINE();
  progStatus.useCW_KEYLINE = 0;
  btn_cw_dtr_calibrate->value(0);
  }
progdefaults.changed=true;}
        xywh {273 173 70 15} down_box DOWN_BOX
        code0 {o->value(progdefaults.use_ICOMkeying);}
      }
      Fl_Input val_ICOMcivaddr {
        label {Hex CIV addr}
        callback {progdefaults.ICOMcivaddr=o->value();
progdefaults.changed=true;}
        tooltip {Enter transceiver HEX CIV address} xywh {343 169 58 22} align 8
        code0 {o->value(progdefaults.ICOMcivaddr.c_str());}
      }
      Fl_Check_Button btn_use_ELCTkeying {
        label Elecraft
        callback {progdefaults.use_ELCTkeying = o->value();
if (o->value()) {
  btn_use_YAESUkeying->value(0);
  btn_use_ICOMkeying->value(0);
  btn_use_KNWDkeying->value(0);
  progdefaults.use_YAESUkeying = 0;
  progdefaults.use_ICOMkeying = 0;
  progdefaults.use_KNWDkeying = 0;
  close_CW_KEYLINE();
  progStatus.useCW_KEYLINE = 0;
  btn_cw_dtr_calibrate->value(0);
  }
progdefaults.changed=true;}
        xywh {273 197 70 15} down_box DOWN_BOX
        code0 {o->value(progdefaults.use_ELCTkeying);}
      }
      Fl_Check_Button btn_use_KNWDkeying {
        label Kenwood
        callback {progdefaults.use_KNWDkeying = o->value();
if (o->value()) {
  btn_use_YAESUkeying->value(0);
  btn_use_ICOMkeying->value(0);
  btn_use_ELCTkeying->value(0);
  progdefaults.use_YAESUkeying = 0;
  progdefaults.use_ICOMkeying = 0;
  progdefaults.use_ELCTkeying = 0;
  close_CW_KEYLINE();
  progStatus.useCW_KEYLINE = 0;
  btn_cw_dtr_calibrate->value(0);
  }
progdefaults.changed=true;}
        xywh {455 197 70 15} down_box DOWN_BOX
        code0 {o->value(progdefaults.use_KNWDkeying);}
      }
      Fl_Check_Button btn_use_YAESUkeying {
        label Yaesu
        callback {progdefaults.use_YAESUkeying = o->value();
if (o->value()) {
  btn_use_ELCTkeying->value(0);
  btn_use_KNWDkeying->value(0);
  btn_use_ICOMkeying->value(0);
  progdefaults.use_ELCTkeying = 0;
  progdefaults.use_KNWDkeying = 0;
  progdefaults.use_ICOMkeying = 0;
  close_CW_KEYLINE();
  progStatus.useCW_KEYLINE = 0;
  btn_cw_dtr_calibrate->value(0);
  }
progdefaults.changed=true;}
        xywh {637 197 70 15} down_box DOWN_BOX
        code0 {o->value(progdefaults.use_YAESUkeying);}
      }
      Fl_Group {} {
        label {Timing Compensation} open
        xywh {205 242 590 103} box ENGRAVED_BOX align 21
      } {
        Fl_Button btn_CAT_keying_calibrate {
          label Calibrate
          callback {CAT_keying_calibrate();}
          tooltip {Send WPM 'PARIS ' words} xywh {230 317 80 22}
          code0 {extern void CAT_keying_calibrate();}
        }
        Fl_Value_Input out_CATkeying_compensation {
          label {Compensate (secs)}
          callback {progdefaults.CATkeying_compensation = o->value() * 1000;
progdefaults.changed=true;}
          xywh {314 317 50 22} align 8 maximum 10 step 0.01
          code0 {o->value(progdefaults.CATkeying_compensation / 1000.0);}
        }
        Fl_Button btn_CAT_keying_clear {
          label Clear
          callback {progdefaults.CATkeying_compensation = 0;
out_CATkeying_compensation->value(0);
out_CATkeying_test_result->value(0);}
          tooltip {Clear compensation} xywh {510 317 50 22}
        }
        Fl_Group {} {
          label {Compute timing compensation at current WPM .  Set WPM to nominal.  Compensation
will be good over a 2:1 WPM range.  Calibration/Test is 1 minute of PARIS} open
          xywh {210 265 580 45} box THIN_DOWN_BOX color 54 labelsize 13 align 20
        } {}
        Fl_Button btn_CAT_keying_test {
          label Test
          callback {CAT_keying_test();}
          tooltip {Send WPM 'PARIS ' words} xywh {574 317 50 22}
          code0 {extern void CAT_keying_test();}
        }
        Fl_Value_Input out_CATkeying_test_result {
          label secs
          xywh {630 317 50 22} align 8 maximum 10 step 0.01
          code0 {o->value(0);}
        }
      }
      Fl_Check_Button btn_CAT_CW_disable_ptt {
        label {Disable CAT PTT}
        callback {progdefaults.CATkeying_disable_ptt = o->value();
btn_FLRIG_CW_disable_ptt->value(o->value());
progdefaults.changed = true;}
        tooltip {Required for some transceivers
e.g. TS-480} xywh {273 221 70 15} down_box DOWN_BOX
        code0 {o->value(progdefaults.CATkeying_disable_ptt);}
      }
    }
    Fl_Group {} {
      label {Modem/DominoEX}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Modem/DominoEX"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Modem/DominoEX"));}
    } {
      Fl_Input txtSecondary {
        label {Secondary Text}
        callback {progdefaults.secText = o->value();
progdefaults.changed = true;}
        tooltip {Text to send during keyboard idle times} xywh {310 88 360 40} type Multiline align 5 when 1
        code0 {txtSecondary->labelsize(FL_NORMAL_SIZE);}
        class Fl_Input2
      }
      Fl_Check_Button valDominoEX_FILTER {
        label Filtering
        callback {progdefaults.DOMINOEX_FILTER = o->value();
resetDOMEX();
progdefaults.changed = true;}
        tooltip {Use DSP filter before decoder} xywh {310 142 80 20} down_box DOWN_BOX value 1
        code0 {o->value(progdefaults.DOMINOEX_FILTER);}
      }
      Fl_Counter valDominoEX_BW {
        label {Filter bandwidth factor}
        callback {progdefaults.DOMINOEX_BW = o->value();
resetDOMEX();
progdefaults.changed = true;}
        tooltip {Filter bandwidth relative to signal width} xywh {451 142 63 20} type Simple align 8 minimum 1 maximum 2 value 1.5
        code0 {o->value(progdefaults.DOMINOEX_BW);}
        code1 {o->labelsize(FL_NORMAL_SIZE);}
        class Fl_Counter2
      }
      Fl_Check_Button chkDominoEX_FEC {
        label FEC
        callback {progdefaults.DOMINOEX_FEC = o->value();
progdefaults.changed = true;}
        tooltip {Enable MultiPSK-compatible FEC} xywh {310 172 51 20} down_box DOWN_BOX
        code0 {o->value(progdefaults.DOMINOEX_FEC);}
      }
      Fl_Value_Slider valDomCWI {
        label {CWI threshold}
        callback {progdefaults.DomCWI = o->value();
progdefaults.changed = true;}
        tooltip {CWI detection and suppression} xywh {310 208 260 20} type Horizontal align 1 textsize 14
        code0 {o->value(progdefaults.DomCWI);}
        code1 {o->labelsize(FL_NORMAL_SIZE); o->textsize(FL_NORMAL_SIZE);}
        class Fl_Value_Slider2
      }
      Fl_Counter valDominoEX_PATHS {
        label {Paths (hidden)}
        callback {progdefaults.DOMINOEX_PATHS = (int)o->value();
progdefaults.changed = true;}
        xywh {634 195 63 20} type Simple minimum 4 maximum 8 step 1 value 5
        code0 {o->value(progdefaults.DOMINOEX_PATHS);}
        code1 {o->labelsize(FL_NORMAL_SIZE);}
        code2 {o->hide();}
        class Fl_Counter2
      }
    }
    Fl_Group {} {
      label {Modem/Feld Hell}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Modem/Feld Hell"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Modem/Feld Hell"));}
    } {
      Fl_Group {} {
        label {Hell Transmit Parameters} open
        xywh {247 31 500 133} box ENGRAVED_FRAME align 17
      } {
        Fl_Group listboxHellFont {
          label {Transmit font}
          callback {progdefaults.feldfontnbr=o->index();
progdefaults.changed = true;} open
          tooltip {Select TX raster font} xywh {262 56 225 22} box DOWN_BOX color 7 align 8
          code0 {\#include "fontdef.h"}
          code1 {o->add(szFeldFonts);}
          code2 {o->index(progdefaults.feldfontnbr);
                       o->labelsize(FL_NORMAL_SIZE);}
          class Fl_ListBox
        } {}
        Fl_Group listboxHellPulse {
          label {Pulse shape}
          callback {progdefaults.HellPulseFast = o->index();
progdefaults.changed = true;} open
          tooltip {Raised cosine pulse shape factor} xywh {262 104 150 22} box DOWN_BOX color 7 align 5
          code0 {o->add(_("Slow (4 msec)|Med (2 msec)|Fast (1 msec)|Hard Keying"));}
          code2 {o->index(progdefaults.HellPulseFast);
                       o->labelsize(FL_NORMAL_SIZE);}
          class Fl_ListBox
        } {}
        Fl_Check_Button btnFeldHellIdle {
          label {Transmit periods (.) when idle}
          callback {progdefaults.HellXmtIdle=o->value();
progdefaults.changed = true;}
          tooltip {Transmits a diddle dot when no keyboard activity} xywh {262 139 230 20} down_box DOWN_BOX value 1
          code0 {o->value(progdefaults.HellXmtIdle);}
        }
        Fl_Value_Slider valHellXmtWidth {
          label {Tx Width Multiplier}
          callback {progdefaults.HellXmtWidth=(int)o->value();
progdefaults.changed = true;}
          tooltip {Range 1...3} xywh {443 104 150 22} type {Horz Knob} color 54 align 8 minimum 1 maximum 3 step 1 value 1 textsize 14
          code0 {o->value(progdefaults.HellXmtWidth);}
        }
      }
      Fl_Group {} {
        label {Hell Receive Parameters} open
        xywh {247 167 500 173} box ENGRAVED_FRAME align 17
      } {
        Fl_Check_Button btnBlackboard {
          label {Reverse video}
          callback {progdefaults.HellBlackboard=o->value();
FHdisp->reverse(progdefaults.HellBlackboard);
progdefaults.changed = true;}
          tooltip {Display RX in reverse video} xywh {262 191 125 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.HellBlackboard);}
        }
        Fl_Check_Button btnHellMarquee {
          label {Marquee text}
          callback {progdefaults.HellMarquee=o->value();
FHdisp->set_marquee(progdefaults.HellMarquee);
progdefaults.changed = true;}
          tooltip {Display RX as a scrolling marquee} xywh {447 191 125 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.HellMarquee);}
        }
        Fl_Value_Slider valHellRcvWidth {
          label {Rx Width Multiplier}
          callback {progdefaults.HellRcvWidth=(int)o->value();
progdefaults.changed = true;}
          tooltip {Range 1...4} xywh {262 227 120 22} type {Horz Knob} color 54 align 8 minimum 1 maximum 4 step 1 value 1 textsize 14
          code0 {o->value(progdefaults.HellRcvWidth);}
        }
        Fl_Value_Slider valHellRcvHeight {
          label {Rx Height in pixels}
          callback {FHdisp_char_height();}
          tooltip {May require resizing the Rx/Tx panel} xywh {262 266 250 22} type {Horz Knob} color 54 align 8 minimum 14 maximum 42 step 2 value 20 textsize 14
          code0 {o->value(progdefaults.HellRcvHeight);}
        }
        Fl_Value_Slider sldrHellBW {
          label {Receive filter bandwidth}
          callback {progdefaults.HELL_BW = sldrHellBW->value();}
          tooltip {Adjust the DSP bandwidth} xywh {262 305 250 22} type Horizontal color 54 align 8 minimum 10 maximum 2400 step 5 value 400 textsize 14
          code0 {o->value(progdefaults.HELL_BW);}
          code1 {o->labelsize(FL_NORMAL_SIZE); o->textsize(FL_NORMAL_SIZE);}
          class Fl_Value_Slider2
        }
        Fl_Value_Slider val_hellagc {
          label {Rx AGC}
          callback {progdefaults.hellagc=(int)o->value();
progdefaults.changed = true;}
          tooltip {1 - Slow, 2 - Medium, 3 - Fast} xywh {527 227 120 22} type {Horz Knob} color 54 align 8 minimum 1 maximum 3 step 1 value 2 textsize 14
          code0 {o->value(progdefaults.hellagc);}
        }
      }
    }
    Fl_Group {} {
      label {Modem/FMT}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {\#include "fmt_dialog.h"}
      code1 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Modem/FMT"));}
      code2 {config_pages.push_back(p);}
      code3 {tab_tree->add(_("Modem/FMT"));}
    } {
      Fl_Group {} {
        label {Audio Stream Procesing}
        xywh {203 24 412 75} box ENGRAVED_FRAME align 21
      } {
        Fl_Group listbox_fmt_sr {
          label {Sample rate}
          callback {progdefaults.FMT_sr=o->index();
progdefaults.changed = true;} open
          tooltip {FMT sample rate} xywh {276 66 100 22} box DOWN_BOX color 7
          code1 {o->add("8000|11025|12000|16000|22050|24000|44100|48000");}
          code2 {o->index(progdefaults.FMT_sr);}
          class Fl_ListBox
        } {}
        Fl_Counter cnt_fmt_rx_ppm {
          label {Rx Codec PPM}
          callback {progdefaults.RX_corr = (int)o->value();
cntRxRateCorr->value(progdefaults.RX_corr);
progdefaults.changed = true;}
          tooltip {Audio Codec ppm correction} xywh {419 66 120 22} align 1 minimum -500 maximum 500 step 1
          code0 {o->value(progdefaults.RX_corr);}
          code1 {o->lstep(10);}
        }
      }
      Fl_Group {} {
        label Tracking open
        xywh {203 99 412 90} box ENGRAVED_FRAME align 21
      } {
        Fl_Button btnFMT_plot_background {
          label Bgnd
          callback {static uchar r, g, b;
  Fl::get_color(progdefaults.FMT_background, r, g, b);
  if (!fl_color_chooser("FMT Background", r, g, b))
    return;
  progdefaults.FMT_background = fl_rgb_color(r,g,b);

  fmt_plot->bk_color(progdefaults.FMT_background);
  fmt_plot->redraw();
  progdefaults.changed = true;}
          tooltip {Change plot background color} xywh {209 122 60 22}
        }
        Fl_Button btnFMT_unk_color {
          label Unkn
          callback {static uchar r, g, b;
  Fl::get_color(progdefaults.FMT_unk_color, r, g, b);
  if (!fl_color_chooser("FMT Background", r, g, b))
    return;
  progdefaults.FMT_unk_color = fl_rgb_color(r,g,b);

  fmt_plot->line_color_1(progdefaults.FMT_unk_color);
  fmt_plot->redraw();
  unk_color->color(progdefaults.FMT_unk_color);
  unk_color->redraw();
  
  progdefaults.changed = true;}
          tooltip {Change plot unknown track color} xywh {209 153 60 22}
        }
        Fl_Button btnFMT_plot_ref_color {
          label Ref
          callback {static uchar r, g, b;
  Fl::get_color(progdefaults.FMT_ref_color, r, g, b);
  if (!fl_color_chooser("FMT Background", r, g, b))
    return;
  progdefaults.FMT_ref_color = fl_rgb_color(r,g,b);

  fmt_plot->line_color_2(progdefaults.FMT_ref_color);
  fmt_plot->redraw();
  ref_color->color(progdefaults.FMT_ref_color);
  ref_color->redraw();
  
  progdefaults.changed = true;}
          tooltip {Change plot reference track color} xywh {274 153 60 22}
        }
        Fl_Button btnFMT_plot_axis {
          label Axis
          callback {static uchar r, g, b;
  Fl::get_color(progdefaults.FMT_axis_color, r, g, b);
  if (!fl_color_chooser("FMT Axis Color", r, g, b))
    return;
  progdefaults.FMT_axis_color = fl_rgb_color(r,g,b);

  fmt_plot->axis_color(progdefaults.FMT_axis_color);
  fmt_plot->redraw();

  progdefaults.changed = true;}
          tooltip {Change Axis' color} xywh {274 122 60 22}
        }
        Fl_Button btnFMT_legend_color {
          label Lgnd
          callback {static uchar r, g, b;
  Fl::get_color(progdefaults.FMT_legend_color, r, g, b);
  if (!fl_color_chooser("FMT Legend Color", r, g, b))
    return;
  progdefaults.FMT_legend_color = fl_rgb_color(r,g,b);

  fmt_plot->legend_color(progdefaults.FMT_legend_color);
  fmt_plot->redraw();

  progdefaults.changed = true;}
          tooltip {Change legend color} xywh {339 107 60 22}
        }
        Fl_Check_Button btn_fmt_plot_over_axis {
          label {Line/Axis}
          callback {progdefaults.FMT_plot_over_axis = o->value();
fmt_plot->plot_over_axis(progdefaults.FMT_plot_over_axis);
progdefaults.changed = true;}
          tooltip {Enable to always plot data over axis} xywh {341 135 31 18} down_box DOWN_BOX
          code0 {o->value(progdefaults.FMT_plot_over_axis);}
        }
        Fl_Check_Button btn_fmt_thick_lines {
          label {Thick lines}
          callback {progdefaults.FMT_thick_lines = o->value();
fmt_plot->thick_lines(progdefaults.FMT_thick_lines);
progdefaults.changed = true;}
          tooltip {Enable to plot track lines 3 pixels wide} xywh {341 160 31 18} down_box DOWN_BOX
          code0 {o->value(progdefaults.FMT_thick_lines);}
        }
        Fl_Counter cnt_fmt_freq_corr {
          label {Freq Correction}
          callback {progdefaults.FMT_freq_corr=o->value();
progdefaults.RIT=progdefaults.FMT_freq_corr;
cntRIT->value(progdefaults.RIT);
progdefaults.changed = true;}
          tooltip {Offset plot lines on vertical scale} xywh {465 118 123 24} align 1 minimum -5 maximum 5 step 0.001
          code0 {o->value(progdefaults.FMT_freq_corr);}
          code1 {o->lstep(0.01);}
        }
        Fl_Button bnt_FMT_dec_corr {
          label {@|<}
          callback {progdefaults.FMT_freq_corr -= 0.1;
cnt_fmt_freq_corr->value(progdefaults.FMT_freq_corr);
progdefaults.RIT=progdefaults.FMT_freq_corr;
cntRIT->value(progdefaults.RIT);
progdefaults.changed = true;}
          xywh {446 119 19 24} labelsize 10
        }
        Fl_Button btn_FMT_incr_corr {
          label {@>|}
          callback {progdefaults.FMT_freq_corr += 0.1;
cnt_fmt_freq_corr->value(progdefaults.FMT_freq_corr);
progdefaults.RIT=progdefaults.FMT_freq_corr;
cntRIT->value(progdefaults.RIT);
progdefaults.changed = true;}
          xywh {588 119 18 24} labelsize 10
        }
        Fl_Counter cnt_fmt_freq_err {
          label {Max Error}
          callback {progdefaults.FMT_freq_err=o->value();
progdefaults.changed = true;}
          tooltip {Limit freq estimate error to this value} xywh {470 160 123 24} align 1 minimum 0.5 maximum 10 value 2
          code0 {o->value(progdefaults.FMT_freq_err);}
          code1 {o->lstep(1.0);}
        }
      }
      Fl_Group {} {
        label {DFT Estimator} open
        xywh {203 190 207 86} box ENGRAVED_FRAME align 21
      } {
        Fl_Counter cnt_FMT_movavg_len {
          label {Data Filter}
          callback {progdefaults.FMT_movavg_len = o->value();
progdefaults.changed = true;}
          tooltip {Moving average - average over NN seconds^0 - no averaging} xywh {214 232 110 24} align 1 minimum 0 maximum 10 value 1
          code0 {o->value(progdefaults.FMT_movavg_len);}
          code1 {o->lstep(1.0);}
        }
        Fl_Group listbox_fmt_dft_rate {
          label {DFT rate}
          callback {progdefaults.FMT_dft_rate=o->index();
progdefaults.changed = true;} open
          tooltip {\# DFT computations / second} xywh {334 232 60 24} box DOWN_BOX color 7
          code1 {o->add("1|2|3|4|5|6|7|8");}
          code2 {o->index(progdefaults.FMT_dft_rate);}
          class Fl_ListBox
        } {}
      }
      Fl_Group {} {
        label {FIR Filter} open
        xywh {411 190 205 86} box ENGRAVED_BOX align 21
      } {
        Fl_Counter cnt_FMT_bpf {
          label Width
          callback {progdefaults.FMT_bpf_width = o->value();
progdefaults.changed = true;}
          tooltip {Band pass filter / unknown / reference} xywh {457 218 100 24} align 1 minimum 5 maximum 200 step 5 value 100
          code0 {o->value(progdefaults.FMT_bpf_width);}
          code1 {o->lstep(50.0);}
        }
        Fl_Check_Button btn_fmt_unk_bpf_on {
          label {bpf Unk'}
          callback {progdefaults.FMT_unk_bpf_on = o->value();
progdefaults.changed = true;}
          tooltip {ON  - band pass filter unknown signal} xywh {429 246 70 18} down_box DOWN_BOX
          code0 {o->value(progdefaults.FMT_unk_bpf_on);}
        }
        Fl_Check_Button btn_fmt_ref_bpf_on {
          label {bpf Ref'}
          callback {progdefaults.FMT_ref_bpf_on = o->value();
progdefaults.changed = true;}
          tooltip {ON  - band pass filter reference signal} xywh {526 246 70 18} down_box DOWN_BOX
          code0 {o->value(progdefaults.FMT_ref_bpf_on);}
        }
      }
      Fl_Group {} {
        label {CSV Data Recording} open
        xywh {617 190 178 86} box ENGRAVED_BOX align 21
      } {
        Fl_Check_Button btn_fmt_autorecord {
          label {Auto record}
          tooltip {Automatically start csv data file recording with wav playback} xywh {658 246 107 18} down_box DOWN_BOX
        }
        Fl_Counter cnt_fmt_auto_record_time {
          tooltip {Record data for NN minutes after auto start} xywh {672 218 66 24} type Simple align 17 minimum 2 maximum 60 step 2 value 2
        }
      }
      Fl_Group {} {
        label {Wav file recording}
        xywh {203 277 592 66} box ENGRAVED_FRAME align 21
      } {
        Fl_Check_Button btn_fmt_record_wav {
          label {Record Audio}
          callback {cb_fmt_record_wav(o->value());
if (o->value() == 1)
  btn_fmt_sync_wav->deactivate();
else
  btn_fmt_sync_wav->activate();}
          tooltip {Wav file recording - START IMMEDIATELY} xywh {464 288 118 18} down_box DOWN_BOX
          code0 {if (progdefaults.fmt_sync_wav_file) o->deactivate();}
        }
        Fl_Check_Button btn_fmt_sync_wav {
          label {Sync to data record}
          callback {progdefaults.fmt_sync_wav_file = o->value();
if (o->value() == 1)
  btn_fmt_record_wav->deactivate();
else
  btn_fmt_record_wav->activate();
progdefaults.changed = true;}
          tooltip {Wav file recording - SYNCHRONIZE with data recording} xywh {599 288 118 18} down_box DOWN_BOX
          code0 {o->value(progdefaults.fmt_sync_wav_file);}
        }
        Fl_Output txt_fmt_wav_filename {
          label {File pathname:}
          tooltip {Computer generated file name} xywh {213 314 570 24} align 5
        }
      }
      Fl_Group {} {
        label Waterfall
        xywh {616 24 180 131} box ENGRAVED_FRAME align 21
      } {
        Fl_Box {} {
          label {Shft-click: select unknown
Ctrl-click: select reference}
          xywh {626 44 168 35} labelsize 12 align 20
        }
        Fl_Check_Button btn_fmt_center_on_unknown {
          label {Center on Unknown}
          callback {progdefaults.fmt_center_on_unknown = o->value();
if (o->value()) {
  progdefaults.fmt_center_on_median = 0;
  progdefaults.fmt_center_on_reference = 0;
  btn_fmt_center_on_median->value(0);
  btn_fmt_center_on_reference->value(0);
}
progdefaults.changed = true;}
          tooltip {Waterfall Centered on unknown signal} xywh {626 85 70 18} down_box DOWN_BOX
          code0 {o->value(progdefaults.fmt_center_on_unknown);}
        }
        Fl_Check_Button btn_fmt_center_on_reference {
          label {Center on Reference}
          callback {progdefaults.fmt_center_on_reference = o->value();
if (o->value()) {
  progdefaults.fmt_center_on_unknown = 0;
  progdefaults.fmt_center_on_median = 0;
  btn_fmt_center_on_median->value(0);
  btn_fmt_center_on_unknown->value(0);
}
progdefaults.changed = true;}
          tooltip {Waterfall centered on reference signal} xywh {626 109 70 18} down_box DOWN_BOX
          code0 {o->value(progdefaults.fmt_center_on_reference);}
        }
        Fl_Check_Button btn_fmt_center_on_median {
          label {Center on median}
          callback {progdefaults.fmt_center_on_median = o->value();
if (o->value()) {
  progdefaults.fmt_center_on_unknown = 0;
  progdefaults.fmt_center_on_reference = 0;
  btn_fmt_center_on_unknown->value(0);
  btn_fmt_center_on_reference->value(0);
}
progdefaults.changed = true;}
          tooltip {Waterfall centered 1/2 way between unknown & reference} xywh {627 133 70 17} down_box DOWN_BOX
          code0 {o->value(progdefaults.fmt_center_on_median);}
        }
      }
      Fl_Group {} {
        xywh {616 156 180 32} box ENGRAVED_FRAME
      } {
        Fl_Check_Button btn_fmt_use_tabs {
          label {Use TAB delimiters}
          callback {progdefaults.FMT_use_tabs = o->value();
progdefaults.changed = true;}
          tooltip {Use tab delimiters between columns on csv export file.} xywh {627 165 70 18} down_box DOWN_BOX
          code0 {o->value(progdefaults.FMT_use_tabs);}
        }
      }
    }
    Fl_Group {} {
      label {Modem/FSQ}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Modem/FSQ"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Modem/FSQ"));}
    } {
      Fl_Group {} {
        label {Rx Parameters} open
        xywh {208 23 585 60} box ENGRAVED_BOX align 21
      } {
        Fl_Value_Slider valhits {
          label {Min Hits}
          callback {progdefaults.fsqhits=(int)o->value();
progdefaults.changed = true;}
          tooltip {Minimum \# hits in tone detector} xywh {343 28 125 22} type {Horz Knob} align 8 minimum 3 maximum 6 step 1 value 3 textsize 14
          code0 {o->value(progdefaults.fsqhits);}
        }
        Fl_Choice sel_fsq_lpf {
          label {Image LPF}
          callback {progdefaults.fsq_img_filter=o->value();
progdefaults.changed = true;} open
          tooltip {Narrow LPF if image noisy} xywh {366 53 102 22} down_box BORDER_BOX
          code0 {o->add("None"); o->add("300 Hz"); o->add("400 Hz"); o->add("500 Hz");}
          code1 {o->value(progdefaults.fsq_img_filter);}
        } {}
        Fl_Value_Slider sldrMovAvg {
          label {MovAvg:}
          callback {progdefaults.fsq_movavg = o->value();
progdefaults.changed = true;}
          tooltip {Filter FFT output} xywh {613 28 125 22} type Horizontal align 4 minimum 1 maximum 15 step 1 value 4 textsize 14
          code0 {o->value(progdefaults.fsq_movavg);}
          code1 {o->maximum(MOVAVGLIMIT);}
        }
        Fl_Choice sel_fsq_heard_aging {
          label {Heard aging}
          callback {progdefaults.fsq_heard_aging=o->value();
progdefaults.changed = true;} open
          tooltip {Remove call after ...} xywh {636 53 102 22} down_box BORDER_BOX
          code0 {o->add("Never"); o->add("1 min"); o->add("5 min");o->add("10 min"); o->add("20 min"); o->add("20 min"); o->add("30 min"); o->add("60 min"); o->add("90 min"); o->add("120 min");}
          code1 {o->value(progdefaults.fsq_heard_aging);}
        } {}
      }
      Fl_Group {} {
        label {Tx Parameters} open
        xywh {208 83 585 100} box ENGRAVED_BOX align 21
      } {
        Fl_Round_Button {btn_fsqbaud[0]} {
          label {1.5 baud}
          callback {if (o->value() == 1) {
progdefaults.fsqbaud = 1.5;
btn_fsqbaud[1]->value(0);
btn_fsqbaud[2]->value(0);
btn_fsqbaud[3]->value(0);
btn_fsqbaud[4]->value(0);
}
progdefaults.changed = true;}
          xywh {340 90 55 15} down_box ROUND_DOWN_BOX
          code0 {o->value(progdefaults.fsqbaud == 1.5);}
        }
        Fl_Round_Button {btn_fsqbaud[1]} {
          label {2 baud}
          callback {if (o->value() == 1) {
progdefaults.fsqbaud = 2;
btn_fsqbaud[0]->value(0);
btn_fsqbaud[2]->value(0);
btn_fsqbaud[3]->value(0);
btn_fsqbaud[4]->value(0);
}
progdefaults.changed = true;}
          xywh {430 90 55 15} down_box ROUND_DOWN_BOX
          code0 {o->value(progdefaults.fsqbaud == 2);}
        }
        Fl_Round_Button {btn_fsqbaud[2]} {
          label {3 baud}
          callback {if (o->value() == 1) {
progdefaults.fsqbaud = 3;
btn_fsqbaud[0]->value(0);
btn_fsqbaud[1]->value(0);
btn_fsqbaud[3]->value(0);
btn_fsqbaud[4]->value(0);
}
progdefaults.changed = true;}
          xywh {520 90 55 15} down_box ROUND_DOWN_BOX
          code0 {o->value(progdefaults.fsqbaud == 3);}
        }
        Fl_Round_Button {btn_fsqbaud[3]} {
          label {4.5 baud}
          callback {if (o->value() == 1) {
progdefaults.fsqbaud = 4.5;
btn_fsqbaud[0]->value(0);
btn_fsqbaud[1]->value(0);
btn_fsqbaud[2]->value(0);
btn_fsqbaud[4]->value(0);
}
progdefaults.changed = true;}
          xywh {610 90 55 15} down_box ROUND_DOWN_BOX
          code0 {o->value(progdefaults.fsqbaud == 4.5);}
        }
        Fl_Round_Button {btn_fsqbaud[4]} {
          label {6 baud}
          callback {if (o->value() == 1) {
progdefaults.fsqbaud = 6;
btn_fsqbaud[0]->value(0);
btn_fsqbaud[1]->value(0);
btn_fsqbaud[2]->value(0);
btn_fsqbaud[3]->value(0);
}
progdefaults.changed = true;}
          xywh {700 90 55 15} down_box ROUND_DOWN_BOX
          code0 {o->value(progdefaults.fsqbaud == 6);}
        }
        Fl_Choice sel_fsq_frequency {
          label {Center freq}
          callback {progdefaults.fsq_frequency=o->value();
progdefaults.changed = true;} open
          xywh {638 110 102 22} down_box BORDER_BOX
          code0 {o->add("1150"); o->add("1500"); o->add("Variable");}
          code1 {o->value(progdefaults.fsq_frequency);}
        } {}
        Fl_Choice sel_fsq_sounder {
          label Sounder
          callback {progdefaults.fsq_sounder=o->value();
progdefaults.changed = true;} open
          tooltip {Send beacon every ...} xywh {283 110 100 22} down_box BORDER_BOX
          code0 {o->add("OFF"); o->add("1 min"); o->add("10 min"); o->add("30 min"); o->add("60 min");}
          code1 {o->value(progdefaults.fsq_sounder);}
        } {}
        Fl_Counter cntr_FSQ_time_out {
          label {Time out}
          callback {progdefaults.fsq_time_out = o->value();
progdefaults.changed = true;}
          tooltip {Time out xmt attempt in XX seconds} xywh {457 110 80 22} type Simple align 4 minimum 2 maximum 20 step 1 value 6
          code0 {o->value(progdefaults.fsq_time_out);}
        }
        Fl_Input {} {
          label {QTC:}
          callback {progdefaults.fsqQTCtext = o->value();
progdefaults.changed = true;}
          tooltip {Enter QTC text} xywh {283 136 456 22}
          code0 {o->value(progdefaults.fsqQTCtext.c_str());}
        }
        Fl_Check_Button btn_fsq_lowercase {
          label {MYCALL always lower case}
          callback {progdefaults.fsq_lowercase=o->value();
progdefaults.changed = true;}
          tooltip {convert operator callsign to lower case} xywh {283 162 214 15} down_box DOWN_BOX
          code0 {o->value(progdefaults.fsq_lowercase);}
        }
      }
      Fl_Group {} {
        label {Message Logging} open
        xywh {208 184 585 44} box ENGRAVED_BOX align 21
      } {
        Fl_Check_Button btn_fsq_msg_dt_stamp {
          label {Add date/time}
          callback {progdefaults.add_fsq_msg_dt=o->value();
progdefaults.changed=true;}
          tooltip {Add date/time stamp to each \# received message} xywh {238 205 135 15} down_box DOWN_BOX value 1
          code0 {o->value(progdefaults.add_fsq_msg_dt);}
        }
        Fl_Check_Button btn_fsq_msg_append {
          label {always append to file(s)}
          callback {progdefaults.always_append=o->value();
progdefaults.changed=true;}
          tooltip {append \# directive msgs to named file} xywh {385 205 210 15} down_box DOWN_BOX value 1
          code0 {o->value(progdefaults.always_append);}
        }
        Fl_Counter cntr_FSQ_notify_time_out {
          label {Notify time out}
          callback {progdefaults.fsq_notify_time_out = o->value();
progdefaults.changed = true;}
          tooltip {Notification dialog closes after XX seconds;^j0 == dialog remains open} xywh {698 201 80 22} type Simple align 4 minimum 0 maximum 30 step 1 value 10
          code0 {o->value(progdefaults.fsq_notify_time_out);}
        }
      }
      Fl_Group {} {
        label Logging open
        xywh {208 228 585 80} box ENGRAVED_BOX align 21
      } {
        Fl_Output txtAuditLog {
          label {Audit log}
          xywh {285 248 325 22}
          code0 {o->value(progdefaults.fsq_audit_log.c_str());}
        }
        Fl_Light_Button btn_enable_auditlog {
          label Enable
          callback {progdefaults.fsq_enable_audit_log = o->value();
progdefaults.changed = true;}
          xywh {624 249 74 20} selection_color 2
          code0 {o->value(progdefaults.fsq_enable_audit_log);}
        }
        Fl_Button btn_select_auditlog {
          label Select
          callback {std::string str = std::string(TempDir);
str.append(progdefaults.fsq_audit_log);
const char *fname = FSEL::saveas("Audit log", "*.txt\\t*", str.c_str());
if (!fname) return;
if (!*fname) return;
progdefaults.fsq_audit_log = fl_filename_name(fname);
txtAuditLog->value(progdefaults.fsq_audit_log.c_str());
progdefaults.changed = true;}
          xywh {712 249 70 20}
        }
        Fl_Output txtHeardLog {
          label {Heard log}
          xywh {285 276 325 22}
          code0 {o->value(progdefaults.fsq_heard_log.c_str());}
        }
        Fl_Light_Button btn_enable_fsq_heard_log {
          label Enable
          callback {progdefaults.fsq_enable_heard_log = o->value();
progdefaults.changed = true;}
          xywh {624 277 74 20} selection_color 2
          code0 {o->value(progdefaults.fsq_enable_heard_log);}
        }
        Fl_Button btn_select_fsq_heard_log {
          label Select
          callback {std::string str = std::string(TempDir);
str.append(progdefaults.fsq_heard_log);
const char *fname = FSEL::saveas("Heard log", "*.txt\\t*", str.c_str());
if (!fname) return;
if (!*fname) return;
progdefaults.fsq_heard_log = fl_filename_name(fname);
txtHeardLog->value(progdefaults.fsq_heard_log.c_str());
progdefaults.changed = true;}
          xywh {712 277 70 20}
        }
      }
      Fl_Group {} {
        label {Text Colors} open
        xywh {208 308 585 35} box ENGRAVED_BOX align 21
      } {
        Fl_Button btn_fsq_xmt_color {
          label XMIT
          callback {choose_color(progdefaults.fsq_xmt_color);

btn_fsq_xmt_color->color( progdefaults.fsq_xmt_color );
btn_fsq_xmt_color->redraw();

fsq_rx_text->setFontColor(progdefaults.fsq_xmt_color, FTextBase::FSQ_TX);

progdefaults.changed = true;}
          tooltip {Transmit text} xywh {348 315 40 20} align 4
          code0 {btn_fsq_xmt_color->color(progdefaults.fsq_xmt_color);}
        }
        Fl_Button btn_fsq_directed_color {
          label DIRECTED
          callback {choose_color(progdefaults.fsq_directed_color);

btn_fsq_directed_color->color( progdefaults.fsq_directed_color );
btn_fsq_directed_color->redraw();

fsq_rx_text->setFontColor(progdefaults.fsq_directed_color, FTextBase::FSQ_DIR);

progdefaults.changed = true;}
          tooltip {Directed received text} xywh {478 315 40 20} align 4
          code0 {btn_fsq_directed_color->color(progdefaults.fsq_directed_color);}
        }
        Fl_Button btn_fsq_undirected_color {
          label UNDIRECTED
          callback {choose_color(progdefaults.fsq_undirected_color);

btn_fsq_undirected_color->color( progdefaults.fsq_undirected_color);
btn_fsq_undirected_color->redraw();

fsq_rx_text->setFontColor(progdefaults.fsq_undirected_color, FTextBase::FSQ_UND);

progdefaults.changed = true;}
          tooltip {Undirected received text} xywh {628 315 40 20} align 4
          code0 {btn_fsq_undirected_color->color(progdefaults.fsq_undirected_color);}
        }
        Fl_Button btn_fsq_color_defaults {
          label Defaults
          callback {progdefaults.fsq_xmt_color = FL_RED;
btn_fsq_xmt_color->color(progdefaults.fsq_xmt_color);
btn_fsq_xmt_color->redraw();

progdefaults.fsq_directed_color = FL_BLUE;
btn_fsq_directed_color->color(progdefaults.fsq_directed_color);
btn_fsq_directed_color->redraw();

progdefaults.fsq_undirected_color = FL_DARK_GREEN;
btn_fsq_undirected_color->color(progdefaults.fsq_undirected_color);
btn_fsq_undirected_color->redraw();

fsq_rx_text->setFontColor(progdefaults.fsq_xmt_color, FTextBase::FSQ_TX);
fsq_rx_text->setFontColor(progdefaults.fsq_directed_color, FTextBase::FSQ_DIR);
fsq_rx_text->setFontColor(progdefaults.fsq_undirected_color, FTextBase::FSQ_UND);

progdefaults.changed = true;}
          xywh {710 315 74 20}
        }
      }
    }
    Fl_Group {} {
      label {Modem/IFKP}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Modem/IFKP"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Modem/IFKP"));}
    } {
      Fl_Group {} {
        label {Tx Parameters} open
        xywh {208 46 587 120} box ENGRAVED_BOX align 21
      } {
        Fl_Round_Button {btn_ifkpbaud[0]} {
          label {1/2 speed}
          callback {if (o->value() == 1) {
progdefaults.ifkp_baud = 0;
btn_ifkpbaud[1]->value(0);
btn_ifkpbaud[2]->value(0);
}
progdefaults.changed = true;}
          xywh {303 74 100 17} down_box ROUND_DOWN_BOX
          code0 {o->value(progdefaults.ifkp_baud == 0);}
        }
        Fl_Round_Button {btn_ifkpbaud[1]} {
          label {1x speed}
          callback {if (o->value() == 1) {
progdefaults.ifkp_baud = 1;
btn_ifkpbaud[0]->value(0);
btn_ifkpbaud[2]->value(0);
}
progdefaults.changed = true;}
          tooltip default xywh {411 74 100 17} down_box ROUND_DOWN_BOX
          code0 {o->value(progdefaults.ifkp_baud == 1);}
        }
        Fl_Round_Button {btn_ifkpbaud[2]} {
          label {2x speed}
          callback {if (o->value() == 1) {
progdefaults.ifkp_baud = 2;
btn_ifkpbaud[0]->value(0);
btn_ifkpbaud[1]->value(0);
}
progdefaults.changed = true;}
          xywh {519 74 100 17} down_box ROUND_DOWN_BOX
          code0 {o->value(progdefaults.ifkp_baud == 2);}
        }
        Fl_Check_Button btn_ifkp_lowercase {
          label {MYCALL always lower case}
          callback {progdefaults.ifkp_lowercase=o->value();
progdefaults.changed = true;}
          tooltip {convert operator callsign to lower case} xywh {303 106 220 15} down_box DOWN_BOX
          code0 {o->value(progdefaults.ifkp_lowercase);}
        }
        Fl_Check_Button btn_ifkp_lowercase_call {
          label {CALLSIGN always lower case}
          callback {progdefaults.ifkp_lowercase_call=o->value();
progdefaults.changed = true;}
          tooltip {convert other callsign to lower case} xywh {528 106 220 15} down_box DOWN_BOX
          code0 {o->value(progdefaults.ifkp_lowercase_call);}
        }
        Fl_Check_Button btn_ifkp_freqlock {
          label {lock WF at 1500 Hz}
          callback {progdefaults.ifkp_freqlock=o->value();
if (active_modem == ifkp_modem &&
  o->value() )
  active_modem->set_freq(1500);
progdefaults.changed = true;}
          tooltip {Always transmit at 1500 Hertz center freq.} xywh {303 136 220 15} down_box DOWN_BOX
          code0 {\#include "trx.h"}
          code1 {o->value(progdefaults.ifkp_freqlock);}
        }
      }
      Fl_Group {} {
        label Logging open
        xywh {208 171 587 100} box ENGRAVED_BOX align 21
      } {
        Fl_Output txt_ifkp_audit_log {
          label {Audit log}
          xywh {295 201 323 25}
          code0 {o->value(progdefaults.ifkp_audit_log.c_str());}
        }
        Fl_Light_Button btn_enable_ifkp_audit_log {
          label Enable
          callback {progdefaults.ifkp_enable_audit_log = o->value();
progdefaults.changed = true;}
          xywh {632 201 73 25} selection_color 2
          code0 {o->value(progdefaults.ifkp_enable_audit_log);}
        }
        Fl_Button btn_ifkp_select_auditlog {
          label Select
          callback {std::string str = std::string(TempDir);
str.append(progdefaults.ifkp_audit_log);
const char *fname = FSEL::saveas("Audit log", "*.txt\\t*", str.c_str());
if (!fname) return;
if (!*fname) return;
progdefaults.ifkp_audit_log = fl_filename_name(fname);
txt_ifkp_audit_log->value(progdefaults.ifkp_audit_log.c_str());
progdefaults.changed = true;}
          xywh {713 201 70 25}
        }
        Fl_Output txt_ifkp_heard_log {
          label {Heard log}
          xywh {295 230 323 25}
          code0 {o->value(progdefaults.ifkp_heard_log.c_str());}
        }
        Fl_Light_Button btn_enable_ifkp_heard_log {
          label Enable
          callback {progdefaults.ifkp_enable_heard_log = o->value();
progdefaults.changed = true;}
          xywh {632 230 73 25} selection_color 2
          code0 {o->value(progdefaults.ifkp_enable_heard_log);}
        }
        Fl_Button btn_select_ifkp_heard_log {
          label Select
          callback {std::string str = std::string(TempDir);
str.append(progdefaults.ifkp_heard_log);
const char *fname = FSEL::saveas("Heard log", "*.txt\\t*", str.c_str());
if (!fname) return;
if (!*fname) return;
progdefaults.ifkp_heard_log = fl_filename_name(fname);
txt_ifkp_heard_log->value(progdefaults.ifkp_heard_log.c_str());
progdefaults.changed = true;}
          xywh {713 230 70 25}
        }
      }
    }
    Fl_Group {} {
      label {Modem/MT-63}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Modem/MT-63"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Modem/MT-63"));}
    } {
      Fl_Group {} {open
        xywh {249 36 490 84} box ENGRAVED_FRAME align 21
      } {
        Fl_Check_Button btnMT63_8bit {
          label {8-bit extended characters (UTF-8)}
          callback {progdefaults.mt63_8bit = o->value();
progdefaults.changed = true;}
          tooltip {Enable this for UTF-8 characters} xywh {394 50 205 20} down_box DOWN_BOX value 1
          code0 {o->value(progdefaults.mt63_8bit);}
        }
        Fl_Check_Button btnMT63_rx_integration {
          label {Long receive integration}
          callback {progdefaults.mt63_rx_integration = o->value();
progdefaults.changed = true;}
          tooltip {Enable for very weak signals} xywh {394 80 190 20} down_box DOWN_BOX value 1
          code0 {o->value(progdefaults.mt63_rx_integration);}
        }
      }
      Fl_Group {} {open
        xywh {249 132 490 178} box ENGRAVED_FRAME
      } {
        Fl_Check_Button btnMT63_usetones {
          label {Transmit lower start tone}
          callback {progdefaults.mt63_usetones = o->value();
if (!o->value()) {
    btnMT63_upper_lower->value(0);
    btnMT63_upper_lower->do_callback();
    btnMT63_upper_lower->deactivate();
}
else
    btnMT63_upper_lower->activate();
progdefaults.changed = true;}
          xywh {393 140 200 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.mt63_usetones);}
        }
        Fl_Check_Button btnMT63_upper_lower {
          label {Transmit upper start tone}
          callback {progdefaults.mt63_twotones = o->value();
progdefaults.changed = true;}
          xywh {393 170 200 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.mt63_twotones);}
          code1 {if (!btnMT63_usetones->value()) o->deactivate();}
        }
        Fl_Spinner MT63_tone_duration {
          label {Tone Duration (secs)}
          callback {progdefaults.mt63_tone_duration=(int)o->value();
progdefaults.changed = true;}
          xywh {393 196 40 20} align 8 maximum 10 value 4
          code0 {o->value(progdefaults.mt63_tone_duration);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Spinner2
        }
        Fl_Check_Button btnMT63_at500 {
          label {Low tone at 500 Hz}
          callback {o->value(1);
progdefaults.mt63_at500 = true;
progdefaults.mt63_centered = false;
btnMT63_centered->value(0);
btnMT63_manual->value(0);
progdefaults.changed = true;}
          xywh {393 225 200 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.mt63_at500);}
        }
        Fl_Check_Button btnMT63_centered {
          label {Centered at 1500 Hz (SHARES)}
          callback {o->value(1);
progdefaults.mt63_centered = true;
progdefaults.mt63_at500 = false;
btnMT63_at500->value(0);
btnMT63_manual->value(0);
progdefaults.changed = true;}
          xywh {393 250 248 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.mt63_centered);}
        }
        Fl_Check_Button btnMT63_manual {
          label {Manual tuning}
          callback {o->value(1);
progdefaults.mt63_centered = false;
progdefaults.mt63_at500 = false;
btnMT63_at500->value(0);
btnMT63_centered->value(0);
progdefaults.changed = true;}
          xywh {393 275 200 20} down_box DOWN_BOX
          code0 {o->value(!progdefaults.mt63_at500 && !progdefaults.mt63_centered);}
        }
      }
    }
    Fl_Group {} {
      label {Modem/Contestia}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Modem/Contestia"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Modem/Contestia"));}
    } {
      Fl_Group {} {open
        xywh {257 40 490 240} box ENGRAVED_FRAME
      } {
        Fl_Group i_listbox_contestia_bandwidth {
          label Bandwidth
          callback {progdefaults.contestiabw = o->index();
set_contestia_default_integ();
resetCONTESTIA();
progdefaults.changed = true;} open
          tooltip {Select bandwidth} xywh {312 60 85 22} box DOWN_BOX color 7 align 8
          code0 {o->add(szContestiaBandwidth);}
          code1 {o->index(progdefaults.contestiabw);}
          code2 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_ListBox
        } {}
        Fl_Group i_listbox_contestia_tones {
          label Tones
          callback {progdefaults.contestiatones = o->index();
set_contestia_default_integ();
resetCONTESTIA();
progdefaults.changed = true;} open
          tooltip {Select number of tones} xywh {573 60 70 22} box DOWN_BOX color 7 align 8
          code0 {o->add(szContestiaTones);}
          code1 {o->index(progdefaults.contestiatones);}
          code2 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_ListBox
        } {}
        Fl_Group {} {
          label {Receive synchronizer} open
          xywh {295 99 414 101} box ENGRAVED_FRAME align 21
        } {
          Fl_Counter cntContestia_smargin {
            label {Tune margin (tone frequency spacing)}
            callback {progdefaults.contestiasmargin = (int)(o->value());
resetCONTESTIA();
progdefaults.changed = true;}
            tooltip {Change ONLY to experiment} xywh {314 130 70 22} type Simple align 8 minimum 2 maximum 128 step 1 value 8
            code0 {o->labelsize(FL_NORMAL_SIZE);}
            class Fl_Counter2
          }
          Fl_Counter cntContestia_sinteg {
            label {Integration period (FEC blocks)}
            callback {progdefaults.contestiasinteg = (int)(o->value());
resetCONTESTIA();
progdefaults.changed = true;}
            tooltip {Change ONLY to experiment} xywh {314 162 70 22} type Simple align 8 minimum 2 maximum 128 step 1 value 4
            code0 {o->labelsize(FL_NORMAL_SIZE);}
            class Fl_Counter2
          }
        }
        Fl_Check_Button btnContestia_8bit {
          label {8-bit extended characters}
          callback {progdefaults.contestia8bit = o->value();
progdefaults.changed = true;}
          tooltip {Enable this for Latin-1 accented characters} xywh {312 209 200 20} down_box DOWN_BOX
        }
        Fl_Check_Button btnContestia_start_stop_tones {
          label {xmt start/stop tones}
          callback {progdefaults.contestia_start_tones = o->value();
progdefaults.changed = true;}
          tooltip {Enable this to send start/stop tones} xywh {312 240 265 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.contestia_start_tones);}
        }
      }
    }
    Fl_Group {} {
      label {Modem/Olivia}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Modem/Olivia"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Modem/Olivia"));}
    } {
      Fl_Group {} {open
        xywh {253 40 490 280} box ENGRAVED_FRAME
      } {
        Fl_Group i_listbox_olivia_bandwidth {
          label Bandwidth
          callback {progdefaults.oliviabw = o->index();
set_olivia_default_integ();
resetOLIVIA();
progdefaults.changed = true;} open
          tooltip {Select bandwidth} xywh {308 60 85 22} box DOWN_BOX color 7 align 8
          code0 {o->add(szOliviaBandwidth);}
          code1 {o->index(progdefaults.oliviabw);}
          code2 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_ListBox
        } {}
        Fl_Group i_listbox_olivia_tones {
          label Tones
          callback {progdefaults.oliviatones = o->index();
set_olivia_default_integ();
resetOLIVIA();
progdefaults.changed = true;} open
          tooltip {Select number of tones} xywh {569 60 70 22} box DOWN_BOX color 7 align 8
          code0 {o->add(szOliviaTones);}
          code1 {o->index(progdefaults.oliviatones);}
          code2 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_ListBox
        } {}
        Fl_Group {} {
          label {Receive synchronizer} open
          xywh {308 99 379 133} box ENGRAVED_FRAME align 21
        } {
          Fl_Counter cntOlivia_smargin {
            label {Tune margin (tone frequency spacing)}
            callback {progdefaults.oliviasmargin = (int)(o->value());
resetOLIVIA();
progdefaults.changed = true;}
            tooltip {Change ONLY to experiment} xywh {323 130 70 22} type Simple align 8 minimum 2 maximum 128 step 1 value 8
            code0 {o->labelsize(FL_NORMAL_SIZE);}
            code1 {o->value(progdefaults.oliviasmargin);}
            class Fl_Counter2
          }
          Fl_Counter cntOlivia_sinteg {
            label {Integration period (FEC blocks)}
            callback {progdefaults.oliviasinteg = (int)(o->value());
resetOLIVIA();
progdefaults.changed = true;}
            tooltip {Change ONLY to experiment} xywh {323 162 70 22} type Simple align 8 minimum 2 maximum 128 step 1 value 4
            code0 {o->labelsize(FL_NORMAL_SIZE);}
            code1 {o->value(progdefaults.oliviasinteg);}
            class Fl_Counter2
          }
          Fl_Check_Button btn_olivia_reset_fec {
            label {Reset FEC blocks when changing BW or Tones}
            callback {progdefaults.olivia_reset_fec = o->value();
progdefaults.changed = true;}
            tooltip {Enable this for UTF-8 character transmission} xywh {324 194 349 20} down_box DOWN_BOX
            code0 {o->value(progdefaults.olivia_reset_fec);}
          }
        }
        Fl_Check_Button btnOlivia_8bit {
          label {8-bit extended characters (UTF-8)}
          callback {progdefaults.olivia8bit = o->value();
progdefaults.changed = true;}
          tooltip {Enable this for UTF-8 character transmission} xywh {329 255 265 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.olivia8bit);}
        }
        Fl_Check_Button btnOlivia_start_stop_tones {
          label {xmt start/stop tones}
          callback {progdefaults.olivia_start_tones = o->value();
progdefaults.changed = true;}
          tooltip {Enable this to send start/stop tones} xywh {329 279 265 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.olivia_start_tones);}
        }
      }
    }
    Fl_Group {} {
      label {Modem/Psk}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Modem/Psk"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Modem/Psk"));}
    } {
      Fl_Group {} {
        label {AFC behavior} open
        xywh {255 33 490 86} box ENGRAVED_FRAME align 21
      } {
        Fl_Counter cntSearchRange {
          label {Acquisition search range (Hz)}
          callback {progdefaults.SearchRange = (int)o->value();
wf->redraw_marker();
progdefaults.changed = true;}
          tooltip {Capture signals within this frequency range} xywh {400 57 75 20} type Simple align 8 minimum 10 maximum 500 step 10 value 200
          code0 {o->value(progdefaults.SearchRange);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Counter2
        }
        Fl_Counter cntACQsn {
          label {Acquisition S/N (dB)}
          callback {progdefaults.ACQsn = o->value();
progdefaults.changed = true;}
          tooltip {Capture signals over this threshold} xywh {400 86 75 20} type Simple align 8 minimum 3 maximum 20 step 1 value 6
          code0 {o->value(progdefaults.ACQsn);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Counter2
        }
      }
      Fl_Group {} {
        label {S/N and IMD behavior} open
        xywh {255 121 490 65} box ENGRAVED_FRAME align 21
      } {
        Fl_Group listbox_psk_status_timeout {
          label after
          callback {progdefaults.StatusDim = o->index();
progdefaults.changed = true;} open
          tooltip {Behavior of s/n imd} xywh {380 152 80 20} box DOWN_BOX color 7 align 8
          code0 {o->add(_("Clear")); o->add(_("Dim"));}
          code1 {o->index(progdefaults.StatusDim);
                       o->labelsize(FL_NORMAL_SIZE);}
          class Fl_ListBox
        } {}
        Fl_Counter {} {
          label seconds
          callback {progdefaults.StatusTimeout = (int)(o->value());
progdefaults.changed = true;}
          tooltip {Will occur after this time in seconds} xywh {521 152 75 20} type Simple align 8 minimum 0 maximum 30 step 1
          code0 {o->value(progdefaults.StatusTimeout);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Counter2
        }
      }
      Fl_Group {} {
        label {Multi-Channel Signal Processing} open
        xywh {255 191 490 80} box ENGRAVED_FRAME align 21
      } {
        Fl_Check_Button btnEnablePSKbrowsing {
          label {Multi-channel detector}
          callback {progdefaults.pskbrowser_on = o->value();
progdefaults.changed = true;}
          xywh {425 241 180 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.pskbrowser_on);}
        }
        Fl_Box {} {
          label {Disable on very slow CPUs of if signal browser is not used}
          xywh {265 218 440 20} align 20
        }
      }
      Fl_Group {} {
        label {8 psk} open
        xywh {255 273 490 47} box ENGRAVED_FRAME align 21
      } {
        Fl_Check_Button btnPSKpilot {
          label {Pilot tone}
          callback {progdefaults.pskpilot = o->value();
progdefaults.changed = true;}
          tooltip {Enable encode/decode vestigial pilot tone} xywh {300 286 113 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.pskpilot);}
        }
        Fl_Counter cnt_pilot_power {
          label {pilot power (dB)}
          callback {progdefaults.pilot_power = o->value();
progdefaults.changed = true;}
          tooltip {Pilot tone power relative to signal} xywh {405 286 75 20} type Simple align 8 minimum -60 maximum -20 step 1 value -30
          code0 {o->value(progdefaults.pilot_power);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Counter2
        }
        Fl_Check_Button btnPSK8Preamble {
          label {Short Preamble}
          callback {progStatus.psk8DCDShortFlag = o->value();}
          tooltip {Enable short preamble for 8PSK transmission} xywh {610 286 113 20} down_box DOWN_BOX
          code0 {o->value(progStatus.psk8DCDShortFlag);}
        }
      }
    }
    Fl_Group {} {
      label {Modem/TTY/Rx}
      xywh {200 0 600 350} box FLAT_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Modem/TTY/Rx"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Modem/TTY/Rx"));}
    } {
      Fl_Group {} {
        label Receive open
        xywh {202 22 595 50} box ENGRAVED_FRAME align 21
      } {
        Fl_Group i_listbox_rtty_afc_speed {
          label {AFC speed}
          callback {progdefaults.rtty_afcspeed = o->index();
progdefaults.changed = true;} open
          tooltip {AFC tracking speed} xywh {296 43 90 22} box DOWN_BOX color 7 align 4
          code0 {o->add("Slow"); o->add("Normal"); o->add("Fast");}
          code1 {o->index(progdefaults.rtty_afcspeed);}
          code2 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_ListBox
        } {}
        Fl_Check_Button chkUOSrx {
          label {RX - unshift on space}
          callback {progdefaults.UOSrx=o->value();
progdefaults.changed = true;}
          tooltip {Revert to unshifted char's on a space} xywh {400 45 63 18} down_box DOWN_BOX
          code0 {o->value(progdefaults.UOSrx);}
        }
        Fl_Value_Input rtty_rx_shape {
          label {Filter Shape Factor}
          callback {progdefaults.rtty_filter = o->value();
progStatus.rtty_filter_changed = true;
progdefaults.changed = true;}
          tooltip {rcos timing coefficient:
1.0 ... 2.0
W1HKJ best 1.275
DO2SMF best 1.500} xywh {745 42 48 25} minimum 1 maximum 2 step 0.001 value 1.25
          code0 {o->value(progdefaults.rtty_filter);}
        }
      }
      Fl_Group {} {
        label {Decode (CWI suppression)} open
        xywh {202 72 595 55} box ENGRAVED_FRAME align 21
      } {
        Fl_Check_Button {btnRxTones[0]} {
          label {Mark-Space}
          callback {if (o->value()) {
  btnRxTones[1]->value(0);
  btnRxTones[2]->value(0);
  progdefaults.rtty_cwi = 0;
}}
          xywh {308 98 77 13} down_box DOWN_BOX
          code0 {o->value(progdefaults.rtty_cwi == 0);}
        }
        Fl_Check_Button {btnRxTones[1]} {
          label {Mark only}
          callback {if (o->value()) {
  btnRxTones[0]->value(0);
  btnRxTones[2]->value(0);
  progdefaults.rtty_cwi = 1;
}}
          xywh {455 98 77 13} down_box DOWN_BOX
          code0 {o->value(progdefaults.rtty_cwi == 1);}
        }
        Fl_Check_Button {btnRxTones[2]} {
          label {Space only}
          callback {if (o->value()) {
  btnRxTones[1]->value(0);
  btnRxTones[0]->value(0);
  progdefaults.rtty_cwi = 2;
}}
          xywh {602 98 78 13} down_box DOWN_BOX
          code0 {o->value(progdefaults.rtty_cwi == 2);}
        }
      }
      Fl_Group {} {
        label {RTTY Scope Display} open
        xywh {202 128 595 55} box ENGRAVED_FRAME align 21
      } {
        Fl_Check_Button btnPreferXhairScope {
          label {Use cross hair scope}
          callback {progdefaults.PreferXhairScope=o->value();
progdefaults.changed = true;}
          tooltip {Default to cross hair digiscope} xywh {308 150 182 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.PreferXhairScope);}
        }
        Fl_Check_Button chk_true_scope {
          label {XY - classic scope}
          callback {progdefaults.true_scope=o->value();
progdefaults.changed = true;}
          tooltip {Enabled - use Mark/Space filter outputs
Disabled - use pseudo signals} xywh {551 150 77 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.true_scope);}
        }
      }
      Fl_Group {} {
        label {Log RTTY frequency} open
        xywh {202 184 595 54} box ENGRAVED_FRAME align 21
      } {
        Fl_Check_Button chk_useMARKfreq {
          label {Use MARK freq'}
          callback {progdefaults.useMARKfreq=o->value();
progdefaults.changed = true;}
          tooltip {Enabled - log QSO using Mark frequency
Disabled - log QSO using center frequency} xywh {308 208 161 17} down_box DOWN_BOX value 1
          code0 {o->value(progdefaults.useMARKfreq);}
        }
        Fl_Button btnRTTY_mark_color {
          label {track color}
          callback {if (fl_color_chooser("MARK freq track",
  progdefaults.rttymarkRGBI.R,
  progdefaults.rttymarkRGBI.G,
  progdefaults.rttymarkRGBI.B) ) {
o->color(fl_rgb_color(progdefaults.rttymarkRGBI.R,progdefaults.rttymarkRGBI.G,progdefaults.rttymarkRGBI.B));
o->redraw();
wf->redraw_marker();
progdefaults.changed = true;
}}
          tooltip {Color of Mark Track} xywh {551 205 45 20} color 2 align 8
          code0 {o->color(fl_rgb_color(progdefaults.rttymarkRGBI.R,progdefaults.rttymarkRGBI.G,progdefaults.rttymarkRGBI.B));}
        }
      }
      Fl_Group {} {
        label {RTTY Bell} open
        xywh {202 240 595 104} box ENGRAVED_FRAME align 21
      } {
        Fl_Check_Button chk_audibleBELL {
          label {Audible BELL}
          callback {progdefaults.audibleBELL=o->value();
progdefaults.changed = true;}
          tooltip {Enabled - log QSO using Mark frequency
Disabled - log QSO using center frequency} xywh {308 259 161 22} down_box DOWN_BOX value 1
          code0 {o->value(progdefaults.audibleBELL);}
        }
        Fl_Check_Button chk_visibleBELL {
          label {Visible BELL}
          callback {progdefaults.visibleBELL=o->value();
progdefaults.changed = true;}
          tooltip {Enabled - log QSO using Mark frequency
Disabled - log QSO using center frequency} xywh {551 259 161 22} down_box DOWN_BOX value 1
          code0 {o->value(progdefaults.visibleBELL);}
        }
        Fl_File_Input inp_wav_fname_bell_ring {
          label {RTTY Bell audio wav}
          xywh {223 301 301 35} align 5
          code0 {o->value(progdefaults.BELL_RING.c_str());}
        }
        Fl_Button btn_select_bell_ring_wav {
          label Select
          callback {Fl_Native_File_Chooser fnfc;
fnfc.title("Pick a file");
fnfc.type(Fl_Native_File_Chooser::BROWSE_FILE);
fnfc.filter("wav files\\t*.{mp3,wav}\\n");
fnfc.directory("./");           // default directory to use
// Show native chooser
switch ( fnfc.show() ) {
  case -1: break; // ERROR
  case  1: break; // CANCEL
  default: {
  	progdefaults.BELL_RING = fnfc.filename();
  	inp_wav_fname_bell_ring->value(progdefaults.BELL_RING.c_str());
  	progdefaults.BELL_RING_MENU = 0;
  	mnu_bell_ring_menu->value(progdefaults.BELL_RING_MENU);
  	break; // FILE CHOSEN
  }
}}
          xywh {526 312 59 24}
        }
        Fl_Choice mnu_bell_ring_menu {
          label {Sound:}
          callback {if (o->value() > 0) {
  switch (o->value()) {
    case 1 : progdefaults.BELL_RING = "bark"; break;
    case 2 : progdefaults.BELL_RING = "checkout"; break;
    case 3 : progdefaults.BELL_RING = "diesel"; break;
    case 4 : progdefaults.BELL_RING = "steam_train"; break;
    case 5 : progdefaults.BELL_RING = "doesnot"; break;
    case 6 : progdefaults.BELL_RING = "beeboo"; break;
    case 7 : progdefaults.BELL_RING = "phone"; break;
    case 8 : progdefaults.BELL_RING = "dinner_bell"; break;
    case 9 : progdefaults.BELL_RING = "rtty_bell"; break;
    case 10 : progdefaults.BELL_RING = "standard_tone"; break;
  }
  inp_wav_fname_bell_ring->value(progdefaults.BELL_RING.c_str());
}
progdefaults.BELL_RING_MENU = o->value();} open
          xywh {589 312 134 24} box DOWN_BOX down_box BORDER_BOX color 53 align 5
          code0 {o->add("wav file|bark|checkout|diesel|steam_train|doesnot|beeboo|phone|dinner_bell|rtty_bell|standard_tone");}
          code1 {o->value(progdefaults.BELL_RING_MENU);}
        } {}
        Fl_Button btn_test_bell_ring_wav {
          label Test
          callback {audio_alert->alert(progdefaults.BELL_RING.c_str());}
          xywh {728 312 59 24}
        }
      }
    }
    Fl_Group {} {
      label {Modem/TTY/Tx}
      xywh {200 0 600 350} box FLAT_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Modem/TTY/Tx"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Modem/TTY/Tx"));}
    } {
      Fl_Group {} {
        label {Sound Card FSK} open
        xywh {205 32 590 229} box ENGRAVED_FRAME align 21
      } {
        Fl_Group selShift {
          label {Carrier shift}
          callback {progdefaults.rtty_shift = o->index();
sel_xcvr_FSK_shift->index(progdefaults.rtty_shift);
if (progdefaults.rtty_shift == o->lsize() - 1)
    selCustomShift->activate();
else
    selCustomShift->deactivate();
selCustomShift->redraw();
resetRTTY();
progdefaults.changed = true;} open
          tooltip {Select carrier shift} xywh {281 65 100 22} box DOWN_BOX color 7 align 8 when 1
          code0 {o->add(szShifts);o->index(progdefaults.rtty_shift);
                       o->labelsize(FL_NORMAL_SIZE);}
          class Fl_ListBox
        } {}
        Fl_Counter selCustomShift {
          label {Custom shift}
          callback {progdefaults.rtty_custom_shift = o->value();
resetRTTY();
progdefaults.changed = true;}
          tooltip {Input carrier shift} xywh {281 98 100 22} align 8 minimum 10 maximum 1200 step 10 value 450
          code0 {o->lstep(100.0);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Counter2
        }
        Fl_Group selBaud {
          label {Baud rate}
          callback {progdefaults.rtty_baud = o->index();
resetRTTY();
progdefaults.changed = true;} open
          tooltip {Select carrier baudrate} xywh {281 131 100 22} box DOWN_BOX color 7 align 8 when 1
          code0 {o->add(szBauds);}
          code1 {o->index(progdefaults.rtty_baud);}
          code2 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_ListBox
        } {}
        Fl_Group selBits {
          label {Bits per character}
          callback {progdefaults.rtty_bits = o->index();
selParity->do_callback();} open
          tooltip {Select \# bits / char} xywh {281 164 100 22} box DOWN_BOX color 7 align 8 when 1
          code0 {o->add(szSelBits);o->index(progdefaults.rtty_bits);
                       o->labelsize(FL_NORMAL_SIZE);}
          class Fl_ListBox
        } {}
        Fl_Group selParity {
          label Parity
          callback {if (progdefaults.rtty_bits == 0) {
  progdefaults.rtty_parity = rtty::RTTY_PARITY_NONE;
  o->index(progdefaults.rtty_parity);
} else
  progdefaults.rtty_parity = o->index();
resetRTTY();
progdefaults.changed = true;} open
          tooltip {Select parity} xywh {281 197 100 22} box DOWN_BOX color 7 align 8 when 1
          code0 {o->add(szParity);o->index(progdefaults.rtty_parity);
                       o->labelsize(FL_NORMAL_SIZE);}
          class Fl_ListBox
        } {}
        Fl_Group selStopBits {
          label {Stop bits}
          callback {progdefaults.rtty_stop = o->index();
resetRTTY();
progdefaults.changed = true;} open
          tooltip {Select \# stop bits} xywh {281 231 100 22} box DOWN_BOX color 7 align 8 when 1
          code0 {o->add(szStopBits);o->index(progdefaults.rtty_stop);
                       o->labelsize(FL_NORMAL_SIZE);}
          class Fl_ListBox
        } {}
        Fl_Check_Button btnAUTOCRLF {
          label AutoCRLF
          callback {progdefaults.rtty_autocrlf = o->value();
progdefaults.changed = true;}
          tooltip {Add CRLF after page width characters} xywh {532 65 90 22} down_box DOWN_BOX
          code0 {o->value(progdefaults.rtty_autocrlf);}
        }
        Fl_Counter cntrAUTOCRLF {
          label chars
          callback {progdefaults.rtty_autocount = (int)o->value();
progdefaults.changed = true;}
          tooltip {Auto CRLF line length} xywh {643 65 75 22} type Simple align 8 minimum 68 maximum 80 step 1 value 72
          code0 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Counter2
        }
        Fl_Check_Button btnCRCRLF {
          label {CR-CR-LF}
          callback {progdefaults.rtty_crcrlf = o->value();
progdefaults.changed = true;}
          tooltip {Use "cr cr lf" for "cr lf"} xywh {532 98 90 22} down_box DOWN_BOX when 6
          code0 {o->value(progdefaults.rtty_crcrlf);}
        }
        Fl_Check_Button chkUOStx {
          label {TX - unshift on space}
          callback {progdefaults.UOStx=o->value();
progdefaults.changed = true;}
          tooltip {Revert to Unsifted char's on a space} xywh {532 131 63 22} down_box DOWN_BOX
          code0 {o->value(progdefaults.UOStx);}
        }
        Fl_Check_Button chk_shaped_rtty {
          label {Shaped Tx}
          callback {progStatus.shaped_rtty = o->value();}
          tooltip {Use wave shaping on Tx signal} xywh {532 197 212 22} down_box DOWN_BOX value 1
          code0 {o->value(progStatus.shaped_rtty);}
        }
        Fl_Check_Button chkPseudoFSK {
          label {Pseudo-FSK - right channel}
          callback {progdefaults.PseudoFSK = o->value();
chkPseudoFSK2->value(o->value());
progdefaults.changed = true;
if (o->value()) {
  progdefaults.sig_on_right_channel = false;
  chkAudioStereoOut->value(0);
  progdefaults.PTTrightchannel = false;
  btnPTTrightchannel->value(0);
}}
          tooltip {Create keyed square wave on right audio channel} xywh {532 164 212 22} down_box DOWN_BOX
          code0 {o->value(progdefaults.PseudoFSK);}
        }
        Fl_Counter cnt_TTY_LTRS {
          label {LTRS at start}
          callback {progdefaults.TTY_LTRS = (int)o->value();
progdefaults.changed = true;}
          tooltip {Insert NN LTRS bytes at start of each transmission} xywh {532 231 75 22} type Simple align 8 minimum 0 maximum 10 step 1 value 1
          code0 {o->value(progdefaults.TTY_LTRS);}
        }
      }
      Fl_Group {} {
        label {Transceiver FSK} open
        xywh {205 262 590 77} box ENGRAVED_FRAME align 21 hide
      } {
        Fl_Counter cntr_xcvr_FSK_MARK {
          label Mark
          callback {progdefaults.xcvr_FSK_MARK = o->value();}
          tooltip {Mark frequency in Hertz} xywh {221 297 126 23} align 8 minimum 500 maximum 3000 step 1 value 2115
          code0 {o->value(progdefaults.xcvr_FSK_MARK);}
          code1 {o->lstep(10);}
        }
        Fl_Group sel_xcvr_FSK_shift {
          label {Carrier shift}
          callback {progdefaults.rtty_shift = o->index();
selShift->index(progdefaults.rtty_shift);
resetRTTY();
progdefaults.changed = true;} open
          tooltip {Carrier shift in Hertz} xywh {404 297 100 23} box DOWN_BOX color 7 align 8 when 1
          code0 {o->add(szShifts);}
          code1 {o->index(progdefaults.rtty_shift);}
          class Fl_ListBox
        } {}
      }
    }
    Fl_Group {} {
      label {Modem/TTY/nanoIO}
      xywh {200 0 600 350} box FLAT_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Modem/TTY/nanoIO"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Modem/TTY/nanoIO"));}
    } {
      Fl_Group select_nanoIO_CommPort {
        label {Ser. Port}
        callback {progdefaults.nanoIO_serial_port_name = o->value();} open
        tooltip {nanoIO serial port} xywh {290 23 420 25} box DOWN_BOX color 55 align 4
        code0 {\#include "combo.h"}
        code1 {\#include "nanoIO.h"}
        code2 {o->value(progdefaults.nanoIO_serial_port_name.c_str());}
        class Fl_ComboBox
      } {}
      Fl_Light_Button btn_nanoIO_connect {
        label Connect
        callback {if (o->value()) {
  if (open_nanoIO()) {
    btn_nanoCW_connect->value(1);
    chk_nanoIO_FSK_io->value(1);
  } else {
    o->value(0);
    btn_nanoCW_connect->value(0);
    chk_nanoIO_CW_io->value(0);
    chk_nanoIO_FSK_io->value(0);
  }
} else {
  close_nanoIO();
  o->value(0);
  btn_nanoCW_connect->value(0);
  chk_nanoIO_FSK_io->value(0);
  chk_nanoIO_CW_io->value(0);
}}
        tooltip {Connect / Disconnect from nanoIO} xywh {715 23 80 25}
      }
      Fl_Group listbox_nanoIO_serbaud2 {
        label {Serial Baud}
        callback {progdefaults.nanoIO_serbaud = o->index();
listbox_nanoIO_serbaud->index(o->index());
progdefaults.changed = true;} open
        xywh {293 57 92 24} box DOWN_BOX color 7 align 4
        code0 {o->add("1200|4800|9600|19200|38400|57600|115200");}
        code1 {o->index(progdefaults.nanoIO_serbaud);}
        class Fl_ListBox
      } {}
      Fl_Text_Display txt_nano_io {
        label {USB serial I/O}
        xywh {202 126 596 220} align 5
        code0 {\#include "FTextRXTX.h"}
        code1 {o->setFont(progdefaults.RxFontnbr);}
        code2 {o->setFontSize(12);}
        class FTextView
      }
      Fl_Button btn_nanofsk_save {
        label Save
        callback {nano_CW_save();}
        tooltip {Write state of nanoIO to Arduino EEPROM} xywh {715 90 80 25}
      }
      Fl_Button btn_nanofsk_query {
        label Status
        callback {nano_CW_query();}
        tooltip {Query state of nanoIO} xywh {630 57 80 25}
      }
      Fl_Check_Button chk_nanoIO_polarity {
        label {MARK polarity}
        callback {progdefaults.nanoIO_polarity=o->value();
nano_mark_polarity(progdefaults.nanoIO_polarity);
progdefaults.changed = true;}
        tooltip {Set - mark logical HIGH
Read from nanoIO} xywh {323 90 53 24} down_box DOWN_BOX
        code0 {o->value(progdefaults.nanoIO_polarity);}
      }
      Fl_Group sel_nanoIO_baud {
        label {TTY Baud}
        callback {progdefaults.nanoIO_baud = o->index();
nano_set_baud(progdefaults.nanoIO_baud);
progdefaults.changed = true;} open
        tooltip {nanoIO - TTY baud} xywh {447 90 84 25} box DOWN_BOX color 7 align 8 when 1
        code0 {o->add("45.45|50.0|75.0|100.0");}
        code1 {o->index(progdefaults.nanoIO_baud);}
        code2 {o->labelsize(FL_NORMAL_SIZE);}
        class Fl_ListBox
      } {}
      Fl_Group grp_nanoio_debug {
        label {Debug Output} open
        xywh {202 126 596 220} box ENGRAVED_FRAME align 5 hide resizable
      } {
        Fl_Browser brws_nanoio_sent {
          xywh {202 126 298 190} align 18
        }
        Fl_Browser brws_nanoio_rcvd {
          xywh {500 126 298 190} align 18
        }
        Fl_Button btn_nanoio_clear_sent {
          label {Clear Sent}
          callback {brws_nanoio_sent->clear();}
          xywh {309 319 85 20}
        }
        Fl_Button btn_nanoio_clear_both {
          label {Clear Both}
          callback {brws_nanoio_rcvd->clear();
brws_nanoio_sent->clear();}
          xywh {457 319 85 20}
        }
        Fl_Button btn_nanoio_clear_rcvd {
          label {Clear Rcvd}
          callback {brws_nanoio_rcvd->clear();}
          xywh {605 319 85 20}
        }
      }
      Fl_Light_Button btn_nanoio_debug {
        label Debug
        callback {if (o->value()) {
  grp_nanoio_debug->show();
  txt_nano_io->hide();
} else {
  grp_nanoio_debug->hide();
  txt_nano_io->show();
}}
        xywh {630 90 80 25}
      }
      Fl_Check_Button chk_nanoIO_FSK_io {
        label {TTY i/o}
        callback {if (o->value() == 0) {
  o->value(1);
  return;
}
set_nanoIO();
chk_nanoIO_CW_io->value(0);}
        tooltip {Enable TTY operation} xywh {715 57 70 24} down_box DOWN_BOX
      }
    }
    Fl_Group {} {
      label {Modem/TTY/Navigator}
      xywh {200 0 600 350} box FLAT_BOX align 21 hide
      code0 {\#include "Nav.h"}
      code1 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Modem/TTY/Navigator"));}
      code2 {config_pages.push_back(p);}
      code3 {tab_tree->add(_("Modem/TTY/Navigator"));}
    } {
      Fl_Group {} {
        label {FSK Interface} open
        xywh {206 36 591 70} box ENGRAVED_FRAME align 21
      } {
        Fl_Group select_USN_FSK_port {
          label Port
          callback {progdefaults.Nav_FSK_port = o->value();} open
          tooltip {Navigator serial port} xywh {249 65 455 23} box DOWN_BOX color 55 align 4
          code0 {\#include "combo.h"}
          code1 {\#include "Nav.h"}
          code2 {o->value(progdefaults.Nav_FSK_port.c_str());}
          class Fl_ComboBox
        } {}
        Fl_Light_Button btn_Nav_connect {
          label FSK
          callback {if (o->value()) {
  if (!open_NavFSK())
    o->value(0);
} else {
  close_NavFSK();
}}
          tooltip {Connect / Disconnect from Nav FSK port} xywh {711 65 80 23}
        }
      }
      Fl_Group {} {
        label {Configuration Interface} open
        xywh {206 107 591 239} box ENGRAVED_FRAME align 21
      } {
        Fl_Group select_Nav_config_port {
          label Port
          callback {progdefaults.Nav_config_port = o->value();} open
          tooltip {Navigator configuration port} xywh {250 137 455 23} box DOWN_BOX color 55 align 4
          code0 {o->value(progdefaults.Nav_config_port.c_str());}
          class Fl_ComboBox
        } {}
        Fl_Group sel_Nav_ch1 {
          label {Channel 1 Attenuator}
          callback {progdefaults.Nav_channel_1_att = o->index();
Nav_set_channel_1_att(progdefaults.Nav_channel_1_att);
progdefaults.changed = true;} open
          tooltip {Nav Channel 1 attenuator} xywh {378 164 80 23} box DOWN_BOX color 7 align 4 when 1
          code1 {o->add("15 db|Normal");}
          code2 {o->index(progdefaults.Nav_channel_1_att);}
          class Fl_ListBox
        } {}
        Fl_Group sel_Nav_ch2 {
          label {Channel 2 attenuator}
          callback {progdefaults.Nav_channel_2_att = o->index();
Nav_set_channel_2_att(progdefaults.Nav_channel_2_att);
progdefaults.changed = true;} open
          tooltip {NavChannel 2 Attenuator} xywh {378 193 80 23} box DOWN_BOX color 7 align 4 when 1
          code1 {o->add("15 db|Normal");}
          code2 {o->index(progdefaults.Nav_channel_2_att);}
          class Fl_ListBox
        } {}
        Fl_Group sel_Nav_rf_att {
          label {RF attenuator}
          callback {progdefaults.Nav_rf_att = o->index();
Nav_set_rf_att(progdefaults.Nav_rf_att);
progdefaults.changed = true;} open
          tooltip {NavRF Attenuator} xywh {378 223 80 23} box DOWN_BOX color 7 align 4 when 1
          code1 {o->add("20 db|Normal");}
          code2 {o->index(progdefaults.Nav_rf_att);}
          class Fl_ListBox
        } {}
        Fl_Group sel_Nav_wk_ptt {
          label {WinKey PTT}
          callback {progdefaults.Nav_wk_ptt = o->index();
Nav_set_wk_ptt(progdefaults.Nav_wk_ptt);
progdefaults.changed = true;} open
          tooltip {NavWinkey PTT} xywh {378 253 80 23} box DOWN_BOX color 7 align 4 when 1
          code1 {o->index(progdefaults.Nav_wk_ptt);}
          code2 {o->add("On|Off");}
          class Fl_ListBox
        } {}
        Fl_Group sel_Nav_LED {
          label {LED brightness}
          callback {progdefaults.Nav_led = o->index();
Nav_set_led(progdefaults.Nav_led);
progdefaults.changed = true;} open
          tooltip {NavLED brightness} xywh {378 283 80 23} box DOWN_BOX color 7 align 4 when 1
          code1 {o->index(progdefaults.Nav_led);}
          code2 {o->add("Dim|Normal");}
          class Fl_ListBox
        } {}
        Fl_Group sel_Nav_CAT_LED {
          label {CAT LED state}
          callback {progdefaults.Nav_cat_led = o->index();
Nav_set_cat_led(progdefaults.Nav_cat_led);
progdefaults.changed = true;} open
          tooltip {NavCAT state LED} xywh {378 313 80 23} box DOWN_BOX color 7 align 4 when 1
          code1 {o->index(progdefaults.Nav_cat_led);}
          code2 {o->add("Steady|Polling");}
          class Fl_ListBox
        } {}
        Fl_Group sel_Nav_FSK_baud {
          label {Baud rate}
          callback {progdefaults.Nav_FSK_baud = o->index();
Nav_set_baud(progdefaults.Nav_FSK_baud);
progdefaults.changed = true;} open
          tooltip {Nav FSK baud rate} xywh {586 164 80 23} box DOWN_BOX color 7 align 4 when 1
          code0 {o->add("45.45|75|100");}
          code1 {o->index(progdefaults.Nav_FSK_baud);}
          class Fl_ListBox
        } {}
        Fl_Group sel_Nav_FSK_stopbits {
          label {Stop bits}
          callback {progdefaults.Nav_FSK_stopbits = o->index();
Nav_set_stopbits(progdefaults.Nav_FSK_stopbits);
progdefaults.changed = true;} open
          tooltip {Nav FSK Stop bits} xywh {585 193 80 23} box DOWN_BOX color 7 align 4 when 1
          code0 {o->add("1|1.5|2");}
          code1 {o->index(progdefaults.Nav_FSK_stopbits);}
          class Fl_ListBox
        } {}
        Fl_Group sel_Nav_FSK_polarity {
          label {Mark Polarity}
          callback {progdefaults.Nav_FSK_polarity = o->index();
Nav_set_polarity(progdefaults.Nav_FSK_polarity);
progdefaults.changed = true;} open
          tooltip {Nav FSK MARK Polarity} xywh {585 223 80 23} box DOWN_BOX color 7 align 4 when 1
          code0 {o->add("Normal|Reverse");}
          code1 {o->index(progdefaults.Nav_FSK_polarity);}
          class Fl_ListBox
        } {}
        Fl_Group sel_Nav_FSK_sidetone {
          label {Side tone}
          callback {progdefaults.Nav_FSK_sidetone = o->index();
Nav_set_sidetone(progdefaults.Nav_FSK_sidetone);
progdefaults.changed = true;} open
          tooltip {Nav FSK side tone} xywh {585 253 80 23} box DOWN_BOX color 7 align 4 when 1
          code0 {o->add("On|Off");}
          code1 {o->index(progdefaults.Nav_FSK_sidetone);}
          class Fl_ListBox
        } {}
        Fl_Group sel_Nav_FSK_ptt {
          label {FSK PTT}
          callback {progdefaults.Nav_FSK_ptt = o->index();
Nav_set_ptt(progdefaults.Nav_FSK_ptt);
progdefaults.changed = true;} open
          tooltip {Nav FSK PTT - should always be on} xywh {585 283 80 23} box DOWN_BOX color 7 align 4 when 1
          code0 {o->add("On|Off");}
          code1 {o->index(progdefaults.Nav_FSK_ptt);}
          class Fl_ListBox
        } {}
        Fl_Light_Button btn_Nav_config {
          label Config
          callback {if (o->value()) {
  if (!open_NavConfig())
    o->value(0);
} else {
  close_NavConfig();
}}
          tooltip {Connect / Disconnect from Nav Config port} xywh {710 137 80 23}
        }
      }
    }
    Fl_Group {} {
      label {Modem/TTY/Synop}
      xywh {200 0 600 350} box FLAT_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Modem/TTY/Synop"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Modem/TTY/Synop"));}
    } {
      Fl_Check_Button btnSynopAdifDecoding {
        label {SYNOP to ADIF}
        callback {progdefaults.SynopAdifDecoding=o->value();
progdefaults.changed = true;}
        tooltip {Decodes SYNOP messages (Ex: Deutsche Wetterdienst) to ADIF log file} xywh {406 71 127 24} down_box DOWN_BOX align 148
        code0 {o->value(progdefaults.SynopAdifDecoding);}
      }
      Fl_Check_Button btnSynopKmlDecoding {
        label {SYNOP to KML}
        callback {progdefaults.SynopKmlDecoding=o->value();
progdefaults.changed = true;}
        tooltip {Decodes SYNOP messages (Ex: Deutsche Wetterdienst) to KML documents (Ex: Google Earth)} xywh {406 112 120 24} down_box DOWN_BOX align 148
        code0 {o->value(progdefaults.SynopKmlDecoding);}
      }
      Fl_Check_Button btnSynopInterleaved {
        label {Interleave SYNOP and text}
        callback {progdefaults.SynopInterleaved=o->value();
progdefaults.changed = true;}
        tooltip {Interleave text with decoded SYNOP messages, or replacement.} xywh {406 154 211 24} down_box DOWN_BOX align 148
        code0 {o->value(progdefaults.SynopInterleaved);}
      }
    }
    Fl_Group {} {
      label {Modem/TTY/Winkeyer 3}
      xywh {200 0 600 350} box FLAT_BOX align 21 hide
      code0 {\#include "winkeyer.h"}
      code1 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Modem/TTY/Winkeyer 3"));}
      code2 {config_pages.push_back(p);}
      code3 {tab_tree->add(_("Modem/TTY/Winkeyer 3"));}
    } {
      Fl_Group {} {
        label {Serial Interface} open
        xywh {206 43 591 72} box ENGRAVED_FRAME align 21
      } {
        Fl_Group select_WKFSK_CommPort {
          label Port
          callback {progStatus.WK_serial_port_name = o->value();
select_WK_CommPort->value(progStatus.WK_serial_port_name.c_str());} open
          tooltip {Xcvr serial port} xywh {274 71 405 23} box DOWN_BOX color 55 align 4
          code0 {\#include "combo.h"}
          code1 {o->value(progStatus.WK_serial_port_name.c_str());}
          class Fl_ComboBox
        } {}
        Fl_Light_Button btn_WKFSK_connect {
          label Connect
          callback {WKFSK_connect(o->value());}
          tooltip {Connect / Disconnect from WinKeyer} xywh {705 71 80 23}
          code0 {o->value(progStatus.WK_online);}
        }
      }
      Fl_Group {} {
        label {Configuration Interface} open
        xywh {206 116 591 231} box ENGRAVED_FRAME align 21
      } {
        Fl_Group sel_WKFSK_baud {
          label {Baud rate}
          callback {progStatus.WKFSK_baud = o->index();
WKFSK_init();} open
          tooltip {Nav FSK baud rate} xywh {391 148 78 23} box DOWN_BOX color 7 align 4 when 1
          code0 {o->add("45.45|50|75|100");}
          code1 {o->index(progStatus.WKFSK_baud);}
          class Fl_ListBox
        } {}
        Fl_Group sel_WKFSK_stopbits {
          label {Stop bits}
          callback {progStatus.WKFSK_stopbits = o->index();
WKFSK_init();} open
          tooltip {Nav FSK Stop bits} xywh {391 177 78 23} box DOWN_BOX color 7 align 4 when 1
          code0 {o->add("2|1.5");}
          code1 {o->index(progStatus.WKFSK_stopbits);}
          class Fl_ListBox
        } {}
        Fl_Group sel_WKFSK_ptt {
          label {FSK port}
          callback {progStatus.WKFSK_ptt = o->index();
WKFSK_init();} open
          tooltip {NavWinkey PTT} xywh {391 206 78 23} box DOWN_BOX color 7 align 4 when 1
          code0 {o->add("On PTT|On KEY");}
          code1 {o->index(progStatus.WKFSK_ptt);}
          class Fl_ListBox
        } {}
        Fl_Group sel_WKFSK_polarity {
          label {Mark Polarity}
          callback {progStatus.WKFSK_polarity = o->index();
WKFSK_init();} open
          tooltip {Nav FSK MARK Polarity} xywh {391 236 78 23} box DOWN_BOX color 7 align 4 when 1
          code0 {o->add("Normal|Reverse");}
          code1 {o->index(progStatus.WKFSK_polarity);}
          class Fl_ListBox
        } {}
        Fl_Group sel_WKFSK_sidetone {
          label Sidetone
          callback {progStatus.WKFSK_sidetone = o->index();
WKFSK_init();} open
          tooltip {Nav FSK side tone} xywh {391 265 78 23} box DOWN_BOX color 7 align 4 when 1
          code0 {o->add("Off|On");}
          code1 {o->index(progStatus.WKFSK_sidetone);}
          class Fl_ListBox
        } {}
        Fl_Group sel_WKFSK_auto_crlf {
          label {Auto CRLF}
          callback {progStatus.WKFSK_auto_crlf = o->index();
WKFSK_init();} open
          tooltip {Nav FSK side tone} xywh {391 295 78 23} box DOWN_BOX color 7 align 4 when 1
          code0 {o->add("Off|On");}
          code1 {o->index(progStatus.WKFSK_auto_crlf);}
          class Fl_ListBox
        } {}
        Fl_Group sel_WKFSK_diddle {
          label Diddle
          callback {progStatus.WKFSK_diddle = o->index();
WKFSK_init();} open
          tooltip {Diddle On/OFF} xywh {581 148 78 23} box DOWN_BOX color 7 align 4 when 1
          code0 {o->add("Off|On");}
          code1 {o->index(progStatus.WKFSK_diddle);}
          class Fl_ListBox
        } {}
        Fl_Group sel_WKFSK_diddle_char {
          label {Diddle char}
          callback {progStatus.WKFSK_diddle_char = o->index();
WKFSK_init();} open
          tooltip {Diddle character} xywh {581 177 78 23} box DOWN_BOX color 7 align 4 when 1
          code0 {o->add("BLANK|LTRS");}
          code1 {o->index(progStatus.WKFSK_diddle_char);}
          class Fl_ListBox
        } {}
        Fl_Group sel_WKFSK_usos {
          label USOS
          callback {progStatus.WKFSK_usos = o->index();
WKFSK_init();} open
          tooltip {Unshift on space} xywh {581 206 78 23} box DOWN_BOX color 7 align 4 when 1
          code0 {o->add("Off|On");}
          code1 {o->index(progStatus.WKFSK_usos);}
          class Fl_ListBox
        } {}
        Fl_Group sel_WKFSK_monitor {
          label Echo
          callback {progStatus.WKFSK_monitor = o->index();
WKFSK_init();} open
          tooltip {Unshift on space} xywh {581 236 78 23} box DOWN_BOX color 7 align 4 when 1
          code0 {o->add("Off|On");}
          code1 {o->index(progStatus.WKFSK_monitor);}
          class Fl_ListBox
        } {}
      }
    }
    Fl_Group {} {
      label {Modem/Thor}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Modem/Thor"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Modem/Thor"));}
    } {
      Fl_Group {} {open
        xywh {262 40 490 270} box ENGRAVED_FRAME
      } {
        Fl_Input txtTHORSecondary {
          label {Secondary Text}
          callback {progdefaults.THORsecText = o->value();
progdefaults.changed = true;}
          tooltip {Text to send during keyboard idle times} xywh {291 67 430 40} type Multiline align 5 when 1
          code0 {txtTHORSecondary->labelsize(FL_NORMAL_SIZE);}
          class Fl_Input2
        }
        Fl_Check_Button valTHOR_FILTER {
          label Filtering
          callback {progdefaults.THOR_FILTER = o->value();
resetTHOR();
progdefaults.changed = true;}
          tooltip {Enable DSP prior to decoder} xywh {291 121 80 20} down_box DOWN_BOX value 1
          code0 {o->value(progdefaults.THOR_FILTER);}
        }
        Fl_Counter valTHOR_BW {
          label {Filter bandwidth factor}
          callback {progdefaults.THOR_BW = o->value();
resetTHOR();
progdefaults.changed = true;}
          tooltip {Filter bandwidth relative to signal width} xywh {436 121 63 20} type Simple align 8 minimum 1 maximum 2 value 1.5
          code0 {o->value(progdefaults.THOR_BW);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Counter2
        }
        Fl_Value_Slider valThorCWI {
          label {CWI threshold}
          callback {progdefaults.ThorCWI = o->value();
progdefaults.changed = true;}
          tooltip {CWI detection and suppression} xywh {291 174 260 20} type Horizontal align 1 textsize 14
          code0 {o->value(progdefaults.ThorCWI);}
          code1 {o->labelsize(FL_NORMAL_SIZE); o->textsize(FL_NORMAL_SIZE);}
          class Fl_Value_Slider2
        }
        Fl_Check_Button valTHOR_PREAMBLE {
          label {Preamble Detection}
          callback {progdefaults.THOR_PREAMBLE = o->value();
progdefaults.changed = true;}
          tooltip {Detect the THOR preamble
Clear the Rx pipeline} xywh {291 216 200 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.THOR_PREAMBLE);}
        }
        Fl_Check_Button valTHOR_SOFTSYMBOLS {
          label {Soft-symbol decoding}
          callback {progdefaults.THOR_SOFTSYMBOLS = o->value();
progdefaults.changed = true;}
          tooltip {Use soft-decision decoding for symbol detection
Assists soft-bit decoding} xywh {291 246 190 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.THOR_SOFTSYMBOLS);}
        }
        Fl_Check_Button valTHOR_SOFTBITS {
          label {Soft-bit decoding}
          callback {progdefaults.THOR_SOFTBITS = o->value();
progdefaults.changed = true;}
          tooltip {Use soft-bit viterbi decoding for better Forward Error Correction
Works best with soft-symbol decoding enabled} xywh {291 276 170 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.THOR_SOFTBITS);}
        }
        Fl_Counter valTHOR_PATHS {
          label {Paths (hidden)}
          callback {progdefaults.THOR_PATHS = (int)o->value();
progdefaults.changed = true;}
          xywh {638 265 75 21} type Simple align 1 minimum 4 maximum 8 step 1 value 5
          code0 {o->value(progdefaults.THOR_PATHS);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          code2 {o->hide();}
          class Fl_Counter2
        }
      }
    }
    Fl_Group {} {
      label {Modem/Navtex}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Modem/Navtex"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Modem/Navtex"));}
    } {
      Fl_Check_Button btnNvtxAdifLog {
        label {Log Navtex messages to Adif file}
        callback {progdefaults.NVTX_AdifLog=o->value();
progdefaults.changed = true;}
        xywh {316 84 235 30} down_box DOWN_BOX
        code0 {o->value(progdefaults.NVTX_AdifLog);}
      }
      Fl_Check_Button btnNvtxKmlLog {
        label {Log Navtex messages to KML}
        callback {progdefaults.NVTX_KmlLog=o->value();
progdefaults.changed = true;}
        tooltip {Logs messages to Keyhole Markup Language (Google Earth, Marble, Gaia, etc...)} xywh {315 130 270 30} down_box DOWN_BOX
        code0 {o->value(progdefaults.NVTX_KmlLog);}
      }
    }
    Fl_Group {} {
      label {Modem/Wefax}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Modem/Wefax"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Modem/Wefax"));}
      code3 {tab_tree->close(_("Modem"));}
    } {
      Fl_Counter cntrWEFAX_Shift {
        label {Frequency shift}
        callback {progdefaults.WEFAX_Shift=o->value();
progdefaults.changed = true;}
        tooltip {Frequency shift of WEFAX signal
Nominal 800 Hz} xywh {262 50 150 24} align 1 minimum 750 maximum 900 step 10 value 800
        code0 {o->value(progdefaults.WEFAX_Shift);}
        code1 {o->lstep(100.0);}
      }
      Fl_Counter cntrWEFAX_Center {
        label {Center freq}
        callback {progdefaults.WEFAX_Center=o->value();
progdefaults.changed = true;}
        tooltip {Center of WEFAX signal
Nominal 1900 Hz} xywh {262 99 150 24} align 1 minimum 1000 maximum 2000 step 10 value 1900
        code0 {o->value(progdefaults.WEFAX_Center);}
        code1 {o->lstep(100.0);}
      }
      Fl_Counter cntrWEFAX_MaxRows {
        label {Max Image Rows}
        callback {progdefaults.WEFAX_MaxRows=o->value();
progdefaults.changed = true;}
        tooltip {Force save split image} xywh {588 50 150 24} align 1 minimum 1000 maximum 10000 step 100 value 1500
        code0 {o->value(progdefaults.WEFAX_MaxRows);}
        code1 {o->lstep(1000.0);}
      }
      Fl_Input btnWefaxSaveDir {
        label {Fax images destination directory}
        callback {progdefaults.wefax_save_dir=o->value();
progdefaults.changed = true;}
        tooltip {Store images in this directory} xywh {216 267 470 24} align 5
        code0 {o->value(progdefaults.wefax_save_dir.c_str());}
      }
      Fl_Button btnSelectFaxDestDir {
        label {Directory...}
        callback {Fl_File_Chooser *fc = new Fl_File_Chooser(".",NULL,Fl_File_Chooser::DIRECTORY,"Input File");
fc->callback(WefaxDestDirSet);
fc->show();}
        tooltip {Select destination directory} xywh {695 267 90 24}
      }
      Fl_Check_Button btnWefaxAdifLog {
        label {Log Wefax messages to Adif file}
        callback {progdefaults.WEFAX_AdifLog=o->value();
progdefaults.changed = true;}
        tooltip {Sent and received faxes are logged to Adif file.} xywh {216 298 235 30} down_box DOWN_BOX
        code0 {o->value(progdefaults.WEFAX_AdifLog);}
      }
      Fl_Choice wefax_choice_rx_filter {
        label Filter
        callback {progdefaults.wefax_filter=o->value();} open
        xywh {302 137 110 24} down_box BORDER_BOX
        code0 {o->add("Narrow|Medium|Wide");}
        code1 {o->value(progdefaults.wefax_filter < 3 ? progdefaults.wefax_filter : 0);}
      } {}
      Fl_Counter auto_after_nrows {
        label {Enable Auto-align after}
        callback {progdefaults.wefax_auto_after = o->value();
progdefaults.changed = true;}
        xywh {588 81 150 24} align 4 minimum 5 maximum 100 step 5 value 50
        code0 {o->value(progdefaults.wefax_auto_after);}
        code1 {o->lstep(50);}
      }
      Fl_Counter align_stop_after {
        label {Stop Auto-align after}
        callback {progdefaults.wefax_align_stop = o->value();
progdefaults.changed = true;}
        xywh {588 113 150 24} align 4 minimum 50 maximum 500 step 5 value 500
        code0 {o->value(progdefaults.wefax_align_stop);}
        code1 {o->lstep(50);}
      }
      Fl_Counter align_every_nrows {
        label {Auto-align every}
        callback {progdefaults.wefax_align_rows = o->value();
if (auto_after_nrows->minimum() < progdefaults.wefax_align_rows) {
  auto_after_nrows->minimum(progdefaults.wefax_align_rows);
  auto_after_nrows->value(progdefaults.wefax_align_rows);
}
progdefaults.changed = true;}
        xywh {624 145 80 24} type Simple align 4 minimum 5 maximum 100 step 5 value 25
        code0 {o->value(progdefaults.wefax_align_rows);}
      }
      Fl_Box {} {
        label rows
        xywh {743 81 42 22} align 20
      }
      Fl_Box {} {
        label rows
        xywh {743 113 42 22} align 20
      }
      Fl_Box {} {
        label rows
        xywh {706 146 42 22} align 20
      }
      Fl_Counter wefax_correlation {
        label Correlation
        callback {progdefaults.wefax_correlation = o->value();
progdefaults.changed = true;}
        tooltip {Row-to-row correlation
Used to detect presence of WEFAX signal
Lower: more false detections} xywh {589 179 150 24} align 4 minimum 0.01 maximum 0.1 step 0.001 value 0.05
        code0 {o->value(progdefaults.wefax_correlation);}
        code1 {o->lstep (0.01);}
      }
      Fl_Counter cntr_correlation_rows {
        label {\# Correlation rows}
        callback {progdefaults.wefax_correlation_rows = o->value();
progdefaults.changed = true;}
        tooltip {Compute correlation factor over this \# rows} xywh {624 213 80 24} type Simple align 4 minimum 2 maximum 50 step 1 value 10
        code0 {o->value(progdefaults.wefax_correlation_rows);}
      }
    }
    Fl_Group {} {
      label {Misc/Autostart}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Misc/Autostart"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Misc/Autostart"));}
    } {
      Fl_Input txt_auto_flrig_pathname {
        label {flrig:}
        callback {progdefaults.auto_flrig_pathname = o->value();
progdefaults.changed = true;}
        tooltip {Enter full path-filename for flrig} xywh {267 56 310 24} when 1
        code0 {o->value(progdefaults.auto_flrig_pathname.c_str());}
        class Fl_Input2
      }
      Fl_Button btn_select_flrig {
        label Locate
        callback {std::string str = select_binary_pathname(progdefaults.auto_flrig_pathname);
txt_auto_flrig_pathname->value(str.c_str());
progdefaults.auto_flrig_pathname = str;
progdefaults.changed = true;}
        tooltip {Locate flrig executable} xywh {599 56 70 24}
      }
      Fl_Input txt_auto_flamp_pathname {
        label {flamp:}
        callback {progdefaults.auto_flamp_pathname = o->value();
progdefaults.changed = true;}
        tooltip {Enter full path-filename for flamp} xywh {267 94 310 24} when 1
        code0 {o->value(progdefaults.auto_flamp_pathname.c_str());}
        class Fl_Input2
      }
      Fl_Button btn_select_auto_flamp {
        label Locate
        callback {std::string str = select_binary_pathname(progdefaults.auto_flamp_pathname);
txt_auto_flamp_pathname->value(str.c_str());
progdefaults.auto_flamp_pathname = str;
progdefaults.changed = true;}
        tooltip {Locate flamp executable} xywh {599 94 70 24}
      }
      Fl_Input txt_auto_flnet_pathname {
        label {flnet:}
        callback {progdefaults.auto_flnet_pathname = o->value();
progdefaults.changed = true;}
        tooltip {Enter full path-filename for flnet} xywh {267 132 310 24} when 1
        code0 {o->value(progdefaults.auto_flnet_pathname.c_str());}
        class Fl_Input2
      }
      Fl_Button btn_select_auto_flnet {
        label Locate
        callback {std::string str = select_binary_pathname(progdefaults.auto_flnet_pathname);
txt_auto_flnet_pathname->value(str.c_str());
progdefaults.auto_flnet_pathname = str;
progdefaults.changed = true;}
        tooltip {Locate flnet executable} xywh {599 132 70 24}
      }
      Fl_Input txt_auto_fllog_pathname {
        label {fllog:}
        callback {progdefaults.auto_fllog_pathname = o->value();
progdefaults.changed = true;}
        tooltip {Enter full path-filename for fllog} xywh {267 171 310 24} when 1
        code0 {o->value(progdefaults.auto_fllog_pathname.c_str());}
        class Fl_Input2
      }
      Fl_Button btn_select_fllog {
        label Locate
        callback {std::string str = select_binary_pathname(progdefaults.auto_fllog_pathname);
txt_auto_fllog_pathname->value(str.c_str());
progdefaults.auto_fllog_pathname = str;
progdefaults.changed = true;}
        tooltip {Locate fllog executable} xywh {599 171 70 24}
      }
      Fl_Input txt_auto_prog1_pathname {
        label {Prog 1:}
        callback {progdefaults.auto_prog1_pathname = o->value();
progdefaults.changed = true;}
        tooltip {Enter full path-filename for external program} xywh {267 209 310 24} when 1
        code0 {o->value(progdefaults.auto_prog1_pathname.c_str());}
        class Fl_Input2
      }
      Fl_Button btn_select_prog1 {
        label Locate
        callback {std::string str = select_binary_pathname(progdefaults.auto_prog1_pathname);
txt_auto_prog1_pathname->value(str.c_str());
progdefaults.auto_prog1_pathname = str;
progdefaults.changed = true;}
        tooltip {Locate program \#1 executable} xywh {599 209 70 24}
      }
      Fl_Input txt_auto_prog2_pathname {
        label {Prog 2:}
        callback {progdefaults.auto_prog2_pathname = o->value();
progdefaults.changed = true;}
        tooltip {Enter full path-filename for external program} xywh {267 247 310 24} when 1
        code0 {o->value(progdefaults.auto_prog2_pathname.c_str());}
        class Fl_Input2
      }
      Fl_Button btn_select_prog2 {
        label Locate
        callback {std::string str = select_binary_pathname(progdefaults.auto_prog2_pathname);
txt_auto_prog2_pathname->value(str.c_str());
progdefaults.auto_prog2_pathname = str;
progdefaults.changed = true;}
        tooltip {Locate program \#2 executable} xywh {599 247 70 24}
      }
      Fl_Input txt_auto_prog3_pathname {
        label {Prog 3:}
        callback {progdefaults.auto_prog3_pathname = o->value();
progdefaults.changed = true;}
        tooltip {Enter full path-filename for external program} xywh {267 286 310 24} when 1
        code0 {o->value(progdefaults.auto_prog3_pathname.c_str());}
        class Fl_Input2
      }
      Fl_Button btn_select_prog3 {
        label Locate
        callback {std::string str = select_binary_pathname(progdefaults.auto_prog3_pathname);
txt_auto_prog3_pathname->value(str.c_str());
progdefaults.auto_prog3_pathname = str;
progdefaults.changed = true;}
        tooltip {Locate program \#3 executable} xywh {599 286 70 24}
      }
      Fl_Check_Button btn_flrig_auto_enable {
        label {Enable
-}
        callback {progdefaults.flrig_auto_enable = o->value();
progdefaults.changed = true;}
        tooltip {Enable this entry when fldigi first starts} xywh {679 60 19 15} down_box DOWN_BOX align 1
        code0 {o->value(progdefaults.flrig_auto_enable);}
      }
      Fl_Check_Button btn_flamp_auto_enable {
        callback {progdefaults.flamp_auto_enable = o->value();
progdefaults.changed = true;}
        tooltip {Enable this entry when fldigi first starts} xywh {679 98 23 15} down_box DOWN_BOX
        code0 {o->value(progdefaults.flamp_auto_enable);}
      }
      Fl_Check_Button btn_flnet_auto_enable {
        callback {progdefaults.flnet_auto_enable = o->value();
progdefaults.changed = true;}
        tooltip {Enable this entry when fldigi first starts} xywh {679 136 23 15} down_box DOWN_BOX
        code0 {o->value(progdefaults.flnet_auto_enable);}
      }
      Fl_Check_Button btn_fllog_auto_enable {
        callback {progdefaults.fllog_auto_enable = o->value();
progdefaults.changed = true;}
        tooltip {Enable this entry when fldigi first starts} xywh {679 175 23 15} down_box DOWN_BOX
        code0 {o->value(progdefaults.fllog_auto_enable);}
      }
      Fl_Check_Button btn_prog1_auto_enable {
        callback {progdefaults.prog1_auto_enable = o->value();
progdefaults.changed = true;}
        tooltip {Enable this entry when fldigi first starts} xywh {679 213 23 15} down_box DOWN_BOX
        code0 {o->value(progdefaults.prog1_auto_enable);}
      }
      Fl_Check_Button btn_prog2_auto_enable {
        callback {progdefaults.prog2_auto_enable = o->value();
progdefaults.changed = true;}
        tooltip {Enable this entry when fldigi first starts} xywh {679 251 23 15} down_box DOWN_BOX
        code0 {o->value(progdefaults.prog2_auto_enable);}
      }
      Fl_Check_Button btn_prog3_auto_enable {
        callback {progdefaults.prog3_auto_enable = o->value();
progdefaults.changed = true;}
        tooltip {Enable this entry when fldigi first starts} xywh {679 290 23 15} down_box DOWN_BOX
        code0 {o->value(progdefaults.prog3_auto_enable);}
      }
      Fl_Button btn_test_flrig {
        label Test
        callback {start_process(progdefaults.auto_flrig_pathname);}
        tooltip {Start flrig} xywh {709 56 70 24}
      }
      Fl_Button btn_test_flamp {
        label Test
        callback {start_process(progdefaults.auto_flamp_pathname);}
        tooltip {Start flamp} xywh {709 94 70 24}
      }
      Fl_Button btn_test_flnet {
        label Test
        callback {start_process(progdefaults.auto_flnet_pathname);}
        tooltip {Start flnet} xywh {709 132 70 24}
      }
      Fl_Button btn_test_fllog {
        label Test
        callback {start_process(progdefaults.auto_fllog_pathname);}
        tooltip {Start fllog} xywh {709 171 70 24}
      }
      Fl_Button btn_test_prog1 {
        label Test
        callback {start_process(progdefaults.auto_prog1_pathname);}
        tooltip {Start prog1} xywh {709 209 70 24}
      }
      Fl_Button btn_test_prog2 {
        label Test
        callback {start_process(progdefaults.auto_prog2_pathname);}
        tooltip {Start prog2} xywh {709 247 70 24}
      }
      Fl_Button btn_test_prog3 {
        label Test
        callback {start_process(progdefaults.auto_prog3_pathname);}
        tooltip {Start prog3} xywh {709 286 70 24}
      }
    }
    Fl_Group {} {
      label {Misc/CPU}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Misc/CPU"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Misc/CPU"));}
    } {
      Fl_Check_Button chkSlowCpu {
        label {Slow CPU (less than 700MHz)}
        callback {progdefaults.slowcpu = o->value();
progdefaults.changed = true;}
        tooltip {Enable if you're computer does not decode properly} xywh {305 65 225 20} down_box DOWN_BOX
        code0 {o->value(progdefaults.slowcpu);}
      }
    }
    Fl_Group {} {
      label {TCP-IP sessions}
      callback {btnDisable_p2p_io_widgets->value(1);}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Misc/TCP-IP sessions"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Misc/TCP-IP sessions"));}
    } {
      Fl_Group {} {open
        xywh {205 18 588 102} box ENGRAVED_BOX align 21
      } {
        Fl_Check_Button btnDisable_p2p_io_widgets {
          label Lock user_data_type long
          callback {progStatus.ip_lock = o->value();
if(o->value())
	disable_config_p2p_io_widgets();
else
	enable_config_p2p_io_widgets();
kiss_io_set_button_state(0);}
          tooltip {Allow/Disallow Changes} xywh {211 96 85 20} down_box DOWN_BOX
          code0 {o->value(progStatus.ip_lock);}
        }
        Fl_Check_Button btnEnable_arq {
          label {Enable ARQ}
          callback {if(o->value()) {
	enable_arq();
}

progdefaults.changed = true;}
          tooltip {Used For PSKMail and FLDIGI Suite of Programs} xywh {295 96 115 20} type Radio down_box DOWN_BOX
          code0 {if(progStatus.data_io_enabled == ARQ_IO) o->value(true);}
          code1 {progStatus.ip_lock ? o->deactivate() : o->activate();}
        }
        Fl_Check_Button btnEnable_kiss {
          label {Enable KISS}
          callback {if(o->value()) {
	enable_kiss();
}
progdefaults.changed = true;}
          tooltip {Used for BPQ32} xywh {420 96 115 20} type Radio down_box DOWN_BOX
          code0 {if(progStatus.data_io_enabled == KISS_IO) o->value(true);}
          code1 {progStatus.ip_lock ? o->deactivate() : o->activate();}
        }
        Fl_Box {} {
          label {Enable ARQ for programs that support TCP and FLDIGI ARQ protocol.
Enable KISS for programs that supports TCP/UDP and TNC-2 KISS protocol.
Only one interface (ARQ/KISS) can be active at any given time.
KISS/ARQ/XML Addr/Port changes require program restart.}
          xywh {207 21 582 72}
        }
      }
      Fl_Group {} {
        label KISS open
        xywh {205 122 588 80} box ENGRAVED_FRAME align 21
      } {
        Fl_Input txtKiss_ip_address {
          label Addr
          callback {progStatus.kiss_address = o->value();
progdefaults.kiss_address = o->value();
progdefaults.changed = true;}
          tooltip {IP Address for KISS interface
IP Address format: nnn.nnn.nnn.nnn
or name: i.e. localhost} xywh {254 175 230 22} align 8 when 1
          code0 {txtKiss_ip_address->labelsize(FL_NORMAL_SIZE);}
          code1 {o->value(progdefaults.kiss_address.c_str());}
          code2 {progStatus.ip_lock ? o->deactivate() : o->activate();}
          class Fl_Input2
        }
        Fl_Input txtKiss_ip_io_port_no {
          label {I/O}
          callback {progStatus.kiss_io_port = o->value();
progdefaults.kiss_io_port = o->value();
progdefaults.changed = true;}
          tooltip {IP Address Port Number} xywh {529 175 55 22} align 8 when 1
          code0 {txtKiss_ip_io_port_no->labelsize(FL_NORMAL_SIZE);}
          code1 {o->value(progdefaults.kiss_io_port.c_str());}
          code2 {progStatus.ip_lock ? o->deactivate() : o->activate();}
          class Fl_Input2
        }
        Fl_Input txtKiss_ip_out_port_no {
          label O
          callback {progStatus.kiss_out_port = o->value();
progdefaults.kiss_out_port = o->value();
progdefaults.changed = true;}
          tooltip {Output port number when same IP address used} xywh {621 175 55 22} align 8 when 1
          code0 {txtKiss_ip_out_port_no->labelsize(FL_NORMAL_SIZE);}
          code1 {o->value(progdefaults.kiss_out_port.c_str());}
          code2 {progStatus.ip_lock ? o->deactivate() : o->activate();}
          class Fl_Input2
        }
        Fl_Check_Button btnEnable_dual_port {
          label DP
          callback {if(o->value()) {
	progStatus.kiss_dual_port_enabled = true;
	progdefaults.kiss_dual_port_enabled = true;
}
else {
	progStatus.kiss_dual_port_enabled = false;
	progdefaults.kiss_dual_port_enabled = false;
}

progdefaults.changed = true;}
          tooltip {Enable when both programs are using the same IP address} xywh {330 126 140 20} down_box DOWN_BOX
          code0 {if(progdefaults.kiss_dual_port_enabled) o->value(true); else o->value(false);}
          code1 {progStatus.ip_lock ? o->deactivate() : o->activate();}
        }
        Fl_Button btn_restart_kiss {
          label Restart
          callback {//restart_kiss_server();}
          xywh {705 149 82 22}
          code0 {progStatus.ip_lock ? o->deactivate() : o->activate();}
        }
        Fl_Button btn_connect_kiss_io {
          label Start
          callback {connect_to_kiss_io(true);}
          tooltip {Return KISS TCP IO connection to a Listening state} xywh {617 149 82 22}
          code0 {(progStatus.ip_lock || !progdefaults.kiss_tcp_io) ? o->deactivate() : o->activate();}
        }
        Fl_Button btnDefault_kiss_ip {
          label Default
          callback {set_ip_to_default(KISS_IO);
progdefaults.changed = true;}
          tooltip {Returns IP Address and port
number to the default value.} xywh {705 175 82 22}
          code0 {progStatus.ip_lock ? o->deactivate() : o->activate();}
        }
        Fl_Check_Button btnKissTCPIO {
          label {TCP/IP}
          callback {if(o->value()) {
	progStatus.kiss_tcp_io = true;
	progdefaults.kiss_tcp_io = true;
} else {
	progStatus.kiss_tcp_io = false;
	progdefaults.kiss_tcp_io = false;
}
kiss_io_set_button_state(0);
progdefaults.changed = true;}
          tooltip {Check to enable TCP/IP IO Connection} xywh {416 126 70 20} down_box DOWN_BOX
          code0 {if(progdefaults.kiss_tcp_io) o->value(true); else o->value(false);}
          code1 {progStatus.ip_lock ? o->deactivate() : o->activate();}
        }
        Fl_Check_Button btnKissUDPIO {
          label {UDP/IP}
          callback {if(o->value()) {
	progStatus.kiss_tcp_io = false;
	progdefaults.kiss_tcp_io = false;
} else {
	progStatus.kiss_tcp_io = true;
	progdefaults.kiss_tcp_io = true;
}

kiss_io_set_button_state(0);
progdefaults.changed = true;}
          tooltip {Check to enable UDP/IP IO} xywh {254 126 70 20} down_box DOWN_BOX
          code0 {if(progdefaults.kiss_tcp_io) o->value(true); else o->value(false);}
          code1 {progStatus.ip_lock ? o->deactivate() : o->activate();}
        }
        Fl_Check_Button btnKissTCPListen {
          label {Listen / Bind}
          callback {if(o->value()) {
	progStatus.kiss_tcp_listen = true;
	progdefaults.kiss_tcp_listen = true;
} else {
	progStatus.kiss_tcp_listen = false;
	progdefaults.kiss_tcp_listen = false;
}

progdefaults.changed = true;}
          tooltip {Monitor for TCP connection.} xywh {500 126 95 20} down_box DOWN_BOX
          code0 {if(progStatus.kiss_tcp_listen) o->value(true); else o->value(false);}
          code1 {progStatus.ip_lock ? o->deactivate() : o->activate();}
        }
        Fl_Check_Button btnEnable_7bit_modem_inhibit {
          label {Inhibit 7bit Modem}
          callback {if(o->value()) {
	progStatus.kiss_io_modem_change_inhibit = true;
	progdefaults.kiss_io_modem_change_inhibit = true;
}
else {
	progStatus.kiss_io_modem_change_inhibit = false;
	progdefaults.kiss_io_modem_change_inhibit = false;
}

progdefaults.changed = true;}
          tooltip {Inhibit 7 bit modem change notice on user or RSID reception} xywh {254 149 140 20} down_box DOWN_BOX
          code0 {if(progdefaults.kiss_io_modem_change_inhibit) o->value(true); else o->value(false);}
          code1 {progStatus.ip_lock ? o->deactivate() : o->activate();}
        }
        Fl_Check_Button btnEnable_auto_connect {
          label {Auto Connect / Retry}
          callback {if(o->value()) {
	progdefaults.tcp_udp_auto_connect = true;
}
else {
	progdefaults.tcp_udp_auto_connect = false;
}

progdefaults.changed = true;}
          tooltip {Connect to host program on FLDIGI start up} xywh {416 149 155 20} down_box DOWN_BOX
          code0 {if(progdefaults.tcp_udp_auto_connect) o->value(true); else o->value(false);}
          code1 {progStatus.ip_lock ? o->deactivate() : o->activate();}
        }
        Fl_Check_Button btnEnable_ax25_decode {
          label {AX25 Decode}
          callback {if(o->value()) {
	progStatus.ax25_decode_enabled = true;
	progdefaults.ax25_decode_enabled = true;
}
else {
	progStatus.ax25_decode_enabled = false;
	progdefaults.ax25_decode_enabled = false;
}

progdefaults.changed = true;}
          tooltip {Decode AX25 Packets into human readable form} xywh {610 126 115 20} down_box DOWN_BOX
          code0 {if(progdefaults.ax25_decode_enabled) o->value(true); else o->value(false);}
          code1 {progStatus.ip_lock ? o->deactivate() : o->activate();}
        }
      }
      Fl_Group {} {
        label ARQ open
        xywh {205 203 588 35} box ENGRAVED_FRAME align 21
      } {
        Fl_Input txtArq_ip_address {
          label Addr
          callback {progdefaults.arq_address = o->value();
progdefaults.changed = true;}
          tooltip {IP Address for ARQ interface
IP Address format: nnn.nnn.nnn.nnn
or name: i.e. localhost} xywh {255 207 230 22} align 8 when 1
          code0 {o->labelsize(FL_NORMAL_SIZE);}
          code1 {o->value(progdefaults.arq_address.c_str());}
          code2 {progStatus.ip_lock ? o->deactivate() : o->activate();}
          class Fl_Input2
        }
        Fl_Input txtArq_ip_port_no {
          label Port
          callback {progdefaults.arq_port = o->value();
progdefaults.changed = true;}
          tooltip {IP Address Port Number} xywh {529 207 55 22} align 8 when 1
          code0 {o->labelsize(FL_NORMAL_SIZE);}
          code1 {o->value(progdefaults.arq_port.c_str());}
          code2 {progStatus.ip_lock ? o->deactivate() : o->activate();}
          class Fl_Input2
        }
        Fl_Button btnDefault_arq_ip {
          label Default
          callback {set_ip_to_default(ARQ_IO);
progdefaults.changed = true;}
          tooltip {Returns IP Address and port
number to the default value.} xywh {624 207 73 22}
          code0 {progStatus.ip_lock ? o->deactivate() : o->activate();}
        }
        Fl_Button btn_restart_arq {
          label Restart
          callback {//arq_restart();}
          xywh {704 207 82 22}
          code0 {progStatus.ip_lock ? o->deactivate() : o->activate();}
        }
      }
      Fl_Group {} {
        label XML open
        xywh {205 239 588 35} box ENGRAVED_FRAME align 21
      } {
        Fl_Button btnDefault_xmlrpc_ip {
          label Default
          callback {set_ip_to_default(XMLRPC_IO);
progdefaults.changed = true;}
          tooltip {Returns IP Address and port
number to the default value.} xywh {624 243 73 22}
          code0 {progStatus.ip_lock ? o->deactivate() : o->activate();}
        }
        Fl_Input txtXmlrpc_ip_address {
          label Addr
          callback {progdefaults.xmlrpc_address = o->value();
progdefaults.changed = true;}
          tooltip {IP Address for XMLRPC interface
IP Address format: nnn.nnn.nnn.nnn
or name: i.e. localhost} xywh {255 243 230 22} align 8 when 1
          code0 {o->labelsize(FL_NORMAL_SIZE);}
          code1 {o->value(progdefaults.xmlrpc_address.c_str());}
          code2 {progStatus.ip_lock ? o->deactivate() : o->activate();}
          class Fl_Input2
        }
        Fl_Input txtXmlrpc_ip_port_no {
          label Port
          callback {progdefaults.xmlrpc_port = o->value();
progdefaults.changed = true;}
          tooltip {IP Address Port Number} xywh {529 243 55 22} align 8 when 1
          code0 {o->labelsize(FL_NORMAL_SIZE);}
          code1 {o->value(progdefaults.xmlrpc_port.c_str());}
          code2 {progStatus.ip_lock ? o->deactivate() : o->activate();}
          class Fl_Input2
        }
        Fl_Button btn_restart_xml {
          label Restart
          callback {//restart_xml_server();}
          xywh {704 243 82 22}
          code0 {progStatus.ip_lock ? o->deactivate() : o->activate();}
        }
      }
      Fl_Group {} {
        label flrig open
        xywh {205 277 588 30} box ENGRAVED_FRAME align 21
      } {
        Fl_Button btnDefault_flrig_ip {
          label Default
          callback {set_ip_to_default(FLRIG_IO);
progdefaults.changed = true;}
          tooltip {Returns IP Address and port
number to the default value.} xywh {624 282 73 25}
          code0 {progStatus.ip_lock ? o->deactivate() : o->activate();}
        }
        Fl_Input txt_flrig_ip_address {
          label Addr
          callback {progdefaults.flrig_ip_address = o->value();
progdefaults.changed = true;}
          tooltip {IP Address for flrig interface
IP Address format: nnn.nnn.nnn.nnn
or name: i.e. localhost} xywh {255 282 230 22} align 8 when 1
          code0 {o->labelsize(FL_NORMAL_SIZE);}
          code1 {o->value(progdefaults.flrig_ip_address.c_str());}
          code2 {progStatus.ip_lock ? o->deactivate() : o->activate();}
          class Fl_Input2
        }
        Fl_Input txt_flrig_ip_port {
          label Port
          callback {progdefaults.flrig_ip_port = o->value();
progdefaults.changed = true;}
          tooltip {IP Address Port Number} xywh {529 282 55 22} align 8 when 1
          code0 {o->labelsize(FL_NORMAL_SIZE);}
          code1 {o->value(progdefaults.flrig_ip_port.c_str());}
          code2 {progStatus.ip_lock ? o->deactivate() : o->activate();}
          class Fl_Input2
        }
        Fl_Button btn_reconnect_flrig_server {
          label Reconnect
          callback {reconnect_to_flrig();}
          xywh {704 282 82 22}
          code0 {\#include "rigsupport.h"}
          code1 {progStatus.ip_lock ? o->deactivate() : o->activate();}
        }
      }
      Fl_Group {} {
        label fllog open
        xywh {205 308 588 36} box ENGRAVED_FRAME align 21
      } {
        Fl_Input txt_fllog_ip_address {
          label Addr
          callback {progdefaults.xmllog_address = o->value();}
          tooltip {IP Address for fllog interface
IP Address format: nnn.nnn.nnn.nnn
or name: i.e. localhost} xywh {255 313 230 22} align 8
          code0 {o->value(progdefaults.xmllog_address.c_str());}
          code1 {progStatus.ip_lock ? o->deactivate() : o->activate();}
        }
        Fl_Input txt_fllog_ip_port {
          label Port
          callback {progdefaults.xmllog_port = o->value();}
          tooltip {IP Address Port Number} xywh {529 313 55 22} align 8
          code0 {o->value(progdefaults.xmllog_port.c_str());}
          code1 {progStatus.ip_lock ? o->deactivate() : o->activate();}
        }
        Fl_Button btn_reconnect_log_server {
          label Reconnect
          callback {progdefaults.xml_logbook = true;
progdefaults.changed = true;
connect_to_log_server();}
          xywh {704 313 82 22}
          code0 {progStatus.ip_lock ? o->deactivate() : o->activate();}
        }
        Fl_Button btnDefault_fllog_ip {
          label Default
          callback {set_ip_to_default(FLLOG_IO);
progdefaults.changed = true;}
          tooltip {Returns IP Address and port
number to the default value.} xywh {624 313 73 22}
          code0 {progStatus.ip_lock ? o->deactivate() : o->activate();}
        }
      }
    }
    Fl_Group {} {
      label {NBEMS interface}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Misc/NBEMS interface"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Misc/NBEMS interface"));}
    } {
      Fl_Group {} {
        label {NBEMS data file interface} open
        xywh {251 35 500 75} box ENGRAVED_FRAME align 21
      } {
        Fl_Check_Button chkAutoExtract {
          label Enable
          callback {progdefaults.autoextract = o->value();
progdefaults.changed = true;}
          tooltip {Extract files for use with external "wrap / flmsg" program} xywh {305 66 75 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.autoextract);}
        }
        Fl_Check_Button chk_open_wrap_folder {
          label {Open message folder}
          callback {progdefaults.open_nbems_folder = o->value();
progdefaults.changed = true;}
          tooltip {Opens NBEMS file folder upon successful capture} xywh {511 66 146 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.open_nbems_folder);}
        }
      }
      Fl_Group {} {
        label {Reception of flmsg files} open
        xywh {251 111 500 199} box ENGRAVED_FRAME align 21
      } {
        Fl_Check_Button chk_open_flmsg {
          label {Open with flmsg}
          callback {progdefaults.open_flmsg = o->value();
progdefaults.changed = true;}
          tooltip {Open message with flmsg} xywh {305 211 136 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.open_flmsg);}
        }
        Fl_Check_Button chk_open_flmsg_print {
          label {Open in browser}
          callback {progdefaults.open_flmsg_print = o->value();
progdefaults.changed = true;}
          tooltip {Open file with default browser} xywh {511 211 136 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.open_flmsg_print);}
        }
        Fl_Input txt_flmsg_pathname {
          label {flmsg:}
          callback {progdefaults.flmsg_pathname = o->value();
progdefaults.changed = true;}
          tooltip {Enter full path-filename for flmsg} xywh {305 241 330 24} when 1
          code0 {o->value(progdefaults.flmsg_pathname.c_str());}
          class Fl_Input2
        }
        Fl_Button btn_select_flmsg {
          label {Locate flmsg}
          callback {select_flmsg_pathname();}
          tooltip {Locate flmsg executable} xywh {642 241 100 24}
        }
        Fl_Value_Slider sldr_extract_timeout {
          label {Timeout (secs)}
          callback {progdefaults.extract_timeout=o->value();
progdefaults.changed=true;}
          tooltip {Extract times out after NN seconds of inactivity.} xywh {271 279 364 21} type {Horz Knob} color 54 selection_color 0 align 8 minimum 1 maximum 20 step 0.5 value 10 textsize 14
          code0 {o->value(progdefaults.extract_timeout);}
        }
        Fl_Group {} {
          label {Selection of transfer direct takes precedence
over all other flmsg reception settings} open
          xywh {256 130 490 76} box ENGRAVED_FRAME align 17
        } {
          Fl_Check_Button chk_transfer__to_open_flmsg {
            label {Transfer direct to executing flmsg}
            callback {progdefaults.flmsg_transfer_direct = o->value();
progdefaults.changed = true;}
            tooltip {Send data stream directly to executing flmsg} xywh {361 174 271 20} down_box DOWN_BOX
            code0 {o->value(progdefaults.flmsg_transfer_direct);}
          }
        }
      }
    }
    Fl_Group {} {
      label {Misc/Sweet Spot}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Misc/Sweet Spot"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Misc/Sweet Spot"));}
    } {
      Fl_Group {} {open
        xywh {253 70 490 75} box ENGRAVED_FRAME align 21
      } {
        Fl_Value_Input valCWsweetspot {
          label CW
          callback {progdefaults.CWsweetspot=o->value();
progdefaults.changed = true;}
          tooltip {Default CW tracking point} xywh {290 81 65 20} minimum 200 maximum 4000 step 1 value 1000
          code0 {o->value(progdefaults.CWsweetspot);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Value_Input2
        }
        Fl_Value_Input valRTTYsweetspot {
          label RTTY
          callback {progdefaults.RTTYsweetspot=o->value();
progdefaults.changed = true;}
          tooltip {Default RTTY tracking point} xywh {468 81 65 20} minimum 200 maximum 4000 step 1 value 1000
          code0 {o->value(progdefaults.RTTYsweetspot);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Value_Input2
        }
        Fl_Value_Input valPSKsweetspot {
          label {PSK et al.}
          callback {progdefaults.PSKsweetspot=o->value();
progdefaults.changed = true;}
          tooltip {Default for all other modems} xywh {668 81 65 20} minimum 200 maximum 4000 step 1 value 1000
          code0 {o->value(progdefaults.PSKsweetspot);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Value_Input2
        }
        Fl_Check_Button btnStartAtSweetSpot {
          label {Always start new modems at these frequencies}
          callback {progdefaults.StartAtSweetSpot = o->value();
progdefaults.changed = true;}
          tooltip {ON - start at default
OFF - keep current wf cursor position} xywh {263 111 348 20} down_box DOWN_BOX value 1
          code0 {o->value(progdefaults.StartAtSweetSpot);}
        }
      }
      Fl_Group {} {
        label {K3 A1A configuation} open
        xywh {253 150 490 60} box ENGRAVED_FRAME align 21
      } {
        Fl_Check_Button btnCWIsLSB {
          label {CW is LSB}
          callback {progdefaults.CWIsLSB=o->value();
progdefaults.changed=true;}
          tooltip {Select this for Elecraft K3
Other radios should not need it.} xywh {468 171 70 15} down_box DOWN_BOX
          code0 {o->value(progdefaults.CWIsLSB);}
        }
      }
    }
    Fl_Group {} {
      label {Misc/Rx text capture}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Misc/Rx text capture"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Misc/Rx text capture"));}
    } {
      Fl_Group grpTalker {
        label {Talker Socket (MS only)} open
        xywh {252 107 490 73} box ENGRAVED_FRAME align 21
      } {
        Fl_Light_Button btnConnectTalker {
          label Talker
          callback {if (o->value()) open_talker();
else close_talker();}
          xywh {278 127 74 20} selection_color 60
          code0 {extern void open_talker();}
          code1 {extern void close_talker();}
        }
        Fl_Box {} {
          label {Connect/disconnect to Talker socket server}
          xywh {357 127 345 20} align 20
        }
        Fl_Check_Button btn_auto_talk {
          label {Auto connect when fldigi opens (server must be up)}
          callback {progdefaults.auto_talk = o->value();}
          xywh {278 155 391 15} down_box DOWN_BOX
          code0 {o->value(progdefaults.auto_talk);}
        }
      }
      Fl_Group {} {
        label {Capture rx text to external file} open
        xywh {252 47 490 56} box ENGRAVED_FRAME align 21
      } {
        Fl_Check_Button chkRxStream {
          label {Enable rx text stream}
          callback {progdefaults.speak = o->value();
progdefaults.changed = true;}
          tooltip {Send rx text to file: textout.txt} xywh {278 74 175 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.speak);}
        }
      }
    }
    Fl_Group {} {
      label {Misc/PSK reporter}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Misc/PSK reporter"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Misc/PSK reporter"));}
    } {
      Fl_Check_Button btnPSKRepAuto {
        label {Automatically spot callsigns in decoded text}
        callback {progdefaults.pskrep_auto = o->value();
btnPSKRepInit->labelcolor(FL_RED);
btnPSKRepInit->redraw_label();
progdefaults.changed = true;}
        tooltip {Parse all incoming text} xywh {252 65 324 20} down_box DOWN_BOX
        code0 {btnPSKRepAuto->value(progdefaults.pskrep_auto);}
      }
      Fl_Check_Button btnPSKRepLog {
        label {Send reception report when logging a QSO}
        callback {progdefaults.pskrep_log = o->value();
btnPSKRepInit->labelcolor(FL_RED);
btnPSKRepInit->redraw_label();
progdefaults.changed = true;}
        tooltip {Send report only when QSO is logged} xywh {252 96 327 20} down_box DOWN_BOX
        code0 {btnPSKRepLog->value(progdefaults.pskrep_log);}
      }
      Fl_Check_Button btnPSKRepQRG {
        label {Report rig frequency (enable only if you have rig control!)}
        callback {progdefaults.pskrep_qrg = o->value();
progdefaults.changed = true;}
        tooltip {Include the transmit frequency} xywh {252 128 416 20} down_box DOWN_BOX
        code0 {btnPSKRepQRG->value(progdefaults.pskrep_qrg);}
      }
      Fl_Check_Button btn_report_when_visible {
        label {Disable spotting when signal browser(s) are not visible.}
        callback {progdefaults.report_when_visible = o->value();
progdefaults.changed = true;}
        tooltip {Check to reduce CPU load in PSK and RTTY modes.} xywh {252 160 416 20} down_box DOWN_BOX value 1
        code0 {o->value(progdefaults.report_when_visible);}
      }
      Fl_Check_Button btn_pskrep_autostart {
        label {Log on to pskrep when starting fldigi}
        callback {progdefaults.pskrep_autostart = o->value();
progdefaults.changed = true;}
        tooltip {Automatically start psk reporter socket connection} xywh {252 192 291 20} down_box DOWN_BOX
        code0 {o->value(progdefaults.pskrep_autostart);}
      }
      Fl_Box box_connected_to_pskrep {
        label Connected
        xywh {562 193 18 18} box DIAMOND_DOWN_BOX color 7 align 8
      }
      Fl_Input inpPSKRepHost {
        label {Host:}
        callback {progdefaults.pskrep_host = o->value();
btnPSKRepInit->labelcolor(FL_RED);
btnPSKRepInit->redraw_label();
progdefaults.changed = true;}
        tooltip {To whom the connection is made} xywh {295 230 220 24} when 1
        code0 {inpPSKRepHost->value(progdefaults.pskrep_host.c_str());}
        code1 {inpPSKRepHost->labelsize(FL_NORMAL_SIZE);}
        class Fl_Input2
      }
      Fl_Input inpPSKRepPort {
        label {Port:}
        callback {progdefaults.pskrep_port = o->value();
btnPSKRepInit->labelcolor(FL_RED);
btnPSKRepInit->redraw_label();
progdefaults.changed = true;}
        tooltip {Using UDP port \#} xywh {664 230 60 24} when 1
        code0 {inpPSKRepPort->value(progdefaults.pskrep_port.c_str());}
        code1 {inpPSKRepPort->labelsize(FL_NORMAL_SIZE);}
        class Fl_Input2
      }
      Fl_Button btnPSKRepInit {
        label Initialize
        callback {pskrep_stop();
if (!pskrep_start()) {
    boxPSKRepMsg->copy_label(pskrep_error());
    progdefaults.usepskrep = false;
    box_connected_to_pskrep->color(FL_WHITE);
    box_connected_to_pskrep->redraw();
} else {
    boxPSKRepMsg->label(0);
    o->labelcolor(FL_FOREGROUND_COLOR);
    progdefaults.usepskrep = true;
    box_connected_to_pskrep->color(FL_GREEN);
    box_connected_to_pskrep->redraw();
}}
        tooltip {Initialize the socket client} xywh {644 275 80 24}
      }
      Fl_Box boxPSKRepMsg {
        label {<PSK Reporter error message>}
        xywh {254 259 300 48} labelfont 2
        code0 {boxPSKRepMsg->label(0);}
      }
    }
    Fl_Group {} {
      label {Misc/DTMF}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Misc/DTMF"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Misc/DTMF"));}
    } {
      Fl_Check_Button chkDTMFdecode {
        label {Decode DTMF tones}
        callback {progdefaults.DTMFdecode = o->value();}
        tooltip {Decode received DTMF tones} xywh {372 79 175 20} down_box DOWN_BOX
        code0 {o->value(progdefaults.DTMFdecode);}
      }
    }
    Fl_Group {} {
      label {Misc/KML}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Misc/KML"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Misc/KML"));}
    } {
      Fl_Input btnKmlSaveDir {
        label {KML files directory}
        callback {progdefaults.kml_save_dir=o->value();
progdefaults.changed = true;
kml_init();}
        tooltip {Where generated KML documents are stored.} xywh {232 47 390 24} align 69
        code0 {o->value(progdefaults.kml_save_dir.c_str());}
      }
      Fl_Input inputKmlRootFile {
        label {KML root file}
        xywh {231 91 300 24} align 5
        code0 {o->value("fldigi.kml");}
      }
      Fl_Counter cntKmlMergeDistance {
        label {Minimum distance for splitting aliases (Meters)}
        callback {progdefaults.kml_merge_distance = o->value();
progdefaults.changed = true;
kml_init();}
        tooltip {Minimum distance for splitting alias nodes (Meters)} xywh {232 127 100 24} align 8 minimum 0 maximum 100000 step 10 value 1000
        code0 {o->value(progdefaults.kml_merge_distance);}
        code1 {o->lstep(1000);}
      }
      Fl_Counter cntKmlRetentionTime {
        label {Data retention time, in hours (0 for no limit)}
        callback {progdefaults.kml_retention_time = o->value();
progdefaults.changed = true;
kml_init();}
        tooltip {Number of hours data is kept for each node. Zero means keeping everything.} xywh {231 163 100 24} align 8 minimum 0 maximum 500 step 1
        code0 {o->value(progdefaults.kml_retention_time);}
        code1 {o->lstep(24);}
      }
      Fl_Spinner cntKmlRefreshInterval {
        label {KML refresh interval (seconds)}
        callback {progdefaults.kml_refresh_interval = (int)(o->value());
progdefaults.changed = true;
kml_init();}
        tooltip {Refresh time interval written in KML file (Seconds)} xywh {230 199 50 24} align 8 value 10
        code0 {o->minimum(1); o->maximum(3600); o->step(1);}
        code1 {o->value(progdefaults.kml_refresh_interval);}
        code2 {o->labelsize(FL_NORMAL_SIZE);}
        class Fl_Spinner2
      }
      Fl_Group listbox_kml_balloon_style {
        label {KML balloon display style}
        callback {progdefaults.kml_balloon_style = o->index();
progdefaults.changed = true;
kml_init();}
        tooltip {KML balloon in plain text, or HTML, in plain tables or matrices.} xywh {230 235 201 24} box DOWN_BOX color 7 align 8 when 1
        code0 {o->add("Plain text|HTML tables|Single HTML matrix");o->index(progdefaults.kml_balloon_style);}
        code1 {o->labelsize(FL_NORMAL_SIZE);}
        class Fl_ListBox
      } {}
      Fl_Input btnKmlCommand {
        label {Command run on KML creation}
        callback {progdefaults.kml_command=o->value();
progdefaults.changed = true;
kml_init();}
        tooltip {Command started when KML files are generated. Subprocesses are started once, and restarted if needed.} xywh {230 271 246 24} align 72
        code0 {o->value(progdefaults.kml_command.c_str());}
      }
      Fl_Button btlTestKmlCommand {
        label {Test command}
        callback {KmlServer::SpawnProcess();}
        tooltip {Execute command on KML files.} xywh {230 307 191 24}
      }
      Fl_Button btnSelectKmlDestDir {
        label {Change dir...}
        callback {Fl_File_Chooser *fc = new Fl_File_Chooser(".",NULL,Fl_File_Chooser::DIRECTORY,"Input File");
fc->callback(KmlDestDirSet);
fc->show();}
        tooltip {Choose directory to store KML documents} xywh {631 47 101 24}
      }
      Fl_Button btlPurge {
        label {Cleanup KML data now !}
        callback {KmlServer::GetInstance()->Reset();}
        tooltip {Cleanups KML documents, empties Google Earth display.} xywh {542 91 190 24}
      }
      Fl_Check_Button btnKmlPurgeOnStartup {
        label {Cleanup on startup}
        callback {progdefaults.kml_purge_on_startup = o->value();
progdefaults.changed = true;}
        tooltip {Empties KML documents when starting program.} xywh {528 203 172 15} down_box DOWN_BOX
        code0 {o->value(progdefaults.kml_purge_on_startup);}
      }
      Fl_Group {} {open
        xywh {475 301 310 40} box ENGRAVED_FRAME
      } {
        Fl_Check_Button btn_kml_enabled {
          label {KML server enabled (On / Off)}
          callback {progdefaults.kml_enabled = o->value();
if (progdefaults.kml_enabled) {
  kml_init(true);
  progdefaults.changed = true;
} else {
  KmlServer::Exit();
}}
          tooltip {Uncheck if KML is never used} xywh {497 311 242 19} down_box DOWN_BOX
          code0 {o->value(progdefaults.kml_enabled);}
        }
      }
    }
    Fl_Group {} {
      label {Misc/PSM}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Misc/PSM"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Misc/PSM"));}
      code3 {tab_tree->close(_("Misc"));}
    } {
      Fl_Group {} {open
        xywh {204 32 590 108} box ENGRAVED_BOX align 21
      } {
        Fl_Counter cntBusyChannelSeconds {
          label {Allow TX After Signal Detection (Secs)}
          callback {progStatus.busyChannelSeconds = (int) o->value();
progdefaults.busyChannelSeconds = (int) o->value();
progdefaults.changed = true;}
          tooltip {Allow transmits after 'N' seconds of a signal detection.} xywh {380 38 110 20} align 8 minimum 1 maximum 999 step 1 value 1
          code0 {o->value(progdefaults.busyChannelSeconds);}
          code1 {o->step(1,10);}
        }
        Fl_Check_Button btnEnableBusyChannel {
          label {Enable Busy Channel}
          callback {if(o->value()) {
	progStatus.enableBusyChannel = true;
	progdefaults.enableBusyChannel = true;
}
else {
	progStatus.enableBusyChannel = false;
	progdefaults.enableBusyChannel = false;
}
progdefaults.changed = true;}
          tooltip {Enable to inhibit TX on signal Detections} xywh {210 40 115 20} down_box DOWN_BOX
          code0 {if(progdefaults.enableBusyChannel) o->value(true);}
          code1 {else o->value(false);}
        }
        Fl_Counter cntPSMTXBufferFlushTimer {
          label {TX Buffer Flush Timer (Mins, 0=Disable)}
          callback {progStatus.psm_flush_buffer_timeout = (int) o->value();
progdefaults.psm_flush_buffer_timeout = (int) o->value();
progdefaults.changed = true;}
          tooltip {Flushes the TX buffer after x period when Busy Channel remains on (TX inhibited)} xywh {380 63 110 20} align 8 minimum 1 maximum 999 step 1 value 1
          code0 {o->value(progdefaults.psm_flush_buffer_timeout);}
          code1 {o->step(1,10); o->minimum(0); o->maximum(999);}
        }
        Fl_Counter cntPSMBandwidthMargins {
          label {Modem Bandwidth Margins }
          callback {progStatus.psm_minimum_bandwidth_margin   = (int) o->value();
progdefaults.psm_minimum_bandwidth_margin = (int) o->value();
progdefaults.changed = true;}
          tooltip {Monitor signals in modem bandwitdh plus margins.} xywh {380 88 110 20} align 8 minimum 1 maximum 999 step 1 value 1
          code0 {o->value(progdefaults.psm_minimum_bandwidth_margin);}
          code1 {o->step(1,10);}
        }
        Fl_Counter cntPSMValidSamplePeriod {
          label {Valid Signal Sample Period (msecs)}
          callback {progStatus.psm_hit_time_window   = (int) o->value();
progdefaults.psm_hit_time_window = (int) o->value();
progdefaults.changed = true;}
          tooltip {Valid signal sample period in Milliseconds} xywh {380 114 110 20} align 8 minimum 1 maximum 999 step 1 value 1
          code0 {o->value(progdefaults.psm_hit_time_window);}
          code1 {o->step(1,10);}
        }
      }
      Fl_Group {} {open
        xywh {204 140 590 84} box ENGRAVED_BOX align 21
      } {
        Fl_Check_Button btnEnable_csma {
          label {Enable CSMA}
          callback {if(o->value()) {
	progStatus.csma_enabled = true;
	progdefaults.csma_enabled = true;
} else {
	progStatus.csma_enabled = false;
	progdefaults.csma_enabled = false;
}
progdefaults.changed = true;}
          tooltip {Carrier Sense Mulitiple Access} xywh {214 148 114 20} down_box DOWN_BOX
          code0 {if(progdefaults.csma_enabled) o->value(true);}
        }
        Fl_Counter cntPersistance {
          label Persistance
          callback {progStatus.csma_persistance = (int) o->value();
progdefaults.csma_persistance = (int) o->value();
progdefaults.changed = true;
update_csma_io_config(CSMA_PERSISTANCE);}
          tooltip {Used to adjust the aggressiveness of TX} xywh {333 148 110 20} align 8 minimum 1 maximum 999 step 1 value 1
          code0 {o->value(progdefaults.csma_persistance);}
          code1 {o->step(1,10); o->minimum(0); o->maximum(255);}
        }
        Fl_Counter cntSlotTime {
          label {Slot Time}
          callback {progStatus.csma_slot_time = (int) o->value();
progdefaults.csma_slot_time = (int) o->value();
progdefaults.changed = true;
update_csma_io_config(CSMA_SLOT_TIME);}
          tooltip {Non transmit window after a transmit period} xywh {333 173 110 20} align 8 minimum 1 maximum 999 step 1 value 1
          code0 {o->value(progdefaults.csma_slot_time);}
          code1 {o->step(1,10); o->minimum(1); o->maximum(255);}
        }
        Fl_Counter cntTransmitDelay {
          label {Transmit Data Delay}
          callback {progStatus.csma_transmit_delay = (int) o->value();
progdefaults.csma_transmit_delay = (int) o->value();
progdefaults.changed = true;
update_csma_io_config(CSMA_TX_DELAY);}
          tooltip {Idle transmit before data sent} xywh {333 198 110 20} align 8 minimum 1 maximum 999 step 1 value 1
          code0 {o->value(progdefaults.csma_transmit_delay);}
          code1 {o->step(1,10); o->minimum(1); o->maximum(255);}
        }
        Fl_Output OutputSlotTimeMS {
          label MilliSeconds
          tooltip {Displays the Slot Time in Milliseconds} xywh {599 173 95 20} align 8
        }
        Fl_Output OutputTransmitDelayMS {
          label MilliSeconds
          tooltip {Displays the Transmit Delay in Milliseconds} xywh {599 198 95 20} align 8
        }
        Fl_Output OutputPersistancePercent {
          label {Percent (%)}
          tooltip {Displays the Slot Time in Milliseconds} xywh {599 147 95 20} align 8
        }
      }
      Fl_Group {} {open
        xywh {204 223 590 31} box ENGRAVED_BOX align 21
      } {
        Fl_Check_Button btnEnable_histogram {
          label {Enable Histogram}
          callback {if(o->value()) {
	progStatus.psm_use_histogram = true;
	progdefaults.psm_use_histogram = true;
} else {
	progStatus.psm_use_histogram = false;
	progdefaults.psm_use_histogram = false;
}
progdefaults.changed = true;}
          tooltip {Enable Histogram threshold signal monitoring} xywh {216 230 139 20} down_box DOWN_BOX
          code0 {if(progdefaults.psm_use_histogram) o->value(true);}
        }
        Fl_Counter cntPSMThreshold {
          label {PSM Histogram Threshold}
          callback {progStatus.psm_histogram_offset_threshold = (int) o->value();
progdefaults.psm_histogram_offset_threshold = (int) o->value();
progdefaults.changed = true;}
          tooltip {Sets the theshold level to x value above the noise level} xywh {380 230 110 20} align 8 minimum 1 maximum 999 step 1 value 1
          code0 {o->value(progdefaults.psm_histogram_offset_threshold);}
          code1 {o->step(1,10); o->minimum(1); o->maximum(20);}
        }
      }
      Fl_Group {} {open
        xywh {204 254 590 34} box ENGRAVED_BOX align 21
      } {
        Fl_Counter cntKPSQLAttenuation {
          label {PSM Attenuate}
          callback {progStatus.kpsql_attenuation = (int) o->value();
progdefaults.kpsql_attenuation = (int) o->value();
update_kpsql_fractional_gain(progStatus.kpsql_attenuation);
progdefaults.changed = true;}
          tooltip {Adjust sensitivity by 1/N fractional values.} xywh {380 261 110 20} align 8 minimum 1 maximum 999 step 1 value 1
          code0 {o->value(progdefaults.kpsql_attenuation);}
          code1 {o->step(1,10); o->minimum(1); o->maximum(999);}
          code2 {update_kpsql_fractional_gain(progdefaults.kpsql_attenuation);}
        }
      }
      Fl_Group {} {open
        xywh {204 287 590 28} box ENGRAVED_BOX align 21
      } {
        Fl_Check_Button btn_show_psm_button {
          label {Show and enable Power Signal Monitor button (PSM)}
          callback {progdefaults.show_psm_btn = o->value();
UI_select();
progdefaults.changed = true;}
          tooltip {display PSM button on main dialog} xywh {214 291 150 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.show_psm_btn);}
        }
      }
      Fl_Button btnBuyChannelDefaults {
        label {Default Settings}
        callback {psm_set_defaults();}
        xywh {669 320 126 22}
      }
    }
    Fl_Group grpOperator {
      label {Operator-Station}
      xywh {200 0 600 350} box ENGRAVED_BOX color 50 align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Operator-Station"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Operator-Station"));}
    } {
      Fl_Input inpMyCallsign {
        label {Station Callsign:}
        callback {const char *triggers = " !\#$%&'()*+,-.;<=>?@[\\\\]^_{|}~";
std::string mycall = inpMyCallsign->value();

for (size_t k = 0; k < mycall.length(); k++) {
  for (size_t n = 0; n < strlen(triggers); n++) {
    if (mycall[k] == triggers[n]) {
      if ( fl_choice2("Replace FSQ trigger character with slash /", _("no"), _("yes"), NULL ) )
        mycall[k] = '/';
    }
  }
}

if (progdefaults.THORsecText.empty()) {
progdefaults.THORsecText = mycall;
progdefaults.THORsecText.append(" ");
txtTHORSecondary->value(progdefaults.THORsecText.c_str());
}

if (progdefaults.secText.empty()) {
progdefaults.secText = mycall;
progdefaults.secText.append(" ");
txtSecondary->value(progdefaults.secText.c_str());
}

progdefaults.myCall = mycall;

inpMyCallsign->value(progdefaults.myCall.c_str());
inpMyCallsign->redraw();

update_main_title();
notify_change_callsign();
progdefaults.changed = true;}
        tooltip {Station callsign} xywh {386 54 110 24} when 1
        code0 {inpMyCallsign->labelsize(FL_NORMAL_SIZE);}
        class Fl_Input2
      }
      Fl_Input inpOperCallsign {
        label {Operator Callsign:}
        callback {progdefaults.operCall = o->value();
progdefaults.changed = true;}
        tooltip {Operator callsign (if different than station callsign)} xywh {386 84 110 24}
        code0 {o->labelsize(FL_NORMAL_SIZE);}
        code1 {o->value(progdefaults.operCall.c_str());}
        class Fl_Input2
      }
      Fl_Input inpMyName {
        label {Operator Name:}
        callback {progdefaults.myName = o->value();
progdefaults.changed = true;}
        tooltip {Operators name} xywh {386 115 140 24}
        code0 {inpMyName->labelsize(FL_NORMAL_SIZE);}
        class Fl_Input2
      }
      Fl_Input inpMyAntenna {
        label {Antenna:}
        callback {progdefaults.myAntenna = o->value();
progdefaults.changed = true;}
        tooltip {Short description of antenna} xywh {386 145 320 24}
        code0 {inpMyAntenna->labelsize(FL_NORMAL_SIZE);}
        class Fl_Input2
      }
      Fl_Input inpMyQth {
        label {Station QTH:}
        callback {progdefaults.myQth = o->value();
progdefaults.changed = true;}
        tooltip {Operators QTH} xywh {386 176 320 24}
        code0 {inpMyQth->labelsize(FL_NORMAL_SIZE);}
        class Fl_Input2
      }
      Fl_Input inpMyLocator {
        label {Station Locator:}
        callback {progdefaults.myLocator = o->value();
progdefaults.changed = true;}
        tooltip {Maidenhead locator as in EM64qv} xywh {386 206 85 24}
        code0 {inpMyLocator->labelsize(FL_NORMAL_SIZE);}
        class Fl_Input2
      }
      Fl_Group listbox_states {
        label {State / Provinces}
        callback {listbox_counties->clear();
listbox_counties->add(states.counties(o->value()).c_str());
listbox_counties->index(0);
inp_QP_short_county->value(states.cnty_short(listbox_states->value(),listbox_counties->value()).c_str());
inp_QP_state_short->value(states.state_short(o->value()).c_str());
progdefaults.SQSOstate = o->index();
progdefaults.changed = true;} open
        tooltip {US States / Canadian Provinces} xywh {386 237 319 24} box DOWN_BOX color 7 align 4
        code0 {\#include "counties.h"}
        code1 {o->labelsize(FL_NORMAL_SIZE);}
        code2 {o->add(states.names().c_str());}
        code3 {o->index(progdefaults.SQSOstate);}
        class Fl_ListBox
      } {}
      Fl_Input inp_QP_state_short {
        tooltip {Abbreviation for State/Province} xywh {710 237 60 24} align 5
        code0 {o->value(states.state_short(listbox_states->value()).c_str());}
        class Fl_Input2
      }
      Fl_Group listbox_counties {
        label {Counties / Regions}
        callback {inp_QP_short_county->value(states.cnty_short(listbox_states->value(),o->value()).c_str());
progdefaults.SQSOcounty = o->index();
progdefaults.changed = true;} open
        tooltip {US/Canadian Counties / Regions} xywh {386 268 319 24} box DOWN_BOX color 7 align 4
        code0 {o->clear(); o->add(states.counties(listbox_states->value()).c_str());}
        code1 {o->index(progdefaults.SQSOcounty);}
        code2 {o->labelsize(FL_NORMAL_SIZE);}
        class Fl_ListBox
      } {}
      Fl_Input inp_QP_short_county {
        tooltip {Abbreviation for County/Region} xywh {710 268 60 24} align 5
        code0 {inp_QP_short_county->value(states.cnty_short(listbox_states->value(),listbox_counties->value()).c_str());}
        class Fl_Input2
      }
    }
    Fl_Group grpRigFlrig {
      label {Rig Control/flrig}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Rig Control/flrig"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Rig Control/flrig"));}
    } {
      Fl_Group {} {
        label {"Disable PTT keys modem if multiple instances of fldigi (client)
are connected to a single flrig (server).} open
        xywh {209 233 580 90} box ENGRAVED_BOX align 17
      } {
        Fl_Check_Button chk_flrig_keys_modem {
          label {Flrig PTT keys modem}
          callback {progdefaults.flrig_keys_modem = o->value();
progdefaults.changed = true;}
          tooltip {" "} xywh {439 281 183 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.flrig_keys_modem);}
        }
      }
      Fl_Group {} {
        label {flrig xmlrpc server parameters
these controls are mirrored on the IO configuration tab} open
        xywh {209 148 580 81} box ENGRAVED_FRAME align 21
      } {
        Fl_Button btnDefault_flrig_ip_mirror {
          label Default
          callback {set_ip_to_default(FLRIG_IO);
txt_flrig_ip_address_mirror->value(progdefaults.flrig_ip_address.c_str());
txt_flrig_ip_port_mirror->value(progdefaults.flrig_ip_port.c_str());
progdefaults.changed = true;}
          tooltip {Returns IP Address and port
number to the default value.} xywh {613 194 73 24}
        }
        Fl_Input txt_flrig_ip_address_mirror {
          label Addr
          callback {progdefaults.flrig_ip_address = o->value();
txt_flrig_ip_address->value(progdefaults.flrig_ip_address.c_str());
progdefaults.changed = true;}
          tooltip {IP Address for flrig interface
IP Address format: nnn.nnn.nnn.nnn
or name: i.e. localhost} xywh {244 194 230 24} align 8 when 1
          code0 {o->labelsize(FL_NORMAL_SIZE);}
          code1 {o->value(progdefaults.flrig_ip_address.c_str());}
          class Fl_Input2
        }
        Fl_Input txt_flrig_ip_port_mirror {
          label Port
          callback {progdefaults.flrig_ip_port = o->value();
txt_flrig_ip_port->value(progdefaults.flrig_ip_port.c_str());
progdefaults.changed = true;}
          tooltip {IP Address Port Number} xywh {518 194 55 24} align 8 when 1
          code0 {o->labelsize(FL_NORMAL_SIZE);}
          code1 {o->value(progdefaults.flrig_ip_port.c_str());}
          class Fl_Input2
        }
        Fl_Button btn_reconnect_flrig_server_mirror {
          label Reconnect
          callback {reconnect_to_flrig();}
          tooltip {Press only if you change the address/port} xywh {693 194 82 24}
          code0 {\#include "rigsupport.h"}
        }
      }
      Fl_Group {} {
        label {flrig is the preferred method of tranceiver control} open
        xywh {209 54 580 90} box ENGRAVED_BOX align 17
      } {
        Fl_Check_Button btn_fldigi_client_to_flrig {
          label {Enable flrig xcvr control with fldigi as client}
          callback {progdefaults.fldigi_client_to_flrig=o->value();
if (o->value()) {
  progdefaults.chkUSEHAMLIBis = false;
  progdefaults.chkUSERIGCATis = false;
  chkUSEHAMLIB->value(0);
  chkUSERIGCAT->value(0);
}
progdefaults.changed=true;}
          tooltip {Disable if flrig not used.} xywh {234 81 70 15} down_box DOWN_BOX
          code0 {o->value(progdefaults.fldigi_client_to_flrig);}
        }
        Fl_Check_Button btn_flrig_auto_shutdown {
          label {Shutdown flrig with fldigi}
          callback {progdefaults.flrig_auto_shutdown=o->value();
progdefaults.changed=true;}
          tooltip {Disable if flrig not used.} xywh {234 112 70 15} down_box DOWN_BOX
          code0 {o->value(progdefaults.flrig_auto_shutdown);}
        }
      }
    }
    Fl_Group grpRigCat {
      label {Rig Control/CAT (rigcat)}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Rig Control/CAT (rigcat)"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Rig Control/CAT (rigcat)"));}
    } {
      Fl_Check_Button chkUSERIGCAT {
        label {Use RigCAT}
        callback {if (o->value() == 1) {
  chkUSEHAMLIB->value(0);
  btn_fldigi_client_to_flrig->value(0);
  progdefaults.chkUSERIGCATis = true;
  progdefaults.fldigi_client_to_flrig = false;
  btnInitRIGCAT->labelcolor(FL_RED);
  btnInitRIGCAT->redraw();
} else {
  progdefaults.chkUSERIGCATis = false;
  progdefaults.initInterface();
}
progdefaults.changed=true;}
        tooltip {RigCAT used for rig control} xywh {434 32 110 20} down_box DOWN_BOX
      }
      Fl_Group grpRigCAT {open
        xywh {244 55 490 279} box ENGRAVED_FRAME align 17
      } {
        Fl_Output txtXmlRigFilename {
          label {Rig description file:}
          tooltip {Use Open to select descriptor file} xywh {254 79 130 22} color 52 align 5
          code0 {o->value(fl_filename_name(progdefaults.XmlRigFilename.c_str()));}
        }
        Fl_Button btnSelectRigXmlFile {
          label {Open...}
          callback {btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();
selectRigXmlFilename();}
          tooltip {Select rig descriptor file} xywh {387 79 60 22} align 16
        }
        Fl_Group inpXmlRigDevice {
          label {Device:}
          callback {btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();} open
          xywh {580 79 144 22} box DOWN_BOX color 7 align 4
          code0 {o->value(progdefaults.XmlRigDevice.c_str());
                       o->labelsize(FL_NORMAL_SIZE);}
          class Fl_ComboBox
        } {}
        Fl_Value_Input cntRigCatRetries {
          label Retries
          callback {btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();}
          tooltip {\# retries before giving up} xywh {269 122 60 22} align 5 maximum 1000 step 1
          code0 {o->value(progdefaults.RigCatRetries);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Value_Input2
        }
        Fl_Value_Input cntRigCatTimeout {
          label {Retry interval (ms)}
          callback {btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();}
          tooltip {Time between retires in msec} xywh {399 122 60 22} align 5 maximum 10000 step 1
          code0 {o->value(progdefaults.RigCatTimeout);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Value_Input2
        }
        Fl_Value_Input cntRigCatWait {
          label {Write delay (ms)}
          callback {btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();}
          tooltip {Wait for response to subsequent command} xywh {269 162 60 22} align 5 maximum 10000 step 1
          code0 {o->value(progdefaults.RigCatWait);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Value_Input2
        }
        Fl_Group listbox_xml_rig_baudrate {
          label {Baud rate:}
          callback {btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();} open
          xywh {625 122 99 22} box DOWN_BOX color 7 align 4
          code0 {o->add(szBaudRates);}
          code1 {o->index(progdefaults.XmlRigBaudrate);
                       o->labelsize(FL_NORMAL_SIZE);}
          class Fl_ListBox
        } {}
        Fl_Counter valRigCatStopbits {
          label Stopbits
          callback {btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw();}
          xywh {627 156 95 21} type Simple align 4 minimum 1 maximum 2 step 1 value 1
          code0 {o->value(progdefaults.RigCatStopbits);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Counter2
        }
        Fl_Button btnInitRIGCAT {
          label Initialize
          callback {progdefaults.initInterface();
o->labelcolor(FL_FOREGROUND_COLOR);
progdefaults.changed = true;}
          tooltip {Initialize RigCAT interface} xywh {604 293 113 24} align 16
        }
        Fl_Check_Button btnRigCatEcho {
          label {Commands are echoed}
          callback {btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();
progdefaults.changed = true;}
          tooltip {Rig or interface echos serial data} xywh {289 188 192 22} down_box DOWN_BOX
          code0 {o->value(progdefaults.RigCatECHO);}
        }
        Fl_Round_Button btnRigCatCMDptt {
          label {CAT command for PTT}
          callback {if (o->value()== 1) {
btnRigCatRTSptt->value(0);
btnRigCatDTRptt->value(0);
progdefaults.RigCatCMDptt = true;
progdefaults.TTYptt = 
progdefaults.UsePPortPTT =
progdefaults.UseUHrouterPTT =
progdefaults.RigCatRTSptt =
progdefaults.RigCatDTRptt =
progdefaults.HamlibCMDptt = false;
} else
progdefaults.RigCatCMDptt = false;

btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw();}
          tooltip {PTT is a CAT command (not hardware)} xywh {495 189 207 20} down_box DOWN_BOX selection_color 1
          code0 {o->value(progdefaults.RigCatCMDptt);}
        }
        Fl_Round_Button btnRigCatRTSptt {
          label {Toggle RTS for PTT}
          callback {if (o->value() == 1) {
btnRigCatCMDptt->value(0);
progdefaults.RigCatRTSptt = true;
progdefaults.TTYptt = 
progdefaults.UsePPortPTT =
progdefaults.UseUHrouterPTT =
progdefaults.RigCatCMDptt =
progdefaults.HamlibCMDptt = false;
} else
progdefaults.RigCatRTSptt = false;

btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();}
          tooltip {RTS is ptt line} xywh {289 218 160 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.RigCatRTSptt);}
        }
        Fl_Round_Button btnRigCatDTRptt {
          label {Toggle DTR for PTT}
          callback {if (o->value() == 1) {
btnRigCatCMDptt->value(0);
progdefaults.RigCatDTRptt = true;
progdefaults.TTYptt = 
progdefaults.UsePPortPTT =
progdefaults.UseUHrouterPTT =
progdefaults.RigCatCMDptt =
progdefaults.HamlibCMDptt = false;
} else
progdefaults.RigCatDTRptt = false;

btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();}
          tooltip {DTR is ptt line} xywh {495 216 160 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.RigCatDTRptt);}
        }
        Fl_Check_Button btnRigCatRTSplus {
          label {RTS +12 v}
          callback {btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();}
          tooltip {Initial state of RTS} xywh {289 247 100 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.RigCatRTSplus);}
        }
        Fl_Check_Button btnRigCatDTRplus {
          label {DTR +12 v}
          callback {btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();}
          tooltip {Initial state of DTR} xywh {495 244 100 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.RigCatDTRplus);}
        }
        Fl_Check_Button chkRigCatRTSCTSflow {
          label {RTS/CTS flow control}
          callback {btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();}
          tooltip {Rig uses RTS/CTS handshake} xywh {289 275 170 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.RigCatRTSCTSflow);}
        }
        Fl_Check_Button chk_restore_tio {
          label {Restore UART Settings on Close}
          callback {btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();}
          tooltip {Restore the serial (COM) port settings} xywh {289 304 205 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.RigCatRestoreTIO);}
        }
        Fl_Check_Button chkRigCatVSP {
          label {VSP Enable}
          callback {btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();}
          tooltip {Virtual Serial Port Emulator - suppress WARNINGS} xywh {495 272 100 25} down_box DOWN_BOX
          code0 {o->value(progdefaults.RigCatVSP);}
        }
        Fl_Value_Input cntRigCatInitDelay {
          label {Init delay (ms)}
          callback {btnInitRIGCAT->labelcolor(FL_RED);
btnInitRIGCAT->redraw_label();}
          tooltip {Wait for response to first CAT command} xywh {399 162 75 22} align 5 maximum 10000 step 1
          code0 {o->value(progdefaults.RigCatInitDelay);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Value_Input2
        }
      }
    }
    Fl_Group grpRigGPIO {
      label {Rig Control/GPIO} open selected
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Rig Control/GPIO"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Rig Control/GPIO"));}
    } {
      Fl_Check_Button btn_gpio_ptt2 {
        label {Enable GPIO PTT (Pi specific controls)}
        callback {btnTTYptt->value(0);
btnUsePPortPTT->value(0);
btn_gpio_ptt->value(o->value());

if (o->value()) {
progdefaults.gpio_ptt = true;
progdefaults.UseUHrouterPTT =
progdefaults.TTYptt =
progdefaults.UsePPortPTT =
progdefaults.RigCatRTSptt =
progdefaults.RigCatDTRptt =
progdefaults.RigCatCMDptt =
progdefaults.cmedia_ptt =
progdefaults.HamlibCMDptt = false;
} else
progdefaults.gpio_ptt = false;

btnInitHWPTT->labelcolor(FL_RED);
btnInitHWPTT2->labelcolor(FL_RED);
btnInitHWPTT->redraw();
btnInitHWPTT2->redraw();
progdefaults.changed = true;}
        tooltip {Select PTT on state} xywh {256 25 330 15} down_box DOWN_BOX labelfont 4
        code0 {o->value(progdefaults.gpio_ptt);}
      }
      Fl_Button btnInitHWPTT2 {
        label Initialize
        callback {progdefaults.initInterface();
o->labelcolor(FL_FOREGROUND_COLOR);
o->redraw();
btnInitHWPTT->labelcolor(FL_FOREGROUND_COLOR);
btnInitHWPTT2->redraw();
progdefaults.changed = true;}
        tooltip {Initialize the H/W PTT interface} xywh {640 20 113 24}
      }
      Fl_Box {} {
        label {BCM GPIO  pin    Value}
        xywh {265 53 189 17} labelfont 4 align 20
      }
      Fl_Check_Button {btn_enable_gpio[0]} {
        label {17   00   11}
        callback {if (o->value()){
  progdefaults.enable_gpio |= 1;
  export_gpio(0);
} else {
  progdefaults.enable_gpio &= ~1;
  unexport_gpio(0);
}
progdefaults.changed = true;}
        tooltip {Select pin number} xywh {255 78 125 15} down_box DOWN_BOX labelfont 4
        code0 {o->value(progdefaults.enable_gpio & 0x01);}
      }
      Fl_Check_Button {btn_enable_gpio[1]} {
        label {18   01   12}
        callback {if (o->value()){
  progdefaults.enable_gpio |= (1<<1);
  export_gpio(1);
} else {
  progdefaults.enable_gpio &= ~(1<<1);
  unexport_gpio(1);
}
progdefaults.changed = true;}
        tooltip {Select pin number} xywh {255 107 125 15} down_box DOWN_BOX labelfont 4
        code0 {o->value((progdefaults.enable_gpio >> 1) & 0x01);}
      }
      Fl_Check_Button {btn_enable_gpio[2]} {
        label {27   02   13}
        callback {if (o->value()){
  progdefaults.enable_gpio |= (1<<2);
  export_gpio(2);
} else {
  progdefaults.enable_gpio &= ~(1<<2);
  unexport_gpio(2);
}
progdefaults.changed = true;}
        tooltip {Select pin number} xywh {255 137 125 15} down_box DOWN_BOX labelfont 4
        code0 {o->value((progdefaults.enable_gpio >> 2) & 0x01);}
      }
      Fl_Check_Button {btn_enable_gpio[3]} {
        label {22   03   15}
        callback {if (o->value()){
  progdefaults.enable_gpio |= (1<<3);
  export_gpio(3);
} else {
  progdefaults.enable_gpio &= ~(1<<3);
  unexport_gpio(3);
}
progdefaults.changed = true;}
        tooltip {Select pin number} xywh {255 167 125 15} down_box DOWN_BOX labelfont 4
        code0 {o->value((progdefaults.enable_gpio >> 3) & 0x01);}
      }
      Fl_Check_Button {btn_enable_gpio[4]} {
        label {23   04   16}
        callback {if (o->value()){
  progdefaults.enable_gpio |= (1<<4);
  export_gpio(4);
} else {
  progdefaults.enable_gpio &= ~(1<<4);
  unexport_gpio(4);
}
progdefaults.changed = true;}
        tooltip {Select pin number} xywh {255 197 125 15} down_box DOWN_BOX labelfont 4
        code0 {o->value((progdefaults.enable_gpio >> 4) & 0x01);}
      }
      Fl_Check_Button {btn_enable_gpio[5]} {
        label {24   05   18}
        callback {if (o->value()){
  progdefaults.enable_gpio |= (1<<5);
  export_gpio(5);
} else {
  progdefaults.enable_gpio &= ~(1<<5);
  unexport_gpio(5);
}
progdefaults.changed = true;}
        tooltip {Select pin number} xywh {255 227 125 15} down_box DOWN_BOX labelfont 4
        code0 {o->value((progdefaults.enable_gpio >> 5) & 0x01);}
      }
      Fl_Check_Button {btn_enable_gpio[6]} {
        label {25   06   22}
        callback {if (o->value()){
  progdefaults.enable_gpio |= (1<<6);
  export_gpio(6);
} else {
  progdefaults.enable_gpio &= ~(1<<6);
  unexport_gpio(6);
}
progdefaults.changed = true;}
        tooltip {Select pin number} xywh {255 257 125 15} down_box DOWN_BOX labelfont 4
        code0 {o->value((progdefaults.enable_gpio >> 6) & 0x01);}
      }
      Fl_Check_Button {btn_enable_gpio[7]} {
        label { 4   07    7}
        callback {if (o->value()){
  progdefaults.enable_gpio |= (1<<7);
  export_gpio(7);
} else {
  progdefaults.enable_gpio &= ~(1<<7);
  unexport_gpio(7);
}
progdefaults.changed = true;}
        tooltip {Select pin number} xywh {255 287 125 15} down_box DOWN_BOX labelfont 4
        code0 {o->value((progdefaults.enable_gpio >> 7) & 0x01);}
      }
      Fl_Check_Button {btn_enable_gpio[8]} {
        label { 5   21   29}
        callback {if (o->value()){
  progdefaults.enable_gpio |= (1<<8);
  export_gpio(8);
} else {
  progdefaults.enable_gpio &= ~(1<<8);
  unexport_gpio(8);
}
progdefaults.changed = true;}
        tooltip {Select pin number} xywh {515 78 125 15} down_box DOWN_BOX labelfont 4
        code0 {o->value((progdefaults.enable_gpio >> 8) & 0x01);}
      }
      Fl_Check_Button {btn_enable_gpio[9]} {
        label { 6   22   31}
        callback {if (o->value()){
  progdefaults.enable_gpio |= (1<<9);
  export_gpio(9);
} else {
  progdefaults.enable_gpio &= ~(1<<9);
  unexport_gpio(9);
}
progdefaults.changed = true;}
        tooltip {Select pin number} xywh {515 107 125 15} down_box DOWN_BOX labelfont 4
        code0 {o->value((progdefaults.enable_gpio >> 9) & 0x01);}
      }
      Fl_Check_Button {btn_enable_gpio[10]} {
        label {13   23   33}
        callback {if (o->value()){
  progdefaults.enable_gpio |= (1<<10);
  export_gpio(10);
} else {
  progdefaults.enable_gpio &= ~(1<<10);
  unexport_gpio(10);
}
progdefaults.changed = true;}
        tooltip {Select pin number} xywh {515 137 125 15} down_box DOWN_BOX labelfont 4
        code0 {o->value((progdefaults.enable_gpio >> 10) & 0x01);}
      }
      Fl_Check_Button {btn_enable_gpio[11]} {
        label {19   24   35}
        callback {if (o->value()){
  progdefaults.enable_gpio |= (1<<11);
  export_gpio(11);
} else {
  progdefaults.enable_gpio &= ~(1<<11);
  unexport_gpio(11);
}
progdefaults.changed = true;}
        tooltip {Select pin number} xywh {515 167 125 15} down_box DOWN_BOX labelfont 4
        code0 {o->value((progdefaults.enable_gpio >> 11) & 0x01);}
      }
      Fl_Check_Button {btn_enable_gpio[12]} {
        label {26   25   37}
        callback {if (o->value()){
  progdefaults.enable_gpio |= (1<<12);
  export_gpio(12);
} else {
  progdefaults.enable_gpio &= ~(1<<12);
  unexport_gpio(12);
}
progdefaults.changed = true;}
        tooltip {Select pin number} xywh {515 197 125 15} down_box DOWN_BOX labelfont 4
        code0 {o->value((progdefaults.enable_gpio >> 12) & 0x01);}
      }
      Fl_Check_Button {btn_enable_gpio[13]} {
        label {12   26   32}
        callback {if (o->value()){
  progdefaults.enable_gpio |= (1<<13);
  export_gpio(13);
} else {
  progdefaults.enable_gpio &= ~(1<<13);
  unexport_gpio(13);
}
progdefaults.changed = true;}
        tooltip {Select pin number} xywh {515 227 125 15} down_box DOWN_BOX labelfont 4
        code0 {o->value((progdefaults.enable_gpio >> 13) & 0x01);}
      }
      Fl_Check_Button {btn_enable_gpio[14]} {
        label {16   27   36}
        callback {if (o->value()){
  progdefaults.enable_gpio |= (1<<14);
  export_gpio(14);
} else {
  progdefaults.enable_gpio &= ~(1<<14);
  unexport_gpio(14);
}
progdefaults.changed = true;}
        tooltip {Select pin number} xywh {515 257 125 15} down_box DOWN_BOX labelfont 4
        code0 {o->value((progdefaults.enable_gpio >> 14) & 0x01);}
      }
      Fl_Check_Button {btn_enable_gpio[15]} {
        label {20   28   38}
        callback {if (o->value()){
  progdefaults.enable_gpio |= (1<<15);
  export_gpio(15);
} else {
  progdefaults.enable_gpio &= ~(1<<15);
  unexport_gpio(15);
}
progdefaults.changed = true;}
        tooltip {Select pin number} xywh {515 287 125 15} down_box DOWN_BOX labelfont 4
        code0 {o->value((progdefaults.enable_gpio >> 15) & 0x01);}
      }
      Fl_Check_Button {btn_enable_gpio[16]} {
        label {21   29   40}
        callback {if (o->value()){
  progdefaults.enable_gpio |= (1<<16);
  export_gpio(16);
} else {
  progdefaults.enable_gpio &= ~(1<<16);
  unexport_gpio(16);
}
progdefaults.changed = true;}
        tooltip {Select pin number} xywh {515 317 125 15} down_box DOWN_BOX labelfont 4
        code0 {o->value((progdefaults.enable_gpio >> 16) & 0x01);}
      }
      Fl_Check_Button {btn_gpio_on[0]} {
        label {= 1 (on)}
        callback {if (o->value()){
  progdefaults.gpio_on |= 1;
} else {
  progdefaults.gpio_on &= ~1;
}
wf->xmtrcv->value(0);
progdefaults.changed = true;}
        tooltip {Select PTT on state} xywh {395 77 84 15} down_box DOWN_BOX labelfont 4
        code0 {o->value((progdefaults.gpio_on) & 0x01);}
      }
      Fl_Check_Button {btn_gpio_on[1]} {
        label {= 1 (on)}
        callback {if (o->value()){
  progdefaults.gpio_on |= (1<<1);
} else {
  progdefaults.gpio_on &= ~(1<<1);
}
wf->xmtrcv->value(0);
progdefaults.changed = true;}
        tooltip {Select PTT on state} xywh {395 107 84 15} down_box DOWN_BOX labelfont 4
        code0 {o->value((progdefaults.gpio_on >> 1) & 0x01);}
      }
      Fl_Check_Button {btn_gpio_on[2]} {
        label {= 1 (on)}
        callback {if (o->value()){
  progdefaults.gpio_on |= (1<<2);
} else {
  progdefaults.gpio_on &= ~(1<<2);
}
wf->xmtrcv->value(0);
progdefaults.changed = true;}
        tooltip {Select PTT on state} xywh {395 137 84 15} down_box DOWN_BOX labelfont 4
        code0 {o->value((progdefaults.gpio_on >> 2) & 0x01);}
      }
      Fl_Check_Button {btn_gpio_on[3]} {
        label {= 1 (on)}
        callback {if (o->value()){
  progdefaults.gpio_on |= (1<<3);
} else {
  progdefaults.gpio_on &= ~(1<<3);
}
wf->xmtrcv->value(0);
progdefaults.changed = true;}
        tooltip {Select PTT on state} xywh {395 167 84 15} down_box DOWN_BOX labelfont 4
        code0 {o->value((progdefaults.gpio_on >> 3) & 0x01);}
      }
      Fl_Check_Button {btn_gpio_on[4]} {
        label {= 1 (on)}
        callback {if (o->value()){
  progdefaults.gpio_on |= (1<<4);
} else {
  progdefaults.gpio_on &= ~(1<<4);
}
wf->xmtrcv->value(0);
progdefaults.changed = true;}
        tooltip {Select PTT on state} xywh {395 197 84 15} down_box DOWN_BOX labelfont 4
        code0 {o->value((progdefaults.gpio_on >> 4) & 0x01);}
      }
      Fl_Check_Button {btn_gpio_on[5]} {
        label {= 1 (on)}
        callback {if (o->value()){
  progdefaults.gpio_on |= (1<<5);
} else {
  progdefaults.gpio_on &= ~(1<<5);
}
wf->xmtrcv->value(0);
progdefaults.changed = true;}
        tooltip {Select PTT on state} xywh {395 227 84 15} down_box DOWN_BOX labelfont 4
        code0 {o->value((progdefaults.gpio_on >> 5) & 0x01);}
      }
      Fl_Check_Button {btn_gpio_on[6]} {
        label {= 1 (on)}
        callback {if (o->value()){
  progdefaults.gpio_on |= (1<<6);
} else {
  progdefaults.gpio_on &= ~(1<<6);
}
wf->xmtrcv->value(0);
progdefaults.changed = true;}
        tooltip {Select PTT on state} xywh {395 257 84 15} down_box DOWN_BOX labelfont 4
        code0 {o->value((progdefaults.gpio_on >> 6) & 0x01);}
      }
      Fl_Check_Button {btn_gpio_on[7]} {
        label {= 1 (on)}
        callback {if (o->value()){
  progdefaults.gpio_on |= (1<<7);
} else {
  progdefaults.gpio_on &= ~(1<<7);
}
wf->xmtrcv->value(0);
progdefaults.changed = true;}
        tooltip {Select PTT on state} xywh {395 287 84 15} down_box DOWN_BOX labelfont 4
        code0 {o->value((progdefaults.gpio_on >> 7) & 0x01);}
      }
      Fl_Check_Button {btn_gpio_on[8]} {
        label {= 1 (on)}
        callback {if (o->value()){
  progdefaults.gpio_on |= (1<<8);
} else {
  progdefaults.gpio_on &= ~(1<<8);
}
wf->xmtrcv->value(0);
progdefaults.changed = true;}
        tooltip {Select PTT on state} xywh {655 78 84 15} down_box DOWN_BOX labelfont 4
        code0 {o->value((progdefaults.gpio_on >> 8) & 0x01);}
      }
      Fl_Check_Button {btn_gpio_on[9]} {
        label {= 1 (on)}
        callback {if (o->value()){
  progdefaults.gpio_on |= (1<<9);
} else {
  progdefaults.gpio_on &= ~(1<<9);
}
wf->xmtrcv->value(0);
progdefaults.changed = true;}
        tooltip {Select PTT on state} xywh {655 107 84 15} down_box DOWN_BOX labelfont 4
        code0 {o->value((progdefaults.gpio_on >> 9) & 0x01);}
      }
      Fl_Check_Button {btn_gpio_on[10]} {
        label {= 1 (on)}
        callback {if (o->value()){
  progdefaults.gpio_on |= (1<<10);
} else {
  progdefaults.gpio_on &= ~(1<<10);
}
wf->xmtrcv->value(0);
progdefaults.changed = true;}
        tooltip {Select PTT on state} xywh {655 137 84 15} down_box DOWN_BOX labelfont 4
        code0 {o->value((progdefaults.gpio_on >> 10) & 0x01);}
      }
      Fl_Check_Button {btn_gpio_on[11]} {
        label {= 1 (on)}
        callback {if (o->value()){
  progdefaults.gpio_on |= (1<<11);
} else {
  progdefaults.gpio_on &= ~(1<<11);
}
wf->xmtrcv->value(0);
progdefaults.changed = true;}
        tooltip {Select PTT on state} xywh {655 167 84 15} down_box DOWN_BOX labelfont 4
        code0 {o->value((progdefaults.gpio_on >> 11) & 0x01);}
      }
      Fl_Check_Button {btn_gpio_on[12]} {
        label {= 1 (on)}
        callback {if (o->value()){
  progdefaults.gpio_on |= (1<<12);
} else {
  progdefaults.gpio_on &= ~(1<<12);
}
wf->xmtrcv->value(0);
progdefaults.changed = true;}
        tooltip {Select PTT on state} xywh {655 197 84 15} down_box DOWN_BOX labelfont 4
        code0 {o->value((progdefaults.gpio_on >> 12) & 0x01);}
      }
      Fl_Check_Button {btn_gpio_on[13]} {
        label {= 1 (on)}
        callback {if (o->value()){
  progdefaults.gpio_on |= (1<<13);
} else {
  progdefaults.gpio_on &= ~(1<<13);
}
wf->xmtrcv->value(0);
progdefaults.changed = true;}
        tooltip {Select PTT on state} xywh {655 227 84 15} down_box DOWN_BOX labelfont 4
        code0 {o->value((progdefaults.gpio_on >> 13) & 0x01);}
      }
      Fl_Check_Button {btn_gpio_on[14]} {
        label {= 1 (on)}
        callback {if (o->value()){
  progdefaults.gpio_on |= (1<<14);
} else {
  progdefaults.gpio_on &= ~(1<<14);
}
wf->xmtrcv->value(0);
progdefaults.changed = true;}
        tooltip {Select PTT on state} xywh {655 257 84 15} down_box DOWN_BOX labelfont 4
        code0 {o->value((progdefaults.gpio_on >> 14) & 0x01);}
      }
      Fl_Check_Button {btn_gpio_on[15]} {
        label {= 1 (on)}
        callback {if (o->value()){
  progdefaults.gpio_on |= (1<<15);
} else {
  progdefaults.gpio_on &= ~(1<<15);
}
wf->xmtrcv->value(0);
progdefaults.changed = true;}
        tooltip {Select PTT on state} xywh {655 287 84 15} down_box DOWN_BOX labelfont 4
        code0 {o->value((progdefaults.gpio_on >> 15) & 0x01);}
      }
      Fl_Check_Button {btn_gpio_on[16]} {
        label {= 1 (on)}
        callback {if (o->value()){
  progdefaults.gpio_on |= (1<<16);
} else {
  progdefaults.gpio_on &= ~(1<<16);
}
wf->xmtrcv->value(0);
progdefaults.changed = true;}
        tooltip {Select PTT on state} xywh {655 317 84 15} down_box DOWN_BOX labelfont 4
        code0 {o->value((progdefaults.gpio_on >> 16) & 0x01);}
      }
      Fl_Box {} {
        label {BCM GPIO  pin    Value}
        xywh {525 53 194 17} labelfont 4 align 20
      }
      Fl_Counter cnt_gpio_pulse_width {
        label {Pulse width (msec)}
        callback {progdefaults.gpio_pulse_width=(int)o->value();
progdefaults.changed=true;}
        tooltip {Set >0 if pulsed PTT used} xywh {255 314 80 21} type Simple align 8 minimum 0 maximum 50 step 1
        code0 {o->value(progdefaults.gpio_pulse_width);}
      }
    }
    Fl_Group grpRigHamlib {
      label {Rig Control/Hamlib}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Rig Control/Hamlib"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Rig Control/Hamlib"));}
    } {
      Fl_Check_Button chkUSEHAMLIB {
        label {Use Hamlib}
        callback {progdefaults.chkUSEHAMLIBis = o->value();
if (o->value() == 1) {
  chkUSERIGCAT->value(0);
  btn_fldigi_client_to_flrig->value(0);
  progdefaults.chkUSERIGCATis = false;
  progdefaults.fldigi_client_to_flrig = false;
  btnInitHAMLIB->labelcolor(FL_RED);
  btnInitHAMLIB->activate();
  btnInitHAMLIB->redraw();
} else {
  progdefaults.initInterface();
}

progdefaults.changed = true;}
        tooltip {Hamlib used for rig control} xywh {451 21 100 20} down_box DOWN_BOX
      }
      Fl_Group grpHamlib {open
        xywh {206 51 585 293} box ENGRAVED_FRAME
      } {
        Fl_Group cboHamlibRig {
          label {Rig:}
          callback {btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();
\#if USE_HAMLIB
hamlib_get_defaults();
\#endif} open
          xywh {242 61 250 22} box DOWN_BOX color 7 align 4
          code0 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_ListBox
        } {}
        Fl_Group inpRIGdev {
          label {Device:}
          callback {btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();} open
          xywh {556 61 220 22} box DOWN_BOX color 7 align 4
          code0 {o->value(progdefaults.HamRigDevice.c_str());
                       o->labelsize(FL_NORMAL_SIZE);}
          class Fl_ComboBox
        } {}
        Fl_Value_Input cntHamlibRetries {
          label Retries
          callback {btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();}
          tooltip {\# times to resend command before giving up} xywh {241 101 70 24} align 5 maximum 1000 step 1
          code0 {o->value(progdefaults.HamlibRetries);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Value_Input2
        }
        Fl_Value_Input cntHamlibTimeout {
          label {Timeout (msec)}
          callback {btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();}
          tooltip {Hamlib read timeout} xywh {381 101 70 24} align 5 maximum 10000 step 1
          code0 {o->value(progdefaults.HamlibTimeout);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Value_Input2
        }
        Fl_Value_Input cntHamlibWriteDelay {
          label {Write delay (msec)}
          callback {btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();}
          tooltip {Msec's between sequential commands} xywh {241 144 70 24} align 5 maximum 10000 step 1
          code0 {o->value(progdefaults.HamlibWriteDelay);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Value_Input2
        }
        Fl_Value_Input cntHamlibWait {
          label {Post write delay (msec)}
          callback {btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();}
          tooltip {Wait interval (msecs) before reading response} xywh {381 144 70 24} align 5 maximum 10000 step 1
          code0 {o->value(progdefaults.HamlibWait);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Value_Input2
        }
        Fl_Group listbox_baudrate {
          label {Baud rate:}
          callback {btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();} open
          xywh {677 89 99 22} box DOWN_BOX color 7 align 4
          code0 {o->add(szBaudRates);}
          code1 {o->index(progdefaults.HamRigBaudrate);
                       o->labelsize(FL_NORMAL_SIZE);}
          class Fl_ListBox
        } {}
        Fl_Counter valHamRigStopbits {
          label Stopbits
          callback {progdefaults.HamRigStopbits = (int)o->value();
progdefaults.changed = true;}
          xywh {681 117 95 21} type Simple align 4 minimum 1 maximum 2 step 1 value 1
          code0 {o->value(progdefaults.HamRigStopbits);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Counter2
        }
        Fl_Counter valHamRigPollrate {
          label {Polling Interval (msec)}
          callback {progdefaults.HamRigPollrate = (int)o->value();
progdefaults.changed = true;}
          xywh {681 145 95 21} type Simple align 4 minimum 100 maximum 2000 step 50 value 100
          code0 {o->value(progdefaults.HamRigPollrate);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Counter2
        }
        Fl_Check_Button btnHamlibCMDptt {
          label {PTT via Hamlib command}
          callback {btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();
if (o->value()) {
progdefaults.HamlibCMDptt = true;
progdefaults.TTYptt = 
progdefaults.UsePPortPTT =
progdefaults.UseUHrouterPTT =
progdefaults.RigCatRTSptt =
progdefaults.RigCatDTRptt =
progdefaults.RigCatCMDptt = false;
} else
progdefaults.HamlibCMDptt = false;

progdefaults.changed = true;}
          tooltip {PTT using hamlib command} xywh {256 192 215 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.HamlibCMDptt);}
        }
        Fl_Check_Button btnHamlibPTT_ON_DATA {
          label {Audio on Auxiliary Port}
          callback {progdefaults.hamlib_ptt_on_data = o->value();}
          tooltip {PTT enables auxiliary audio source} xywh {256 217 215 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.hamlib_ptt_on_data);}
        }
        Fl_Check_Button btnHamlibDTRplus {
          label {DTR +12}
          callback {btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();}
          tooltip {Initial state of DTR} xywh {256 243 90 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.HamlibDTRplus);}
        }
        Fl_Check_Button chkHamlibRTSplus {
          label {RTS +12}
          callback {if (o->value() == 1)
  chkHamlibRTSCTSflow->value(0);
btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();}
          tooltip {Initial state of RTS} xywh {446 243 85 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.HamlibRTSplus);}
        }
        Fl_Check_Button chkHamlibRTSCTSflow {
          label {RTS/CTS flow control}
          callback {if (o->value() == 1) {
  chkHamlibXONXOFFflow->value(0);
  chkHamlibRTSplus->deactivate();
} else
  chkHamlibRTSplus->activate();
btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();}
          tooltip {Rig requires RTS/CTS flow control} xywh {256 269 170 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.HamlibRTSCTSflow);}
          code1 {if (o->value()) chkHamlibRTSplus->deactivate();}
        }
        Fl_Check_Button chkHamlibXONXOFFflow {
          label {XON/XOFF flow control}
          callback {if (o->value() == 1)
  chkHamlibRTSCTSflow->value(0);
btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();}
          tooltip {Rig requires Xon/Xoff flow control} xywh {446 269 185 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.HamlibXONXOFFflow);}
        }
        Fl_Check_Button chk_hamlib_cw_is_lsb {
          label {CW is LSB mode}
          callback {progdefaults.hamlib_cw_islsb = o->value();}
          tooltip {Check if xcvr uses LSB for CW} xywh {636 243 142 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.hamlib_cw_islsb);}
        }
        Fl_Check_Button chk_hamlib_rtty_is_usb {
          label {RTTY is USB mode}
          callback {progdefaults.hamlib_rtty_isusb = o->value();}
          tooltip {Check if xcvr uses USB for RTTY} xywh {636 269 152 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.hamlib_rtty_isusb);}
        }
        Fl_Counter val_hamlib_mode_delay {
          label {Mode delay (msec)}
          callback {progdefaults.hamlib_mode_delay = (int)o->value();
progdefaults.changed = true;}
          tooltip {Delay NN msec after executing mode change} xywh {681 191 95 21} type Simple align 4 minimum 0 maximum 2000 step 100 value 200
          code0 {o->value(progdefaults.hamlib_mode_delay);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Counter2
        }
        Fl_Group listbox_sideband {
          label {Sideband:} open
          xywh {632 216 144 22} box DOWN_BOX color 7 align 4
          code0 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_ListBox
        } {}
        Fl_Input inpHamlibConfig {
          label {Advanced configuration:}
          callback {btnInitHAMLIB->labelcolor(FL_RED);
btnInitHAMLIB->redraw_label();}
          tooltip {Optional configuration
in format: param=val ...} xywh {231 313 460 24} align 5
          code0 {inpHamlibConfig->value(progdefaults.HamConfig.c_str());}
          code1 {inpHamlibConfig->labelsize(FL_NORMAL_SIZE);}
          class Fl_Input2
        }
        Fl_Button btnInitHAMLIB {
          label Initialize
          callback {progdefaults.initInterface();
o->labelcolor(FL_FOREGROUND_COLOR);
progdefaults.changed = true;}
          tooltip {Initialize hamlib interface} xywh {696 313 80 24}
        }
      }
      Fl_Button btn_hamlib_get_defaults {
        label Defaults
        callback {\#if USE_HAMLIB
hamlib_get_defaults();
\#endif}
        xywh {696 19 80 24}
      }
    }
    Fl_Group grpRigHardware {
      label {Rig Control/Hardware PTT} open
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Rig Control/Hardware PTT"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Rig Control/Hardware PTT"));}
      code3 {tab_tree->close(_("Rig Control"));}
    } {
      Fl_Group {} {open
        xywh {209 27 580 38} box ENGRAVED_FRAME
      } {
        Fl_Check_Button btnPTTrightchannel {
          label {PTT tone on right audio channel }
          callback {progdefaults.PTTrightchannel = o->value();
btnPTTrightchannel2->value(o->value());

if (o->value()) {
progdefaults.QSK = false;
btnQSK->value(0);
progdefaults.PseudoFSK = false;
chkPseudoFSK->value(0);
progdefaults.sig_on_right_channel = false;
chkAudioStereoOut->value(0);
}

progdefaults.changed = true;}
          tooltip {Can be used in lieu of or in addition to other PTT types} xywh {224 36 250 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.PTTrightchannel);}
        }
      }
      Fl_Group {} {
        label {h/w ptt device-pin} open
        xywh {209 67 580 184} box ENGRAVED_FRAME align 21
      } {
        Fl_Round_Button btnTTYptt {
          label {Use separate serial port PTT}
          callback {btnUsePPortPTT->value(0);
btnUseUHrouterPTT->value(0);
btn_gpio_ptt->value(0);

if (o->value()) {
progdefaults.TTYptt = true;
progdefaults.UsePPortPTT =
progdefaults.UseUHrouterPTT =
progdefaults.RigCatRTSptt =
progdefaults.RigCatDTRptt =
progdefaults.RigCatCMDptt =
progdefaults.cmedia_ptt =
progdefaults.gpio_ptt =
progdefaults.HamlibCMDptt = false;
} else
progdefaults.TTYptt = false;

btnInitHWPTT->labelcolor(FL_RED);
btnInitHWPTT->redraw();
progdefaults.changed = true;}
          xywh {224 94 220 20} down_box DOWN_BOX selection_color 1
        }
        Fl_Group inpTTYdev {
          label {Device:}
          callback {btnInitHWPTT->labelcolor(FL_RED);
btnInitHWPTT->redraw();
progdefaults.changed = true;} open
          xywh {217 135 350 22} box DOWN_BOX color 7 align 5
          code0 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_ComboBox
        } {}
        Fl_Round_Button btnSCU_17 {
          label {Port is second SCU-17 device}
          callback {progdefaults.SCU_17=o->value();
progdefaults.changed = true;}
          tooltip {Driver requires stop bits to be ZERO!} xywh {459 94 236 20} down_box DOWN_BOX selection_color 1
          code0 {o->value(progdefaults.SCU_17);}
        }
        Fl_Round_Button btnUsePPortPTT {
          label {Use parallel port PTT}
          callback {btnTTYptt->value(0);
btnUseUHrouterPTT->value(0);
btn_gpio_ptt->value(0);

if (o->value()) {
progdefaults.UsePPortPTT = true;
progdefaults.TTYptt =
progdefaults.UseUHrouterPTT =
progdefaults.RigCatRTSptt =
progdefaults.RigCatDTRptt =
progdefaults.RigCatCMDptt =
progdefaults.cmedia_ptt =
progdefaults.gpio_ptt =
progdefaults.HamlibCMDptt = false;
} else
progdefaults.UsePPortPTT = false;

btnInitHWPTT->labelcolor(FL_RED);
btnInitHWPTT->redraw();
progdefaults.changed = true;}
          xywh {224 168 170 20} down_box DOWN_BOX selection_color 1
        }
        Fl_Round_Button btnUseUHrouterPTT {
          label {Use uHRouter PTT}
          callback {btnTTYptt->value(0);
btnUsePPortPTT->value(0);
btn_gpio_ptt->value(0);

if (o->value()) {
progdefaults.UseUHrouterPTT = true;
progdefaults.TTYptt =
progdefaults.UsePPortPTT =
progdefaults.RigCatRTSptt =
progdefaults.RigCatDTRptt =
progdefaults.RigCatCMDptt =
progdefaults.cmedia_ptt =
progdefaults.gpio_ptt =
progdefaults.HamlibCMDptt = false;
} else
progdefaults.UseUHrouterPTT = false;

btnInitHWPTT->labelcolor(FL_RED);
btnInitHWPTT->redraw();
progdefaults.changed = true;}
          xywh {224 194 170 20} down_box DOWN_BOX selection_color 1
        }
        Fl_Round_Button btnRTSptt {
          label {Use RTS}
          callback {btnInitHWPTT->labelcolor(FL_RED);
btnInitHWPTT->redraw();
progdefaults.changed = true;}
          tooltip {RTS is PTT signal line} xywh {579 123 85 20} down_box DOWN_BOX
        }
        Fl_Round_Button btnRTSplusV {
          label {RTS = +V}
          callback {btnInitHWPTT->labelcolor(FL_RED);
btnInitHWPTT->redraw();
progdefaults.changed = true;}
          tooltip {Initial voltage on RTS} xywh {670 123 100 20} down_box DOWN_BOX
        }
        Fl_Round_Button btnDTRptt {
          label {Use DTR}
          callback {btnInitHWPTT->labelcolor(FL_RED);
btnInitHWPTT->redraw();
progdefaults.changed = true;}
          tooltip {DTR is PTT signal line} xywh {579 155 85 20} down_box DOWN_BOX
        }
        Fl_Round_Button btnDTRplusV {
          label {DTR = +V}
          callback {btnInitHWPTT->labelcolor(FL_RED);
btnInitHWPTT->redraw();
progdefaults.changed = true;}
          tooltip {Initial voltage on DTR} xywh {670 155 100 20} down_box DOWN_BOX
        }
        Fl_Check_Button btn_gpio_ptt {
          label {GPIO PTT (Pi specific controls)}
          callback {btnTTYptt->value(0);
btnUsePPortPTT->value(0);
btn_gpio_ptt2->value(o->value());

if (o->value()) {
progdefaults.gpio_ptt = true;
progdefaults.UseUHrouterPTT =
progdefaults.TTYptt =
progdefaults.UsePPortPTT =
progdefaults.RigCatRTSptt =
progdefaults.RigCatDTRptt =
progdefaults.RigCatCMDptt =
progdefaults.cmedia_ptt =
progdefaults.HamlibCMDptt = false;
} else
progdefaults.gpio_ptt = false;

btnInitHWPTT->labelcolor(FL_RED);
btnInitHWPTT2->labelcolor(FL_RED);
btnInitHWPTT->redraw();
btnInitHWPTT2->redraw();
progdefaults.changed = true;}
          tooltip {Select PTT on state} xywh {224 221 278 15} down_box DOWN_BOX labelfont 4
          code0 {o->value(progdefaults.gpio_ptt);}
        }
        Fl_Button btnInitHWPTT {
          label Initialize
          callback {progdefaults.initInterface();
o->labelcolor(FL_FOREGROUND_COLOR);
o->redraw();
btnInitHWPTT2->labelcolor(FL_FOREGROUND_COLOR);
btnInitHWPTT2->redraw();
progdefaults.changed = true;}
          tooltip {Initialize the H/W PTT interface} xywh {649 212 113 24}
        }
      }
      Fl_Group grpPTTdelays {
        label {PTT delays valid for all CAT/PTT types} open
        xywh {210 252 580 91} box ENGRAVED_FRAME align 21
      } {
        Fl_Counter cntPTT_on_delay {
          label {Start of transmit PTT delay}
          callback {progdefaults.PTT_on_delay = o->value();
progdefaults.changed = true;}
          tooltip {Delay NN msec before starting audio} xywh {274 279 100 21} align 8 minimum 0 maximum 5000 step 10
          code0 {o->value(progdefaults.PTT_on_delay);}
          code1 {o->lstep(100);}
        }
        Fl_Counter cntPTT_off_delay {
          label {PTT end of transmit delay}
          callback {progdefaults.PTT_off_delay = o->value();
progdefaults.changed = true;}
          tooltip {Delay NN msec before releasing PTT} xywh {274 309 100 21} align 8 minimum 0 maximum 5000 step 10
          code0 {o->value(progdefaults.PTT_off_delay);}
          code1 {o->lstep(100);}
        }
      }
    }
    Fl_Group grp_cmedia_ptt {
      label {C-Media PTT}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("C-Media PTT"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Rig Control/C-Media PTT"));}
      code3 {tab_tree->close(_("Rig Control"));}
    } {
      Fl_Group {} {
        label {C-Media audio codecs used in DRA Series have 8 user controllable GPIO pins. GPIO signal line 3 (pin 13) is used for PTT control.

Fldigi accesses the GPIO lines as a Human Interface Device (HID).  Discovered C-Media devices are enumerated in the 'C-Media device' list box.

On Linux: add a file named cmedia.rules to /etc/udev/rules.d/
The file should contain a single line

KERNEL=="hidraw*", SUBSYSTEM=="hidraw", MODE="0664", GROUP="plugdev"} open
        xywh {205 30 590 173} align 148
      } {}
      Fl_Round_Button btn_use_cmedia_PTT {
        label {Use C-Media PTT}
        callback {if (o->value()) {
progdefaults.cmedia_ptt = true;
progdefaults.UsePPortPTT =
progdefaults.UseUHrouterPTT =
progdefaults.RigCatRTSptt =
progdefaults.RigCatDTRptt =
progdefaults.RigCatCMDptt =
progdefaults.HamlibCMDptt = false;
btn_init_cmedia_PTT->labelcolor(FL_RED);
btn_init_cmedia_PTT->redraw();
} else {
progdefaults.cmedia_ptt = false;
close_cmedia();
}
progdefaults.changed = true;}
        xywh {235 218 220 20} down_box DOWN_BOX selection_color 1
      }
      Fl_Group inp_cmedia_dev {
        label {C-Media device}
        callback {close_cmedia();
progdefaults.cmedia_device = o->value();
btn_init_cmedia_PTT->labelcolor(FL_RED);
btn_init_cmedia_PTT->redraw();
progdefaults.changed = true;} open
        xywh {235 261 350 22} box DOWN_BOX color 7 align 5
        code0 {o->labelsize(FL_NORMAL_SIZE);}
        code1 {o->value(progdefaults.cmedia_device.c_str());}
        class Fl_ComboBox
      } {}
      Fl_Group inp_cmedia_GPIO_line {
        label {GPIO line}
        callback {progdefaults.cmedia_gpio_line = o->value();} open
        xywh {235 304 114 22} box DOWN_BOX color 7 align 5
        code0 {o->labelsize(FL_NORMAL_SIZE);}
        code1 {o->value(progdefaults.cmedia_gpio_line);}
        code2 {o->add("GPIO-1|GPIO-2|GPIO-3|GPIO-4");}
        class Fl_ComboBox
      } {}
      Fl_Button btn_init_cmedia_PTT {
        label Select
        callback {progdefaults.initInterface();
o->labelcolor(FL_FOREGROUND_COLOR);
progdefaults.changed = true;}
        tooltip {Select device & Initialize the H/W PTT interface} xywh {600 261 70 22}
      }
      Fl_Button btn_test_cmedia {
        label TEST
        callback {test_hid_ptt();}
        tooltip {Toggles PTT line 20x; check DRA-30 ptt LED} xywh {695 261 70 22}
        code0 {\#include "cmedia.h"}
      }
    }
    Fl_Group {} {
      label {Soundcard/Alerts}
      xywh {200 0 600 350} box ENGRAVED_BOX color 50 selection_color 50 align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Soundcard/Alerts"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Soundcard/Alerts"));}
    } {
      Fl_Group {} {open
        xywh {203 18 590 64} box ENGRAVED_BOX align 17
      } {
        Fl_File_Input inp_wav_fname_regex {
          label {REGEX detected wav}
          xywh {208 41 304 35} align 5
          code0 {o->value(progdefaults.BWSR_REGEX_MATCH.c_str());}
        }
        Fl_Button btn_select_regex_wav {
          label Select
          callback {Fl_Native_File_Chooser fnfc;
fnfc.title("Pick a file");
fnfc.type(Fl_Native_File_Chooser::BROWSE_FILE);
fnfc.filter("wav files\\t*.{mp3,wav}\\n");
fnfc.directory("./");           // default directory to use
// Show native chooser
switch ( fnfc.show() ) {
  case -1: break; // ERROR
  case  1: break; // CANCEL
  default: {
  	progdefaults.BWSR_REGEX_MATCH = fnfc.filename();
  	inp_wav_fname_regex->value(progdefaults.BWSR_REGEX_MATCH.c_str());
	progdefaults.REGEX_ALERT_MENU = 0;
	mnu_regex_alert_menu->value(progdefaults.REGEX_ALERT_MENU);
  	break; // FILE CHOSEN
  }
}}
          xywh {514 52 60 24}
          code0 {\#include <FL/Fl_Native_File_Chooser.H>}
        }
        Fl_Choice mnu_regex_alert_menu {
          label {Sound:}
          callback {if (o->value() > 0) {
  switch (o->value()) {
    case 1 : progdefaults.BWSR_REGEX_MATCH = "bark"; break;
    case 2 : progdefaults.BWSR_REGEX_MATCH = "checkout"; break;
    case 3 : progdefaults.BWSR_REGEX_MATCH = "diesel"; break;
    case 4 : progdefaults.BWSR_REGEX_MATCH = "steam_train"; break;
    case 5 : progdefaults.BWSR_REGEX_MATCH = "doesnot"; break;
    case 6 : progdefaults.BWSR_REGEX_MATCH = "beeboo"; break;
    case 7 : progdefaults.BWSR_REGEX_MATCH = "phone"; break;
    case 8 : progdefaults.BWSR_REGEX_MATCH = "dinner_bell"; break;
    case 9 : progdefaults.BWSR_REGEX_MATCH = "rtty_bell"; break;
    case 10 : progdefaults.BWSR_REGEX_MATCH = "standard_tone"; break;
  }
  inp_wav_fname_regex->value(progdefaults.BWSR_REGEX_MATCH.c_str());
}
progdefaults.REGEX_ALERT_MENU = o->value();} open
          xywh {578 52 135 24} box DOWN_BOX down_box BORDER_BOX color 53 align 5
          code0 {o->add("wav file|bark|checkout|diesel|steam_train|doesnot|beeboo|phone|dinner_bell|rtty_bell|standard_tone");}
          code1 {o->value(progdefaults.REGEX_ALERT_MENU);}
        } {}
        Fl_Check_Button btn_enable_regex_match_wa {
          label Enable
          callback {progdefaults.ENABLE_BWSR_REGEX_MATCH=o->value();}
          xywh {718 31 70 15} down_box DOWN_BOX
          code0 {o->value(progdefaults.ENABLE_BWSR_REGEX_MATCH);}
        }
        Fl_Button btn_test_regex_wav {
          label Test
          callback {audio_alert->alert(progdefaults.BWSR_REGEX_MATCH.c_str());}
          xywh {718 52 60 24}
          code0 {\#include "audio_alert.h"}
        }
      }
      Fl_Group {} {open
        xywh {203 81 590 64} box ENGRAVED_BOX align 17
      } {
        Fl_File_Input inp_wav_fname_mycall {
          label {MYCALL detected wav}
          xywh {208 103 304 35} align 5
          code0 {o->value(progdefaults.BWSR_MYCALL_MATCH.c_str());}
        }
        Fl_Button btn_select_mycall_wav {
          label Select
          callback {Fl_Native_File_Chooser fnfc;
fnfc.title("Pick a file");
fnfc.type(Fl_Native_File_Chooser::BROWSE_FILE);
fnfc.filter("wav files\\t*.{mp3,wav}\\n");
fnfc.directory("./");           // default directory to use
// Show native chooser
switch ( fnfc.show() ) {
  case -1: break; // ERROR
  case  1: break; // CANCEL
  default: {
  	progdefaults.BWSR_MYCALL_MATCH = fnfc.filename();
  	inp_wav_fname_mycall->value(progdefaults.BWSR_MYCALL_MATCH.c_str());
	progdefaults.MYCALL_ALERT_MENU = 0;
  	mnu_mycall_alert_menu->value(progdefaults.MYCALL_ALERT_MENU);
  	break; // FILE CHOSEN
  }
}}
          xywh {514 114 60 24}
        }
        Fl_Choice mnu_mycall_alert_menu {
          label {Sound:}
          callback {if (o->value() > 0) {
  switch (o->value()) {
    case 1 : progdefaults.BWSR_MYCALL_MATCH = "bark"; break;
    case 2 : progdefaults.BWSR_MYCALL_MATCH = "checkout"; break;
    case 3 : progdefaults.BWSR_MYCALL_MATCH = "diesel"; break;
    case 4 : progdefaults.BWSR_MYCALL_MATCH = "steam_train"; break;
    case 5 : progdefaults.BWSR_MYCALL_MATCH = "doesnot"; break;
    case 6 : progdefaults.BWSR_MYCALL_MATCH = "beeboo"; break;
    case 7 : progdefaults.BWSR_MYCALL_MATCH = "phone"; break;
    case 8 : progdefaults.BWSR_MYCALL_MATCH = "dinner_bell"; break;
    case 9 : progdefaults.BWSR_MYCALL_MATCH = "rtty_bell"; break;
    case 10 : progdefaults.BWSR_MYCALL_MATCH = "standard_tone"; break;
  }
  inp_wav_fname_mycall->value(progdefaults.BWSR_MYCALL_MATCH.c_str());
}
progdefaults.MYCALL_ALERT_MENU = o->value();} open
          xywh {578 114 135 24} box DOWN_BOX down_box BORDER_BOX color 53 align 5
          code0 {o->add("wav file|bark|checkout|diesel|steam_train|doesnot|beeboo|phone|dinner_bell|rtty_bell|standard_tone");}
          code1 {o->value(progdefaults.MYCALL_ALERT_MENU);}
        } {}
        Fl_Check_Button btn_enable_mycall_match_wav {
          label Enable
          callback {progdefaults.ENABLE_BWSR_MYCALL_MATCH=o->value();}
          xywh {718 92 70 15} down_box DOWN_BOX
          code0 {o->value(progdefaults.ENABLE_BWSR_MYCALL_MATCH);}
        }
        Fl_Button btn_test_mycall_wav {
          label Test
          callback {audio_alert->alert(progdefaults.BWSR_MYCALL_MATCH.c_str());}
          xywh {718 114 60 24}
        }
      }
      Fl_Group {} {open
        xywh {203 144 590 64} box ENGRAVED_BOX align 17
      } {
        Fl_File_Input inp_wav_fname_rsid {
          label {RsID audio alert wav}
          xywh {208 166 304 35} align 5
          code0 {o->value(progdefaults.RSID_MATCH.c_str());}
        }
        Fl_Button btn_select_rsid_wav {
          label Select
          callback {Fl_Native_File_Chooser fnfc;
fnfc.title("Pick a file");
fnfc.type(Fl_Native_File_Chooser::BROWSE_FILE);
fnfc.filter("wav files\\t*.{mp3,wav}\\n");
fnfc.directory("./");           // default directory to use
// Show native chooser
switch ( fnfc.show() ) {
  case -1: break; // ERROR
  case  1: break; // CANCEL
  default: {
  	progdefaults.RSID_MATCH = fnfc.filename();
  	inp_wav_fname_rsid->value(progdefaults.RSID_MATCH.c_str());
  	progdefaults.RSID_ALERT_MENU = 0;
  	mnu_rsid_alert_menu->value(progdefaults.RSID_ALERT_MENU);
  	break; // FILE CHOSEN
  }
}}
          xywh {514 177 60 24}
        }
        Fl_Choice mnu_rsid_alert_menu {
          label {Sound:}
          callback {if (o->value() > 0) {
  switch (o->value()) {
    case 1 : progdefaults.RSID_MATCH = "bark"; break;
    case 2 : progdefaults.RSID_MATCH = "checkout"; break;
    case 3 : progdefaults.RSID_MATCH = "diesel"; break;
    case 4 : progdefaults.RSID_MATCH = "steam_train"; break;
    case 5 : progdefaults.RSID_MATCH = "doesnot"; break;
    case 6 : progdefaults.RSID_MATCH = "beeboo"; break;
    case 7 : progdefaults.RSID_MATCH = "phone"; break;
    case 8 : progdefaults.RSID_MATCH = "dinner_bell"; break;
    case 9 : progdefaults.RSID_MATCH = "rtty_bell"; break;
    case 10 : progdefaults.RSID_MATCH = "standard_tone"; break;
  }
  inp_wav_fname_rsid->value(progdefaults.RSID_MATCH.c_str());
}
progdefaults.RSID_ALERT_MENU = o->value();} open
          xywh {578 177 135 24} box DOWN_BOX down_box BORDER_BOX color 53 align 5
          code0 {o->add("wav file|bark|checkout|diesel|steam_train|doesnot|beeboo|phone|dinner_bell|rtty_bell|standard_tone");}
          code1 {o->value(progdefaults.RSID_ALERT_MENU);}
        } {}
        Fl_Check_Button btn_enable_rsid_match_wav {
          label Enable
          callback {progdefaults.ENABLE_RSID_MATCH=o->value();}
          xywh {718 156 70 15} down_box DOWN_BOX
          code0 {o->value(progdefaults.ENABLE_RSID_MATCH);}
        }
        Fl_Button btn_test_rsid_wav {
          label Test
          callback {audio_alert->alert(progdefaults.RSID_MATCH.c_str());}
          xywh {718 177 60 24}
        }
      }
      Fl_Group {} {open
        xywh {203 207 590 114} box ENGRAVED_BOX align 17
      } {
        Fl_File_Input inp_wav_flmsg_rcvd {
          label {flmsg received wav}
          xywh {208 227 304 35} align 5
          code0 {o->value(progdefaults.RX_EXTRACT_MSG_RCVD.c_str());}
        }
        Fl_Button btn_select_rx_extract_msg {
          label Select
          callback {Fl_Native_File_Chooser fnfc;
fnfc.title("Pick a file");
fnfc.type(Fl_Native_File_Chooser::BROWSE_FILE);
fnfc.filter("wav files\\t*.{mp3,wav}\\n");
fnfc.directory("./");           // default directory to use
// Show native chooser
switch ( fnfc.show() ) {
  case -1: break; // ERROR
  case  1: break; // CANCEL
  default: {
  	progdefaults.RX_EXTRACT_MSG_RCVD = fnfc.filename();
  	inp_wav_flmsg_rcvd->value(progdefaults.RX_EXTRACT_MSG_RCVD.c_str());
  	progdefaults.RX_EXTRACT_ALERT_MENU = 0;
  	mnu_rx_extract_alert_menu->value(progdefaults.RX_EXTRACT_ALERT_MENU);
  	break; // FILE CHOSEN
  }
}}
          xywh {514 238 60 24}
        }
        Fl_Choice mnu_rx_extract_alert_menu {
          label {Sound:}
          callback {if (o->value() > 0) {
  switch (o->value()) {
    case 1 : progdefaults.RX_EXTRACT_MSG_RCVD = "bark"; break;
    case 2 : progdefaults.RX_EXTRACT_MSG_RCVD = "checkout"; break;
    case 3 : progdefaults.RX_EXTRACT_MSG_RCVD = "diesel"; break;
    case 4 : progdefaults.RX_EXTRACT_MSG_RCVD = "steam_train"; break;
    case 5 : progdefaults.RX_EXTRACT_MSG_RCVD = "doesnot"; break;
    case 6 : progdefaults.RX_EXTRACT_MSG_RCVD = "beeboo"; break;
    case 7 : progdefaults.RX_EXTRACT_MSG_RCVD = "phone"; break;
    case 8 : progdefaults.RX_EXTRACT_MSG_RCVD = "dinner_bell"; break;
    case 9 : progdefaults.RX_EXTRACT_MSG_RCVD = "rtty_bell"; break;
    case 10 : progdefaults.RX_EXTRACT_MSG_RCVD = "standard_tone"; break;
  }
  inp_wav_flmsg_rcvd->value(progdefaults.RX_EXTRACT_MSG_RCVD.c_str());
}
progdefaults.RX_EXTRACT_ALERT_MENU = o->value();} open
          xywh {578 238 135 24} box DOWN_BOX down_box BORDER_BOX color 53 align 5
          code0 {o->add("wav file|bark|checkout|diesel|steam_train|doesnot|beeboo|phone|dinner_bell|rtty_bell|standard_tone");}
          code1 {o->value(progdefaults.RX_EXTRACT_ALERT_MENU);}
        } {}
        Fl_Check_Button btn_enable_flmsg_wav {
          label Enable
          callback {progdefaults.ENABLE_RX_EXTRACT_MSG_RCVD=o->value();}
          xywh {718 216 70 15} down_box DOWN_BOX
          code0 {o->value(progdefaults.ENABLE_RX_EXTRACT_MSG_RCVD);}
        }
        Fl_Button btn_test_flmsg_extract_wav {
          label Test
          callback {audio_alert->alert(progdefaults.RX_EXTRACT_MSG_RCVD.c_str());}
          xywh {718 238 60 24}
        }
        Fl_File_Input inp_wav_flmsg_timed_out {
          label {flmsg timed out wav}
          xywh {208 282 304 35} align 5
          code0 {o->value(progdefaults.RX_EXTRACT_TIMED_OUT.c_str());}
        }
        Fl_Button btn_select_rx_extract_timed_out {
          label Select
          callback {Fl_Native_File_Chooser fnfc;
fnfc.title("Pick a file");
fnfc.type(Fl_Native_File_Chooser::BROWSE_FILE);
fnfc.filter("wav files\\t*.{mp3,wav}\\n");
fnfc.directory("./");           // default directory to use
// Show native chooser
switch ( fnfc.show() ) {
  case -1: break; // ERROR
  case  1: break; // CANCEL
  default: {
  	progdefaults.RX_EXTRACT_TIMED_OUT = fnfc.filename();
  	inp_wav_flmsg_timed_out->value(progdefaults.RX_EXTRACT_TIMED_OUT.c_str());
  	progdefaults.TIMED_OUT_ALERT_MENU = 0;
  	mnu_rx_timed_out_alert_menu->value(progdefaults.TIMED_OUT_ALERT_MENU);
  	break; // FILE CHOSEN
  }
}}
          xywh {514 293 60 24}
        }
        Fl_Choice mnu_rx_timed_out_alert_menu {
          label {Sound:}
          callback {if (o->value() > 0) {
  switch (o->value()) {
    case 1 : progdefaults.RX_EXTRACT_TIMED_OUT = "bark"; break;
    case 2 : progdefaults.RX_EXTRACT_TIMED_OUT = "checkout"; break;
    case 3 : progdefaults.RX_EXTRACT_TIMED_OUT = "diesel"; break;
    case 4 : progdefaults.RX_EXTRACT_TIMED_OUT = "steam_train"; break;
    case 5 : progdefaults.RX_EXTRACT_TIMED_OUT = "doesnot"; break;
    case 6 : progdefaults.RX_EXTRACT_TIMED_OUT = "beeboo"; break;
    case 7 : progdefaults.RX_EXTRACT_TIMED_OUT = "phone"; break;
    case 8 : progdefaults.RX_EXTRACT_TIMED_OUT = "dinner_bell"; break;
    case 9 : progdefaults.RX_EXTRACT_TIMED_OUT = "rtty_bell"; break;
    case 10 : progdefaults.RX_EXTRACT_TIMED_OUT = "standard_tone"; break;
  }
  inp_wav_flmsg_timed_out->value(progdefaults.RX_EXTRACT_TIMED_OUT.c_str());
}
progdefaults.TIMED_OUT_ALERT_MENU = o->value();} open
          xywh {578 293 135 24} box DOWN_BOX down_box BORDER_BOX color 53 align 5
          code0 {o->add("wav file|bark|checkout|diesel|steam_train|doesnot|beeboo|phone|dinner_bell|rtty_bell|standard_tone");}
          code1 {o->value(progdefaults.TIMED_OUT_ALERT_MENU);}
        } {}
        Fl_Button btn_test_rx_extract_timed_out {
          label Test
          callback {audio_alert->alert(progdefaults.RX_EXTRACT_TIMED_OUT.c_str());}
          xywh {718 293 60 24}
        }
        Fl_Check_Button btn_enable_flmsg_time_out_wav {
          label Enable
          callback {progdefaults.ENABLE_RX_EXTRACT_TIMED_OUT=o->value();}
          xywh {718 271 70 15} down_box DOWN_BOX
          code0 {o->value(progdefaults.ENABLE_RX_EXTRACT_TIMED_OUT);}
        }
      }
      Fl_Value_Slider sldrAlertVolume {
        label {Alert volume}
        callback {progdefaults.alert_volume = (int)o->value();
progdefaults.changed = true;}
        xywh {256 325 403 20} type Horizontal align 8 maximum 100 step 1 value 20 textsize 14
        code0 {o->value(progdefaults.alert_volume);}
        code1 {o->labelsize(FL_NORMAL_SIZE); o->textsize(FL_NORMAL_SIZE);}
        class Fl_Value_Slider2
      }
    }
    Fl_Group grpSoundDevices {
      label {Soundcard/Devices}
      xywh {200 -4 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Soundcard/Devices"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Soundcard/Devices"));}
    } {
      Fl_Group AudioOSS {open
        xywh {255 20 500 45} box ENGRAVED_FRAME
      } {
        Fl_Round_Button {btnAudioIO[0]} {
          label OSS
          callback {sound_update(SND_IDX_OSS);
progdefaults.changed = true;
resetSoundCard();}
          tooltip {Use OSS audio server} xywh {267 30 53 25} down_box DOWN_BOX selection_color 1
        }
        Fl_Input_Choice menuOSSDev {
          label {Device:}
          callback {scDevice[0] = scDevice[1] = progdefaults.OSSdevice = o->value();
resetSoundCard();
progdefaults.changed = true;} open
          tooltip {Select device} xywh {572 30 165 25}
          code0 {o->value(progdefaults.OSSdevice.c_str());}
        } {}
      }
      Fl_Group AudioPort {open
        xywh {255 65 500 79} box ENGRAVED_FRAME
      } {
        Fl_Round_Button {btnAudioIO[1]} {
          label PortAudio
          callback {sound_update(SND_IDX_PORT);
progdefaults.changed = true;
resetSoundCard();}
          tooltip {Use Port Audio server} xywh {267 93 95 25} down_box DOWN_BOX selection_color 1
        }
        Fl_Choice menuPortInDev {
          label {Capture:}
          callback {scDevice[0] = progdefaults.PortInDevice = o->text();
progdefaults.PortInIndex = reinterpret_cast<intptr_t>(o->mvalue()->user_data());
resetSoundCard();
progdefaults.changed = true;} open
          tooltip {Audio input device} xywh {427 76 310 25} down_box BORDER_BOX
        } {}
        Fl_Choice menuPortOutDev {
          label {Playback:}
          callback {scDevice[1] = progdefaults.PortOutDevice = o->text();
progdefaults.PortOutIndex = reinterpret_cast<intptr_t>(o->mvalue()->user_data());
resetSoundCard();
progdefaults.changed = true;} open
          tooltip {Audio output device} xywh {427 111 310 25} down_box BORDER_BOX
        } {}
      }
      Fl_Group AudioPulse {open
        xywh {255 145 500 45} box ENGRAVED_FRAME
      } {
        Fl_Round_Button {btnAudioIO[2]} {
          label PulseAudio
          callback {sound_update(SND_IDX_PULSE);
progdefaults.changed = true;
resetSoundCard();}
          tooltip {Use Pulse Audio server} xywh {267 156 100 25} down_box DOWN_BOX selection_color 1
        }
        Fl_Input inpPulseServer {
          label {Server string:}
          callback {scDevice[0] = scDevice[1] = progdefaults.PulseServer = o->value();
resetSoundCard();
progdefaults.changed = true;}
          tooltip {Leave this blank or refer to
http://www.pulseaudio.org/wiki/ServerStrings} xywh {512 156 225 24}
          code0 {o->value(progdefaults.PulseServer.c_str());}
          code1 {inpPulseServer->labelsize(FL_NORMAL_SIZE);}
          class Fl_Input2
        }
      }
      Fl_Group AudioNull {open
        xywh {255 190 135 45} box ENGRAVED_FRAME
      } {
        Fl_Round_Button {btnAudioIO[3]} {
          label {File I/O only}
          callback {sound_update(SND_IDX_NULL);
progdefaults.changed = true;
resetSoundCard();}
          tooltip {NO AUDIO DEVICE AVAILABLE (or testing)} xywh {268 200 100 25} down_box DOWN_BOX selection_color 1
        }
      }
      Fl_Group AudioDuplex {open
        xywh {390 190 365 45} box ENGRAVED_FRAME
      } {
        Fl_Round_Button btn_is_full_duplex {
          label {Device supports full duplex}
          callback {progdefaults.is_full_duplex = o->value();
progdefaults.changed = true;
resetSoundCard();}
          tooltip {Capture/Playback supports full duplex operation} xywh {433 200 225 25} down_box DOWN_BOX value 1 selection_color 1
          code0 {o->value(progdefaults.is_full_duplex);}
        }
      }
      Fl_Group AudioAlerts {open
        xywh {255 235 500 90} box ENGRAVED_FRAME align 0
      } {
        Fl_Choice menuAlertsDev {
          label {Audio device shared by Audio Alerts and Rx Monitor}
          callback {progdefaults.AlertDevice = o->text();
progdefaults.AlertIndex = reinterpret_cast<intptr_t>(o->mvalue()->user_data());
progdefaults.changed = true;} open
          tooltip {Audio output device} xywh {265 260 365 25} down_box BORDER_BOX align 5
        } {}
        Fl_Round_Button btn_enable_audio_alerts {
          label Enable
          callback {progdefaults.enable_audio_alerts = o->value();
progdefaults.changed = true;
reset_audio_alerts();}
          tooltip {First select audio alert playback device} xywh {657 260 76 25} down_box DOWN_BOX selection_color 1
          code0 {o->value(progdefaults.enable_audio_alerts);}
        }
        Fl_Box {} {
          label {Note: must be selected and enabled for Rx Audio monitoring!}
          xywh {265 295 473 22} align 16
        }
      }
    }
    Fl_Group {} {
      label {Soundcard/Right channel}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Soundcard/Right channel"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Soundcard/Right channel"));}
    } {
      Fl_Group {} {
        label {Transmit Usage} open
        xywh {236 33 550 246} box ENGRAVED_FRAME align 21
      } {
        Fl_Check_Button chkAudioStereoOut {
          label {Modem signal on left and right channels}
          callback {progdefaults.sig_on_right_channel = o->value();
progdefaults.changed = true;
if (o->value()) {
  progdefaults.QSK = false;
  btnQSK->value(0);
  btnQSK2->value(0);
  progdefaults.PseudoFSK = false;
  chkPseudoFSK->value(0);
  chkPseudoFSK2->value(0);
  progdefaults.PTTrightchannel = false;
  btnPTTrightchannel->value(0);
  btnPTTrightchannel2->value(0);
}}
          tooltip {Left and right channels both contain modem audio} xywh {376 54 280 20} down_box DOWN_BOX
          code0 {chkAudioStereoOut->value(progdefaults.sig_on_right_channel);}
        }
        Fl_Check_Button chkReverseAudio {
          label {Reverse Left/Right channels}
          callback {progdefaults.ReverseAudio = o->value();
progdefaults.changed = true;}
          tooltip {Software reversal of left-right audio channels} xywh {376 84 270 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.ReverseAudio);}
        }
        Fl_Group {} {
          label {...
These controls are on other tabs.
They are replicated here for convenience.
You may change the state from either location.
...} open
          xywh {286 107 454 162} box ENGRAVED_FRAME align 18
        } {
          Fl_Check_Button btnPTTrightchannel2 {
            label {PTT tone on right audio channel }
            callback {progdefaults.PTTrightchannel = o->value();
btnPTTrightchannel->value(o->value());
progdefaults.changed = true;
if (o->value()) {
  progdefaults.QSK = false;
  btnQSK->value(0);
  btnQSK2->value(0);
  progdefaults.PseudoFSK = false;
  chkPseudoFSK->value(0);
  chkPseudoFSK2->value(0);
  progdefaults.sig_on_right_channel = false;
  chkAudioStereoOut->value(0);
}}
            tooltip {1000 Hz tone when PTT enabled
Can be used in lieu of or in addition to other PTT types} xywh {376 114 250 20} down_box DOWN_BOX
            code0 {o->value(progdefaults.PTTrightchannel);}
          }
          Fl_Check_Button btnQSK2 {
            label {CW QSK signal on right channel}
            callback {progdefaults.QSK = o->value();
btnQSK->value(o->value());
progdefaults.changed = true;
if (o->value()) {
  progdefaults.sig_on_right_channel = false;
  chkAudioStereoOut->value(0);
  progdefaults.PTTrightchannel = false;
  btnPTTrightchannel->value(0);
  btnPTTrightchannel2->value(0);
}}
            tooltip {Generate 1000 Hz square wave signal on right channel} xywh {376 144 211 20} down_box DOWN_BOX
            code0 {o->value(progdefaults.QSK);}
          }
          Fl_Check_Button chkPseudoFSK2 {
            label {Pseudo-FSK on right audio channel}
            callback {progdefaults.PseudoFSK = o->value();
chkPseudoFSK->value(o->value());
progdefaults.changed = true;
if (o->value()) {
  progdefaults.sig_on_right_channel = false;
  chkAudioStereoOut->value(0);
  progdefaults.PTTrightchannel = false;
  btnPTTrightchannel->value(0);
  btnPTTrightchannel2->value(0);
}}
            tooltip {Create 1000 Hz square wave on right channel} xywh {376 175 270 20} down_box DOWN_BOX
            code0 {o->value(progdefaults.PseudoFSK);}
          }
        }
      }
      Fl_Group {} {
        label {Receive Usage} open
        xywh {236 282 550 60} box ENGRAVED_FRAME align 21
      } {
        Fl_Check_Button chkReverseRxAudio {
          label {Reverse Left/Right channels}
          callback {progdefaults.ReverseRxAudio = o->value();
progdefaults.changed = true;}
          tooltip {Software reversal of left-right audio channels} xywh {376 300 270 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.ReverseRxAudio);}
        }
      }
    }
    Fl_Group {} {
      label {Soundcard/Settings}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Soundcard/Settings"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Soundcard/Settings"));}
    } {
      Fl_Group grpAudioSampleRate {
        label {Sample rate} open
        xywh {260 48 490 90} box ENGRAVED_FRAME align 21
      } {
        Fl_Group menuInSampleRate {
          label Capture
          callback {progdefaults.in_sample_rate = o->index() > 1 ? strtol(o->value(), 0, 10) : o->index();
resetSoundCard();
progdefaults.changed = true;} open
          tooltip {Force a specific sample rate. Select "Native" if "Auto"
does not work well with your audio device.} xywh {284 77 100 22} box DOWN_BOX color 7 align 8
          code0 {o->clear_changed();}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_ListBox
        } {}
        Fl_Group menuOutSampleRate {
          label Playback
          callback {progdefaults.out_sample_rate = o->index() > 1 ? strtol(o->value(), 0, 10) : o->index();
resetSoundCard();
progdefaults.changed = true;} open
          xywh {284 107 100 22} box DOWN_BOX color 7 align 8
          code0 {o->clear_changed();}
          code1 {o->tooltip(menuInSampleRate->tooltip());}
          code2 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_ListBox
        } {}
        Fl_Group menuSampleConverter {
          label Converter
          callback {if ((o->index()) == FLDIGI_SRC_BEST)
    fl_alert2("The best quality SINC interpolator has very high CPU overhead");
progdefaults.sample_converter = sample_rate_converters[o->index()];
resetSoundCard();
progdefaults.changed = true;
o->tooltip(src_get_description(progdefaults.sample_converter));} open
          tooltip {Set the type of resampler used of offset correction} xywh {524 77 216 22} box DOWN_BOX color 7 align 5
          code0 {\#include <FL/fl_ask.H>}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_ListBox
        } {}
      }
      Fl_Group {} {
        label Corrections open
        xywh {260 138 490 62} box ENGRAVED_FRAME align 21
      } {
        Fl_Spinner cntRxRateCorr {
          label {RX ppm}
          callback {progdefaults.RX_corr = (int)o->value();
cnt_fmt_rx_ppm->value(progdefaults.RX_corr);
progdefaults.changed = true;}
          tooltip {RX sound card correction} xywh {284 165 85 20} align 8
          code0 {o->step(1);}
          code1 {o->minimum(-50000);}
          code2 {o->maximum(50000);}
          code3 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Spinner2
        }
        Fl_Spinner cntTxRateCorr {
          label {TX ppm}
          callback {progdefaults.TX_corr = (int)o->value();
progdefaults.changed = true;}
          tooltip {TX sound card correction} xywh {431 165 85 20} align 8
          code0 {o->step(1);}
          code1 {o->minimum(-50000);}
          code2 {o->maximum(50000);}
          code3 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Spinner2
        }
        Fl_Spinner cntTxOffset {
          label {TX offset}
          callback {progdefaults.TxOffset = (int)o->value();
progdefaults.changed = true;}
          tooltip {Difference between Rx & Tx freq (rig offset)} xywh {591 165 85 20} align 8
          code0 {o->value(progdefaults.TxOffset);}
          code1 {o->step(1);}
          code2 {o->minimum(-50); o->maximum(50);}
          code3 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Spinner2
        }
      }
      Fl_Group {} {
        label {Frequency Analysis / FMT Rx Correction} open
        xywh {260 200 490 76} box ENGRAVED_FRAME align 21
      } {
        Fl_Button bnt_dec_rit {
          label {@|<}
          callback {progdefaults.RIT -= 0.1;
cntRIT->value(progdefaults.RIT);
progdefaults.FMT_freq_corr=o->value();
cnt_fmt_freq_corr->value(progdefaults.FMT_freq_corr);
progdefaults.changed = true;}
          xywh {285 227 18 24} labelsize 10 align 16
        }
        Fl_Counter cntRIT {
          label {Frequency Correction}
          callback {progdefaults.RIT=o->value();
progdefaults.FMT_freq_corr=o->value();
cnt_fmt_freq_corr->value(progdefaults.FMT_freq_corr);}
          tooltip {Used ONLY for frequency analysis mode} xywh {303 227 130 24} minimum -5 maximum 5 step 0.001
          code0 {o->value(progdefaults.RIT);}
          code1 {o->lstep(0.01);}
        }
        Fl_Button btn_incr_rit {
          label {@>|}
          callback {progdefaults.RIT += 0.1;
cntRIT->value(progdefaults.RIT);
progdefaults.FMT_freq_corr=o->value();
cnt_fmt_freq_corr->value(progdefaults.FMT_freq_corr);
progdefaults.changed = true;}
          xywh {433 227 18 24} labelsize 10 align 16
        }
      }
    }
    Fl_Group {} {
      label {Signal Level}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Soundcard/Signal Level"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Soundcard/Signal Level"));}
    } {
      Fl_Box {} {
        label {Signal Levels}
        xywh {340 39 316 21}
      }
      Fl_Box lowcolor2 {
        xywh {365 96 21 21} box DIAMOND_DOWN_BOX color 0
        code0 {o->color(progdefaults.LowSignal);}
      }
      Fl_Button btnLowSignal2 {
        label Low
        callback {progdefaults.LowSignal = fl_show_colormap(progdefaults.LowSignal);
lowcolor->color(progdefaults.LowSignal);
lowcolor->redraw();
lowcolor2->color(progdefaults.LowSignal);
lowcolor2->redraw();
progdefaults.changed = true;}
        xywh {402 96 70 21}
      }
      Fl_Box normalcolor2 {
        xywh {365 142 21 21} box DIAMOND_DOWN_BOX color 2
        code0 {o->color(progdefaults.NormSignal);}
      }
      Fl_Counter cnt_normal_signal_level2 {
        label {Transition
Level (dB)}
        callback {progdefaults.normal_signal_level = o->value();

if (progdefaults.normal_signal_level > progdefaults.high_signal_level)
  progdefaults.high_signal_level = progdefaults.normal_signal_level + 0.1;

if (progdefaults.high_signal_level > progdefaults.over_signal_level)
  progdefaults.over_signal_level = progdefaults.high_signal_level + 0.1;

if (progdefaults.over_signal_level > 0)
  progdefaults.over_signal_level = 0;

cnt_normal_signal_level->value(progdefaults.normal_signal_level);
cnt_high_signal_level->value(progdefaults.high_signal_level);
cnt_over_signal_level->value(progdefaults.over_signal_level);

cnt_normal_signal_level2->value(progdefaults.normal_signal_level);
cnt_high_signal_level2->value(progdefaults.high_signal_level);
cnt_over_signal_level2->value(progdefaults.over_signal_level);}
        xywh {480 119 114 21} align 1 minimum -90 maximum 0 hide
        code0 {o->value(progdefaults.normal_signal_level);}
        code1 {o->lstep(1.0);}
      }
      Fl_Button btnNormalSignal2 {
        label Normal
        callback {progdefaults.NormSignal = fl_show_colormap(progdefaults.NormSignal);
normalcolor->color(progdefaults.NormSignal);
normalcolor->redraw();

normalcolor2->color(progdefaults.NormSignal);
normalcolor2->redraw();

progdefaults.changed = true;}
        xywh {402 142 70 21}
      }
      Fl_Box highcolor2 {
        xywh {365 189 21 21} box DIAMOND_DOWN_BOX color 3
        code0 {o->color(progdefaults.HighSignal);}
      }
      Fl_Counter cnt_high_signal_level2 {
        callback {progdefaults.high_signal_level = o->value();

if (progdefaults.normal_signal_level > progdefaults.high_signal_level)
  progdefaults.high_signal_level = progdefaults.normal_signal_level + 0.1;

if (progdefaults.high_signal_level > progdefaults.over_signal_level)
  progdefaults.over_signal_level = progdefaults.high_signal_level + 0.1;

if (progdefaults.over_signal_level > 0)
  progdefaults.over_signal_level = 0;
  
cnt_normal_signal_level->value(progdefaults.normal_signal_level);
cnt_high_signal_level->value(progdefaults.high_signal_level);
cnt_over_signal_level->value(progdefaults.over_signal_level);

cnt_normal_signal_level2->value(progdefaults.normal_signal_level);
cnt_high_signal_level2->value(progdefaults.high_signal_level);
cnt_over_signal_level2->value(progdefaults.over_signal_level);}
        xywh {480 165 114 21} minimum -90 maximum 0
        code0 {o->value(progdefaults.high_signal_level);}
        code1 {o->lstep(1.0);}
      }
      Fl_Button btnHighSignal2 {
        label High
        callback {progdefaults.HighSignal = fl_show_colormap(progdefaults.HighSignal);
highcolor->color(progdefaults.HighSignal);
highcolor->redraw();

highcolor2->color(progdefaults.HighSignal);
highcolor2->redraw();

progdefaults.changed = true;}
        xywh {402 189 70 21}
      }
      Fl_Box overcolor2 {
        xywh {365 236 21 21} box DIAMOND_DOWN_BOX color 1
        code0 {o->color(progdefaults.OverSignal);}
      }
      Fl_Counter cnt_over_signal_level2 {
        callback {progdefaults.over_signal_level = o->value();

if (progdefaults.normal_signal_level > progdefaults.high_signal_level)
  progdefaults.high_signal_level = progdefaults.normal_signal_level + 0.1;

if (progdefaults.high_signal_level > progdefaults.over_signal_level)
  progdefaults.over_signal_level = progdefaults.high_signal_level + 0.1;

if (progdefaults.over_signal_level > 0)
  progdefaults.over_signal_level = 0;
  
cnt_normal_signal_level->value(progdefaults.normal_signal_level);
cnt_high_signal_level->value(progdefaults.high_signal_level);
cnt_over_signal_level->value(progdefaults.over_signal_level);

cnt_normal_signal_level2->value(progdefaults.normal_signal_level);
cnt_high_signal_level2->value(progdefaults.high_signal_level);
cnt_over_signal_level2->value(progdefaults.over_signal_level);}
        xywh {480 212 114 21} minimum -90 maximum 0
        code0 {o->value(progdefaults.over_signal_level);}
        code1 {o->lstep(1.0);}
      }
      Fl_Button btnOverSignal2 {
        label Over
        callback {progdefaults.OverSignal = fl_show_colormap(progdefaults.OverSignal);
overcolor->color(progdefaults.OverSignal);
overcolor->redraw();

overcolor2->color(progdefaults.OverSignal);
overcolor2->redraw();

progdefaults.changed = true;}
        xywh {402 236 70 21}
      }
      Fl_Progress {} {
        label label
        xywh {295 289 416 25} hide
      }
      Fl_Progress sig_vumeter2 {
        label label
        xywh {322 280 360 24}
        code0 {\#include "vumeter.h"}
        class vumeter
      }
      Fl_Box {} {
        label {Input signal level}
        xywh {383 307 237 17}
      }
      Fl_Button btn_default_signal_levels2 {
        label Default
        callback {cnt_normal_signal_level->value(
  progdefaults.normal_signal_level = -60.0);
cnt_high_signal_level->value(
  progdefaults.high_signal_level = -6.0);
cnt_over_signal_level->value(
  progdefaults.over_signal_level = -3.0);
  
cnt_normal_signal_level2->value(progdefaults.normal_signal_level);
cnt_high_signal_level2->value(progdefaults.high_signal_level);
cnt_over_signal_level2->value(progdefaults.over_signal_level);}
        xywh {618 166 70 20}
      }
    }
    Fl_Group {} {
      label {Soundcard/Wav file recording}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Soundcard/Wav file recording"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Soundcard/Wav file recording"));}
      code3 {tab_tree->close(_("Soundcard"));}
    } {
      Fl_Group listbox_wav_samplerate {
        label {Wav write sample rate}
        callback {progdefaults.wavSampleRate = o->index();
progdefaults.changed = true;} open
        tooltip {Pick baud rate from list} xywh {399 91 150 24} box DOWN_BOX color 7 align 5
        code0 {o->add("8000|11025|16000|22050|24000|44100|48000");}
        code1 {o->index(progdefaults.wavSampleRate);}
        code2 {o->labelsize(FL_NORMAL_SIZE);}
        class Fl_ListBox
      } {}
      Fl_Check_Button btn_record_both {
        label {Record both channels}
        callback {progdefaults.record_both_channels=o->value();
progdefaults.changed=true;}
        xywh {399 140 176 15} down_box DOWN_BOX
        code0 {o->value(progdefaults.record_both_channels);}
      }
    }
    Fl_Group {} {
      label {UI/Browser/Channels}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("UI/Browser/Channels"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("UI/Browser/Channels"));}
    } {
      Fl_Spinner cntChannels {
        label {Channels, first channel starts at waterfall lower limit}
        callback {progdefaults.VIEWERchannels = (int)(o->value());
initViewer();}
        tooltip {Change \# of psk viewer channels} xywh {278 54 50 24} align 8 maximum 30 value 30
        code0 {o->minimum(5); o->maximum(30); o->step(1);}
        code1 {o->value(progdefaults.VIEWERchannels);}
        code2 {o->labelsize(FL_NORMAL_SIZE);}
        class Fl_Spinner2
      }
      Fl_Spinner cntTimeout {
        label {Inactivity timeout}
        callback {progdefaults.VIEWERtimeout = (int)(o->value());
progdefaults.changed = true;}
        tooltip {Clear channel text after
\# seconds of inactivity} xywh {278 90 50 24} align 8 value 10
        code0 {o->minimum(1); o->maximum(180); o->step(1);}
        code1 {o->value(progdefaults.VIEWERtimeout);}
        code2 {o->labelsize(FL_NORMAL_SIZE);}
        class Fl_Spinner2
      }
      Fl_Group listboxViewerLabel {
        label {Channel label}
        callback {progdefaults.VIEWERlabeltype = o->index();
initViewer();
progdefaults.changed = true;} open
        tooltip {Appearance of label on each channel} xywh {278 130 150 24} box DOWN_BOX color 7 align 8
        code0 {listboxViewerLabel->add(_("None")); listboxViewerLabel->add(_("Audio frequency"));}
        code1 {listboxViewerLabel->add(_("Radio frequency")); listboxViewerLabel->add(_("Channel number"));}
        code3 {listboxViewerLabel->index(progdefaults.VIEWERlabeltype);
                       o->labelsize(FL_NORMAL_SIZE);}
        class Fl_ListBox
      } {}
      Fl_Button btnViewerFont {
        label {Font...}
        callback {font_browser->fontNumber(progdefaults.ViewerFontnbr);
font_browser->fontSize(progdefaults.ViewerFontsize);
font_browser->fontColor(FL_FOREGROUND_COLOR);
font_browser->fontFilter(Font_Browser::FIXED_WIDTH);
font_browser->callback(cbViewerFontBrowser);
font_browser->show();}
        tooltip {select browser font} xywh {563 130 70 24}
      }
      Fl_Check_Button btnFixedIntervals {
        label {Fixed Intervals}
        callback {progdefaults.VIEWERfixed = o->value();
progdefaults.changed = true;
initViewer();}
        tooltip {Force channel spacing to even 100 Hz increments} xywh {468 92 165 20} down_box DOWN_BOX value 1
        code0 {o->value(progdefaults.VIEWERfixed);}
      }
      Fl_Check_Button btnMarquee {
        label {Continuous scrolling}
        callback {progdefaults.VIEWERmarquee = o->value();
progdefaults.changed = true;
initViewer();}
        tooltip {ON - Marquee style
OFF - Clear & restart} xywh {278 168 165 20} down_box DOWN_BOX
        code0 {o->value(progdefaults.VIEWERmarquee);}
      }
      Fl_Check_Button btnAscend {
        label {Lowest freq on bottom of viewer}
        callback {progdefaults.VIEWERascend = o->value();
progdefaults.changed = true;
initViewer();}
        tooltip {Change positions of low to high channels} xywh {278 192 253 20} down_box DOWN_BOX
        code0 {o->value(progdefaults.VIEWERascend);}
      }
      Fl_Check_Button btnBrowserHistory {
        label {Play back history when active channel selected}
        callback {progdefaults.VIEWERhistory = o->value();
progdefaults.changed = true;}
        tooltip {Audio stream history decoded on selected signal} xywh {278 217 356 20} down_box DOWN_BOX
        code0 {o->value(progdefaults.VIEWERhistory);}
      }
    }
    Fl_Group {} {
      label {UI/Browser/Colors}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("UI/Browser/Colors"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("UI/Browser/Colors"));}
    } {
      Fl_Button bwsrHiLite_1_color {
        label {HiLite 1}
        callback {progdefaults.bwsrHiLight1 = fl_show_colormap((Fl_Color)progdefaults.bwsrHiLight1);
bwsrHiLite_1_color->color((Fl_Color)progdefaults.bwsrHiLight1);
viewer_redraw();
progdefaults.changed = true;}
        tooltip {PSK/RTTY Viewer HiLite Color 1} xywh {259 113 62 22} align 1
        code0 {bwsrHiLite_1_color->color((Fl_Color)progdefaults.bwsrHiLight1);}
        code1 {\#include "Viewer.h"}
      }
      Fl_Button bwsrHiLite_2_color {
        label {HiLite 2}
        callback {progdefaults.bwsrHiLight2 = fl_show_colormap((Fl_Color)progdefaults.bwsrHiLight2);
bwsrHiLite_2_color->color((Fl_Color)progdefaults.bwsrHiLight2);
viewer_redraw();
progdefaults.changed = true;}
        tooltip {PSK/RTTY Viewer HiLite Color 2} xywh {361 113 62 22} align 1
        code0 {bwsrHiLite_2_color->color((Fl_Color)progdefaults.bwsrHiLight2);}
      }
      Fl_Button bwsrHiLite_even_lines {
        label Even
        callback {progdefaults.bwsrBackgnd2 = fl_show_colormap((Fl_Color)progdefaults.bwsrBackgnd2);
bwsrHiLite_even_lines->color((Fl_Color)progdefaults.bwsrBackgnd2);
viewer_redraw();
progdefaults.changed = true;;}
        tooltip {Even lines} xywh {464 113 62 22} align 1
        code0 {bwsrHiLite_even_lines->color((Fl_Color)progdefaults.bwsrBackgnd2);}
      }
      Fl_Button bwsrHiLite_odd_lines {
        label Odd
        callback {progdefaults.bwsrBackgnd1 = fl_show_colormap((Fl_Color)progdefaults.bwsrBackgnd1);
bwsrHiLite_odd_lines->color((Fl_Color)progdefaults.bwsrBackgnd1);
viewer_redraw();
progdefaults.changed = true;}
        tooltip {Odd lines} xywh {567 113 62 22} align 1
        code0 {bwsrHiLite_odd_lines->color((Fl_Color)progdefaults.bwsrBackgnd1);}
      }
      Fl_Button bwsrHiLite_select {
        label Select
        callback {progdefaults.bwsrSelect = fl_show_colormap((Fl_Color)progdefaults.bwsrSelect);
bwsrHiLite_select->color((Fl_Color)progdefaults.bwsrSelect);
viewer_redraw();
progdefaults.changed = true;}
        tooltip {Select line} xywh {671 113 62 22} align 1
        code0 {bwsrHiLite_select->color((Fl_Color)progdefaults.bwsrSelect);}
      }
    }
    Fl_Group {} {
      label {UI/Browser/Detection Level}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("UI/Browser/Detection Level"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("UI/Browser/Detection Level"));}
    } {
      Fl_Button bwsrSliderColor {
        label Backgnd
        callback {uchar r, g, b;
    r = progdefaults.bwsrSliderColor.R;
    g = progdefaults.bwsrSliderColor.G;
    b = progdefaults.bwsrSliderColor.B;

    if (fl_color_chooser("Slider Color", r, g, b) == 0)
        return;
    progdefaults.bwsrSliderColor.R = r;
    progdefaults.bwsrSliderColor.G = g;
    progdefaults.bwsrSliderColor.B = b;
    o->color(fl_rgb_color(r,g,b));
    o->redraw();
    sldrViewerSquelch->color(fl_rgb_color(r,g,b));
    sldrViewerSquelch->redraw();
    mvsquelch->color(fl_rgb_color(r,g,b));
    mvsquelch->redraw();

    progdefaults.changed = true;}
        tooltip {Background color of signal viewer squelch control} xywh {294 118 112 24} align 1
        code0 {bwsrSliderColor->color(fl_rgb_color(progdefaults.bwsrSliderColor.R, progdefaults.bwsrSliderColor.G,progdefaults.bwsrSliderColor.B));}
      }
      Fl_Button bwsrSldrSelColor {
        label Button
        callback {uchar r, g, b;
    r = progdefaults.bwsrSldrSelColor.R;
    g = progdefaults.bwsrSldrSelColor.G;
    b = progdefaults.bwsrSldrSelColor.B;

    if (fl_color_chooser("Button Color", r, g, b) == 0)
        return;
    progdefaults.bwsrSldrSelColor.R = r;
    progdefaults.bwsrSldrSelColor.G = g;
    progdefaults.bwsrSldrSelColor.B = b;
    o->color(fl_rgb_color(r,g,b));
    o->redraw();
    sldrViewerSquelch->selection_color(fl_rgb_color(r,g,b));
    sldrViewerSquelch->redraw();
    mvsquelch->selection_color(fl_rgb_color(r,g,b));
    mvsquelch->redraw();

    progdefaults.changed = true;}
        tooltip {Slider hilite color of signal viewer squelch control} xywh {545 118 112 24} align 1
        code0 {bwsrSldrSelColor->color(fl_rgb_color(progdefaults.bwsrSldrSelColor.R, progdefaults.bwsrSldrSelColor.G,progdefaults.bwsrSliderColor.B));}
      }
    }
    Fl_Group {} {
      label {UI/General}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("UI/General"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("UI/General"));}
    } {
      Fl_Group {} {open
        xywh {206 21 590 76} box ENGRAVED_FRAME
      } {
        Fl_Check_Button btnShowTooltips {
          label {Show tooltips}
          callback {progdefaults.tooltips = o->value();
Fl_Tooltip::enable(progdefaults.tooltips);
progdefaults.changed = true;}
          tooltip {Enable / disable tooltips} xywh {276 34 120 20} down_box DOWN_BOX value 1
          code0 {o->value(progdefaults.tooltips);}
        }
        Fl_Check_Button chkMenuIcons {
          label {Show menu icons}
          callback {progdefaults.menuicons = o->value();
icons::toggle_icon_labels();
progdefaults.changed = true;}
          tooltip {Enable / disable icons on menus} xywh {420 34 150 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.menuicons);}
        }
        Fl_Group listboxScheme {
          label {UI scheme}
          callback {progdefaults.ui_scheme = o->value();
    Fl::scheme(progdefaults.ui_scheme.c_str());

    progdefaults.changed = true;} open
          tooltip {Change application look and feel} xywh {394 63 80 20} box DOWN_BOX color 7 align 8
          code0 {listboxScheme->add("base");}
          code1 {listboxScheme->add("gtk+");}
          code2 {listboxScheme->add("plastic");}
          code3 {listboxScheme->value(progdefaults.ui_scheme.c_str());
                       o->labelsize(FL_NORMAL_SIZE);}
          class Fl_ListBox
        } {}
        Fl_Button bVisibleModes {
          label {Visible modes}
          callback {mode_browser->label(o->label());
mode_browser->callback(toggle_visible_modes);
mode_browser->show_(&progdefaults.visible_modes);
progdefaults.changed = true;}
          tooltip {Select modes for menu access} xywh {259 63 110 20}
        }
        Fl_Group listbox_language {
          label {UI language}
          callback {progdefaults.ui_language = o->index();
progdefaults.changed = true;} open
          tooltip {Changes take effect on next program startup} xywh {576 63 170 20} box DOWN_BOX color 7 labelsize 12 align 5
          code0 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_ListBox
        } {}
      }
      Fl_Group {} {open
        xywh {206 103 590 34} box ENGRAVED_FRAME align 21
      } {
        Fl_Check_Button btn_rx_lowercase {
          label {Print CW / RTTY / THROB / CONTESTIA in lowercase}
          callback {progdefaults.rx_lowercase = o->value();
progdefaults.changed = true;}
          xywh {246 110 441 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.rx_lowercase);}
        }
      }
      Fl_Group {} {open
        xywh {206 139 294 65} box ENGRAVED_FRAME align 21
      } {
        Fl_Check_Button btn_tx_lowercase {
          label {Transmit lower case text}
          callback {progdefaults.tx_lowercase = o->value();
progdefaults.changed = true;}
          xywh {241 148 199 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.tx_lowercase);}
        }
      }
      Fl_Group {} {
        label {Exit prompts}
        xywh {206 206 590 76} box ENGRAVED_FRAME align 21
      } {
        Fl_Check_Button btn_save_config_on_exit {
          label {Prompt to save Configuration}
          callback {progdefaults.SaveConfig = o->value();
progdefaults.changed = true;}
          xywh {246 230 264 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.SaveConfig);}
        }
        Fl_Check_Button btn2_save_macros_on_exit {
          label {Prompt to save macro file}
          callback {btn_save_macros_on_exit->value(o->value());
progdefaults.SaveMacros = o->value();
progdefaults.changed = true;}
          tooltip {Write current macro set on program exit} xywh {246 252 264 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.SaveMacros);}
        }
        Fl_Check_Button btn2NagMe {
          label {Prompt to save log}
          callback {btnNagMe->value(o->value());
progdefaults.NagMe=o->value();
progdefaults.changed = true;}
          tooltip {Bug me about saving log entries} xywh {523 230 188 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.NagMe);}
        }
        Fl_Check_Button btn2_confirm_exit {
          label {Confirm exit}
          callback {btn2_confirm_exit->value(o->value());
progdefaults.confirmExit=o->value();
progdefaults.changed = true;}
          xywh {523 252 226 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.confirmExit);}
        }
      }
      Fl_Group {} {
        label {Check for updates} open
        xywh {206 285 590 60} box ENGRAVED_FRAME align 21
      } {
        Fl_Check_Button btn_check_for_updates {
          label {Check for updates when starting program}
          callback {progdefaults.check_for_updates = o->value();
progdefaults.changed = true;}
          xywh {246 308 367 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.check_for_updates);}
        }
      }
      Fl_Group {} {open
        xywh {501 139 295 65} box ENGRAVED_FRAME align 21
      } {
        Fl_Check_Button btn_tx_show_timer {
          label {Show TX timer}
          callback {progdefaults.show_tx_timer = o->value();
progdefaults.changed = true;}
          xywh {520 148 219 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.show_tx_timer);}
        }
        Fl_Spinner val_tx_timeout {
          label {TX deadmen timeout (mins)}
          callback {progdefaults.tx_timeout=o->value();
progdefaults.changed = true;}
          xywh {521 173 45 24} align 8 minimum 0 maximum 60 value 10
          code0 {o->value(progdefaults.tx_timeout);}
        }
      }
    }
    Fl_Group {} {
      label {UI/Macro buttons}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("UI/Macro buttons"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("UI/Macro buttons"));}
    } {
      Fl_Group {} {open
        xywh {205 205 590 35} box ENGRAVED_FRAME
      } {
        Fl_Check_Button btnMacroMouseWheel {
          label {Mouse wheel active on macro buttons}
          callback {progdefaults.macro_wheel = o->value();
progdefaults.changed = true;}
          tooltip {enable mouse wheel control of macro bar} xywh {262 213 296 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.macro_wheel);}
        }
      }
      Fl_Group {} {
        label {Number and position of macro bars} open
        xywh {205 25 590 180} box ENGRAVED_FRAME align 21
      } {
        Fl_Counter cnt_macro_height {
          label {Button Height}
          callback {progdefaults.macro_height = (int)o->value();
progdefaults.changed = true;
set_macroLabels();
UI_select();}
          tooltip {Height of macro bar} xywh {415 50 89 22} type Simple align 8 minimum 18 maximum 30 step 1 value 20
          code0 {o->value(progdefaults.macro_height);}
        }
        Fl_Round_Button btn_scheme_0 {
          label {One above Rx/Tx}
          callback {progdefaults.mbar_scheme = 0;
set_macroLabels();
UI_select();
progdefaults.changed = true;}
          tooltip {Single macro bar below logging panel
variable height} xywh {261 78 144 22} type Radio down_box ROUND_DOWN_BOX
        }
        Fl_Round_Button btn_scheme_1 {
          label {One above waterfall}
          callback {progdefaults.mbar_scheme = 1;
set_macroLabels();
UI_select();
progdefaults.changed = true;}
          xywh {261 103 144 22} type Radio down_box ROUND_DOWN_BOX
        }
        Fl_Round_Button btn_scheme_2 {
          label {One below waterfall}
          callback {progdefaults.mbar_scheme = 2;
set_macroLabels();
UI_select();
progdefaults.changed = true;}
          xywh {261 128 144 22} type Radio down_box ROUND_DOWN_BOX
        }
        Fl_Round_Button btn_scheme_3 {
          label {Two scheme 1}
          callback {progdefaults.mbar_scheme = 3;
progdefaults.changed = true;
set_macroLabels();
UI_select();}
          xywh {428 78 144 22} type Radio down_box ROUND_DOWN_BOX
        }
        Fl_Round_Button btn_scheme_4 {
          label {Two scheme 2}
          callback {progdefaults.mbar_scheme = 4;
progdefaults.changed = true;
set_macroLabels();
UI_select();}
          xywh {596 78 144 22} type Radio down_box ROUND_DOWN_BOX
        }
        Fl_Round_Button btn_scheme_5 {
          label {Two scheme 3}
          callback {progdefaults.mbar_scheme = 5;
progdefaults.changed = true;
set_macroLabels();
UI_select();}
          xywh {428 103 144 22} type Radio down_box ROUND_DOWN_BOX
        }
        Fl_Round_Button btn_scheme_6 {
          label {Two scheme 4}
          callback {progdefaults.mbar_scheme = 6;
progdefaults.changed = true;
set_macroLabels();
UI_select();}
          xywh {596 103 144 22} type Radio down_box ROUND_DOWN_BOX
        }
        Fl_Round_Button btn_scheme_7 {
          label {Two scheme 5}
          callback {progdefaults.mbar_scheme = 7;
progdefaults.changed = true;
set_macroLabels();
UI_select();}
          xywh {428 128 144 22} type Radio down_box ROUND_DOWN_BOX
        }
        Fl_Round_Button btn_scheme_8 {
          label {Two scheme 6}
          callback {progdefaults.mbar_scheme = 8;
progdefaults.changed = true;
set_macroLabels();
UI_select();}
          xywh {596 128 144 22} type Radio down_box ROUND_DOWN_BOX
        }
        Fl_Round_Button btn_scheme_9 {
          label {Two scheme 7}
          callback {progdefaults.mbar_scheme = 9;
progdefaults.changed = true;
set_macroLabels();
UI_select();}
          xywh {428 153 144 22} type Radio down_box ROUND_DOWN_BOX
        }
        Fl_Round_Button btn_scheme_10 {
          label {Two scheme 8}
          callback {progdefaults.mbar_scheme = 10;
progdefaults.changed = true;
set_macroLabels();
UI_select();}
          xywh {596 153 144 22} type Radio down_box ROUND_DOWN_BOX
        }
        Fl_Round_Button btn_scheme_11 {
          label {Two scheme 9}
          callback {progdefaults.mbar_scheme = 11;
progdefaults.changed = true;
set_macroLabels();
UI_select();}
          xywh {428 178 144 22} type Radio down_box ROUND_DOWN_BOX
        }
        Fl_Round_Button btn_scheme_12 {
          label {Two scheme 10}
          callback {progdefaults.mbar_scheme = 12;
progdefaults.changed = true;
set_macroLabels();
UI_select();}
          xywh {596 178 144 22} type Radio down_box ROUND_DOWN_BOX
        }
      }
      Fl_Group {} {open
        xywh {205 240 590 55} box ENGRAVED_FRAME
      } {
        Fl_Check_Button btnUseLastMacro {
          label {Load last used macro file at start}
          callback {progdefaults.UseLastMacro = o->value();
update_main_title();
progdefaults.changed = true;}
          tooltip {ON - use last set of macros
OFF - use default set} xywh {262 245 277 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.UseLastMacro);}
        }
        Fl_Check_Button btnDisplayMacroFilename {
          label {Display macro filename at start}
          callback {progdefaults.DisplayMacroFilename = o->value();
progdefaults.changed = true;}
          tooltip {The filename is written to the RX text area} xywh {262 267 277 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.DisplayMacroFilename);}
        }
        Fl_Check_Button btn_save_macros_on_exit {
          label {Prompt to save macro file}
          callback {btn2_save_macros_on_exit->value(o->value());
progdefaults.SaveMacros = o->value();
progdefaults.changed = true;}
          tooltip {Write current macro set on program exit} xywh {545 245 216 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.SaveMacros);}
        }
      }
      Fl_Group {} {open
        xywh {205 295 295 45} box ENGRAVED_FRAME
      } {
        Fl_Check_Button btn_macro_post {
          label {Show macro control codes}
          callback {progdefaults.macro_post = o->value();
progdefaults.changed = true;}
          tooltip {print ^! execution codes in Rx panel} xywh {265 307 216 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.macro_post);}
        }
      }
      Fl_Group {} {open
        xywh {500 295 295 45} box ENGRAVED_FRAME
      } {
        Fl_Check_Button btn_4bar_position {
          label {4 bar macro set below Tx}
          callback {progdefaults.four_bar_position = o->value();
UI_select();
progdefaults.changed = true;}
          tooltip {Position the 4 bar macro set below Tx panel
Default above Rx panel} xywh {532 307 216 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.four_bar_position);}
        }
      }
    }
    Fl_Group {} {
      label {UI/Rx Text}
      xywh {200 2 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("UI/Rx Text"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("UI/Rx Text"));}
    } {
      Fl_Check_Button btnRXClicks {
        label {Single-click to capture}
        callback {progdefaults.rxtext_clicks_qso_data = o->value();
progdefaults.changed = true;}
        tooltip {Enable for single click capure of text in Rx panel} xywh {242 118 191 20} down_box DOWN_BOX
        code0 {o->value(progdefaults.rxtext_clicks_qso_data);}
      }
      Fl_Check_Button btnRXTooltips {
        label {callsign tooltips in received text}
        callback {progdefaults.rxtext_tooltips = o->value();
progdefaults.changed = true;}
        tooltip {Popup info after a 2 second hover on a callsign} xywh {484 118 254 20} down_box DOWN_BOX
        code0 {o->value(progdefaults.rxtext_tooltips);}
      }
      Fl_Input inpNonword {
        label {Word delimiters}
        callback {progdefaults.nonwordchars = o->value();
progdefaults.changed = true;}
        tooltip {RX text QSO data entry is bounded by the non-word characters
defined here. Tab and newline are automatically included.} xywh {384 84 279 24} textfont 4
        code0 {o->value(progdefaults.nonwordchars.c_str());}
        code1 {o->labelsize(FL_NORMAL_SIZE);}
        class Fl_Input2
      }
      Fl_Check_Button btnUSunits {
        label {US units of distance (QRB)}
        callback {progdefaults.us_units = o->value();
progdefaults.changed = true;}
        tooltip {Enable for single click capure of text in Rx panel} xywh {484 147 220 20} down_box DOWN_BOX
        code0 {o->value(progdefaults.us_units);}
      }
      Fl_Check_Button btn_clear_fields {
        label {Clear log fields - new CALL}
        callback {progdefaults.clear_fields=o->value();
progdefaults.changed = true;}
        xywh {242 147 198 20} down_box DOWN_BOX
        code0 {o->value(progdefaults.clear_fields);}
      }
    }
    Fl_Group {} {
      label {UI/Touch}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("UI/Touch"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("UI/Touch"));}
      code3 {tab_tree->close(_("UI"));}
    } {
      Fl_Box {} {
        label {Note:
These configuration items are useful for but not unique to using fldigi on a
touch screen device such as a tablet.}
        xywh {216 44 570 52} align 20
      }
      Fl_Group {} {
        label {Arrow Key Control of Frequency Entry} open
        xywh {216 110 570 102} box ENGRAVED_BOX align 21
      } {
        Fl_Box {} {
          label {Right/Left = 1 x LSD
Up/Dn= 10 x LSD
Shift - Right/Left = 100 x LSD
Shift - Up/Dn = 1000 x LSD}
          xywh {231 135 290 74} align 16
        }
        Fl_Choice sel_lsd {
          label {Right/Left
Select Least Signficant Digit}
          callback {progdefaults.sel_lsd = o->value();
set_freq_control_lsd();
progdefaults.changed = true;} open
          xywh {621 171 90 24} down_box BORDER_BOX align 1
          code0 {o->add("1 Hz|10 Hz|100 Hz|1 kHz");}
          code1 {o->value(progdefaults.sel_lsd);}
        } {}
      }
      Fl_Group {} {
        label {Rx / Tx Panels} open
        xywh {216 221 570 64} box ENGRAVED_BOX align 21
      } {
        Fl_Check_Button btn_rxtx_swap {
          label {Tx above Rx}
          callback {progdefaults.rxtx_swap = o->value();
progdefaults.changed = true;
UI_select();}
          tooltip {Enable to put Tx panel above Rx panel} xywh {336 225 116 30} down_box DOWN_BOX
          code0 {o->value(progdefaults.rxtx_swap);}
        }
      }
    }
    Fl_Group {} {
      label {Waterfall/Buttons & Controls}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Waterfall/Buttons & Controls"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Waterfall/Buttons & Controls"));}
    } {
      Fl_Box {} {
        label {Enable check box to show each respective operator control}
        xywh {285 70 446 25} box FLAT_BOX align 16
      }
      Fl_Check_Button btnWF_UIrev {
        label Reverse
        callback {progdefaults.WF_UIrev = o->value();
progdefaults.changed = true;
WF_UI();}
        xywh {312 103 150 20} down_box DOWN_BOX value 1
        code0 {o->value(progdefaults.WF_UIrev);}
      }
      Fl_Check_Button btnWF_UIx1 {
        label {WF Magnification}
        callback {progdefaults.WF_UIx1 = o->value();
progdefaults.changed = true;
WF_UI();}
        xywh {531 103 162 20} down_box DOWN_BOX value 1
        code0 {o->value(progdefaults.WF_UIx1);}
      }
      Fl_Check_Button btnWF_UIwfcarrier {
        label {WF carrier}
        callback {progdefaults.WF_UIwfcarrier = o->value();
progdefaults.changed = true;
WF_UI();}
        xywh {312 134 150 20} down_box DOWN_BOX value 1
        code0 {o->value(progdefaults.WF_UIwfcarrier);}
      }
      Fl_Check_Button btnWF_UIwfshift {
        label {WF Shift Controls}
        callback {progdefaults.WF_UIwfshift = o->value();
progdefaults.changed = true;
WF_UI();}
        xywh {531 134 150 20} down_box DOWN_BOX value 1
        code0 {o->value(progdefaults.WF_UIwfshift);}
      }
      Fl_Check_Button btnWF_UIwfreflevel {
        label {WF ref level}
        callback {progdefaults.WF_UIwfreflevel = o->value();
progdefaults.changed = true;
WF_UI();}
        xywh {312 166 150 20} down_box DOWN_BOX value 1
        code0 {o->value(progdefaults.WF_UIwfreflevel);}
      }
      Fl_Check_Button btnWF_UIwfdrop {
        label {WF drop rate}
        callback {progdefaults.WF_UIwfdrop = o->value();
progdefaults.changed = true;
WF_UI();}
        xywh {531 166 150 20} down_box DOWN_BOX value 1
        code0 {o->value(progdefaults.WF_UIwfdrop);}
      }
      Fl_Check_Button btnWF_UIwfampspan {
        label {WF amp span}
        callback {progdefaults.WF_UIwfampspan = o->value();
progdefaults.changed = true;
WF_UI();}
        xywh {312 198 150 20} down_box DOWN_BOX value 1
        code0 {o->value(progdefaults.WF_UIwfampspan);}
      }
      Fl_Check_Button btnWF_UIwfstore {
        label {WF Store}
        callback {progdefaults.WF_UIwfstore = o->value();
progdefaults.changed = true;
WF_UI();}
        xywh {531 198 150 20} down_box DOWN_BOX value 1
        code0 {o->value(progdefaults.WF_UIwfstore);}
      }
      Fl_Check_Button btnWF_UIwfmode {
        label {WF mode}
        callback {progdefaults.WF_UIwfmode = o->value();
progdefaults.changed = true;
WF_UI();}
        xywh {312 230 150 20} down_box DOWN_BOX value 1
        code0 {o->value(progdefaults.WF_UIwfmode);}
      }
      Fl_Check_Button btnWF_UIqsy {
        label QSY
        callback {progdefaults.WF_UIqsy = o->value();
progdefaults.changed = true;
WF_UI();}
        xywh {531 230 150 20} down_box DOWN_BOX value 1
        code0 {o->value(progdefaults.WF_UIqsy);}
      }
      Fl_Check_Button btnWF_UIxmtlock {
        label {XMT lock}
        callback {progdefaults.WF_UIxmtlock = o->value();
progdefaults.changed = true;
WF_UI();}
        xywh {531 262 150 20} down_box DOWN_BOX value 1
        code0 {o->value(progdefaults.WF_UIxmtlock);}
      }
      Fl_Button btn_wf_enable_all {
        label {Enable all}
        callback {btnWF_UIrev->value(progdefaults.WF_UIrev = 1);
btnWF_UIwfcarrier->value(progdefaults.WF_UIwfcarrier = 1);
btnWF_UIwfreflevel->value(progdefaults.WF_UIwfreflevel = 1);
btnWF_UIwfampspan->value(progdefaults.WF_UIwfampspan = 1);
btnWF_UIwfmode->value(progdefaults.WF_UIwfmode = 1);

btnWF_UIx1->value(progdefaults.WF_UIx1 = 1);
btnWF_UIwfshift->value(progdefaults.WF_UIwfshift = 1);
btnWF_UIwfdrop->value(progdefaults.WF_UIwfdrop = 1);
btnWF_UIwfstore->value(progdefaults.WF_UIwfstore = 1);
btnWF_UIqsy->value(progdefaults.WF_UIqsy = 1);
btnWF_UIxmtlock->value(progdefaults.WF_UIxmtlock = 1);

progdefaults.changed = true;
WF_UI();}
        xywh {356 285 88 20}
      }
      Fl_Button btn_wf_disable_all {
        label {Disable all}
        callback {btnWF_UIrev->value(progdefaults.WF_UIrev = 0);
btnWF_UIwfcarrier->value(progdefaults.WF_UIwfcarrier = 0);
btnWF_UIwfreflevel->value(progdefaults.WF_UIwfreflevel = 0);
btnWF_UIwfampspan->value(progdefaults.WF_UIwfampspan = 0);
btnWF_UIwfmode->value(progdefaults.WF_UIwfmode = 0);

btnWF_UIx1->value(progdefaults.WF_UIx1 = 0);
btnWF_UIwfshift->value(progdefaults.WF_UIwfshift = 0);
btnWF_UIwfdrop->value(progdefaults.WF_UIwfdrop = 0);
btnWF_UIwfstore->value(progdefaults.WF_UIwfstore = 0);
btnWF_UIqsy->value(progdefaults.WF_UIqsy = 0);
btnWF_UIxmtlock->value(progdefaults.WF_UIxmtlock = 0);

progdefaults.changed = true;
WF_UI();}
        xywh {555 285 88 20}
      }
    }
    Fl_Group {} {
      label {Waterfall/Display}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Waterfall/Display"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Waterfall/Display"));}
    } {
      Fl_Group {} {
        label {Colors and cursors} open
        xywh {249 32 496 190} box ENGRAVED_FRAME align 21
      } {
        Fl_Button WF_Palette {
          label aa
          callback {progdefaults.changed = true;}
          xywh {259 68 380 24} box DOWN_BOX color 0 labelsize 12 align 5
          code0 {\#include "colorbox.h"}
          code1 {o->label(progdefaults.PaletteName.c_str());}
          code2 {o->labelsize(FL_NORMAL_SIZE);}
          class colorbox
        }
        Fl_Button {btnColor[0]} {
          callback {selectColor(0);
progdefaults.changed = true;}
          tooltip {Change color} xywh {259 94 20 24}
        }
        Fl_Button {btnColor[1]} {
          callback {selectColor(1);
progdefaults.changed = true;}
          tooltip {Change color} xywh {304 94 20 24}
        }
        Fl_Button {btnColor[2]} {
          callback {selectColor(2);
progdefaults.changed = true;}
          tooltip {Change color} xywh {349 94 20 24}
        }
        Fl_Button {btnColor[3]} {
          callback {selectColor(3);
progdefaults.changed = true;}
          tooltip {Change color} xywh {394 94 20 24}
        }
        Fl_Button {btnColor[4]} {
          callback {selectColor(4);
progdefaults.changed = true;}
          tooltip {Change color} xywh {439 94 20 24}
        }
        Fl_Button {btnColor[5]} {
          callback {selectColor(5);
progdefaults.changed = true;}
          tooltip {Change color} xywh {484 94 20 24}
        }
        Fl_Button {btnColor[6]} {
          callback {selectColor(6);
progdefaults.changed = true;}
          tooltip {Change color} xywh {529 94 20 24}
        }
        Fl_Button {btnColor[7]} {
          callback {selectColor(7);
progdefaults.changed = true;}
          tooltip {Change color} xywh {574 94 20 24}
        }
        Fl_Button {btnColor[8]} {
          callback {selectColor(8);
progdefaults.changed = true;}
          tooltip {Change color} xywh {619 94 20 24}
        }
        Fl_Button btnLoadPalette {
          label {Load...}
          callback {loadPalette();
progdefaults.changed = true;}
          tooltip {Load a new palette} xywh {649 68 70 24}
          code0 {\#include "colorbox.h"}
        }
        Fl_Button btnSavePalette {
          label {Save...}
          callback {savePalette();}
          tooltip {Save this palette} xywh {649 94 70 24}
          code0 {\#include "colorbox.h"}
        }
        Fl_Group {} {
          label Bandwidth open
          xywh {258 122 113 96} box ENGRAVED_FRAME align 21
        } {
          Fl_Check_Button btnUseCursorLines {
            label ON
            callback {progdefaults.UseCursorLines = o->value();
if (o->value())
    btnCursorBWcolor->activate();
else
    btnCursorBWcolor->deactivate();
progdefaults.changed = true;}
            tooltip {Show cursor with bandwidth lines} xywh {260 142 56 20} down_box DOWN_BOX
            code0 {o->value(progdefaults.UseCursorLines);}
          }
          Fl_Button btnCursorBWcolor {
            label Color
            callback {if (fl_color_chooser("Cursor BW Lines",
  progdefaults.cursorLineRGBI.R,
  progdefaults.cursorLineRGBI.G,
  progdefaults.cursorLineRGBI.B) ) {
o->color(fl_rgb_color(progdefaults.cursorLineRGBI.R,progdefaults.cursorLineRGBI.G,progdefaults.cursorLineRGBI.B));
o->redraw();
progdefaults.changed = true;
}}
            tooltip {Change color} xywh {260 165 20 20} color 3 align 8
            code0 {\#include <FL/Fl_Color_Chooser.H>}
            code1 {o->color(fl_rgb_color(progdefaults.cursorLineRGBI.R,progdefaults.cursorLineRGBI.G,progdefaults.cursorLineRGBI.B));}
          }
          Fl_Check_Button btnUseWideCursor {
            label Wide
            callback {progdefaults.UseWideCursor = o->value();
progdefaults.changed = true;}
            tooltip {Show bandwidth tracks on waterfall} xywh {260 188 62 20} down_box DOWN_BOX
            code0 {o->value(progdefaults.UseWideCursor);}
          }
        }
        Fl_Group {} {
          label {Center line} open
          xywh {382 122 113 96} box ENGRAVED_FRAME align 21
        } {
          Fl_Check_Button btnUseCursorCenterLine {
            label ON
            callback {progdefaults.UseCursorCenterLine = o->value();
progdefaults.changed = true;}
            tooltip {Show cursor with center line} xywh {388 142 48 20} down_box DOWN_BOX
            code0 {o->value(progdefaults.UseCursorCenterLine);}
          }
          Fl_Button btnCursorCenterLineColor {
            label Color
            callback {if (fl_color_chooser("Cursor Center Line",
  progdefaults.cursorCenterRGBI.R,
  progdefaults.cursorCenterRGBI.G,
  progdefaults.cursorCenterRGBI.B) ) {
o->color(fl_rgb_color(progdefaults.cursorCenterRGBI.R,progdefaults.cursorCenterRGBI.G,progdefaults.cursorCenterRGBI.B));
o->redraw();
progdefaults.changed = true;
}}
            tooltip {Change color} xywh {388 165 20 20} color 7 align 8
            code0 {o->color(fl_rgb_color(progdefaults.cursorCenterRGBI.R,progdefaults.cursorCenterRGBI.G,progdefaults.cursorCenterRGBI.B));}
          }
          Fl_Check_Button btnUseWideCenter {
            label Wide
            callback {progdefaults.UseWideCenter = o->value();
progdefaults.changed = true;}
            tooltip {Show bandwidth tracks on waterfall} xywh {388 190 69 20} down_box DOWN_BOX
            code0 {o->value(progdefaults.UseWideCenter);}
          }
        }
        Fl_Group {} {
          label {Signal tracks} open
          xywh {505 122 113 96} box ENGRAVED_FRAME align 21
        } {
          Fl_Check_Button btnUseBWTracks {
            label ON
            callback {progdefaults.UseBWTracks = o->value();
progdefaults.changed = true;}
            tooltip {Show bandwidth tracks on waterfall} xywh {507 141 56 20} down_box DOWN_BOX
            code0 {o->value(progdefaults.UseBWTracks);}
          }
          Fl_Button btnBwTracksColor {
            label Color
            callback {if (fl_color_chooser("Track Lines",
  progdefaults.bwTrackRGBI.R,
  progdefaults.bwTrackRGBI.G,
  progdefaults.bwTrackRGBI.B) ) {
o->color(fl_rgb_color(progdefaults.bwTrackRGBI.R,progdefaults.bwTrackRGBI.G,progdefaults.bwTrackRGBI.B));
o->redraw();
wf->redraw_marker();
progdefaults.changed = true;
}}
            tooltip {Change color} xywh {507 164 20 20} color 1 align 8
            code0 {o->color(fl_rgb_color(progdefaults.bwTrackRGBI.R,progdefaults.bwTrackRGBI.G,progdefaults.bwTrackRGBI.B));}
          }
          Fl_Check_Button btnUseWideTracks {
            label Wide
            callback {progdefaults.UseWideTracks = o->value();
progdefaults.changed = true;}
            tooltip {Show bandwidth tracks on waterfall} xywh {507 188 74 20} down_box DOWN_BOX
            code0 {o->value(progdefaults.UseWideTracks);}
          }
        }
        Fl_Group {} {
          label Notch open
          xywh {625 122 113 96} box ENGRAVED_FRAME align 21
        } {
          Fl_Button btnNotchColor {
            label Color
            callback {if (fl_color_chooser("Notch Indicator",
  progdefaults.notchRGBI.R,
  progdefaults.notchRGBI.G,
  progdefaults.notchRGBI.B) ) {
o->color(fl_rgb_color(progdefaults.notchRGBI.R,progdefaults.notchRGBI.G,progdefaults.notchRGBI.B));
o->redraw();
wf->redraw_marker();
progdefaults.changed = true;
}}
            tooltip {Change color} xywh {627 164 20 20} color 1 align 8
            code0 {o->color(fl_rgb_color(progdefaults.notchRGBI.R,progdefaults.notchRGBI.G,progdefaults.notchRGBI.B));}
          }
        }
      }
      Fl_Group {} {
        label {Frequency scale} open
        xywh {249 223 496 55} box ENGRAVED_FRAME align 21
      } {
        Fl_Check_Button chkShowAudioScale {
          label {Always show audio frequencies}
          callback {progdefaults.wf_audioscale = o->value();
progdefaults.changed = true;}
          tooltip {Audio or RF frequencies on waterfall scale} xywh {259 246 241 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.wf_audioscale);}
        }
        Fl_Button btnWaterfallFont {
          label {Font...}
          callback {font_browser->fontNumber(progdefaults.WaterfallFontnbr);
font_browser->fontSize(progdefaults.WaterfallFontsize);
font_browser->fontColor(FL_FOREGROUND_COLOR);
font_browser->fontFilter(Font_Browser::ALL_TYPES);
font_browser->callback((Fl_Callback*)cbWaterfallFontBrowser);
font_browser->show();}
          tooltip {Select waterfall scale font} xywh {559 246 71 24}
        }
      }
      Fl_Group {} {
        label {Transmit signal} open
        xywh {249 279 496 65} box ENGRAVED_FRAME align 21
      } {
        Fl_Check_Button btnViewXmtSignal {
          label {Monitor transmitted signal}
          callback {progdefaults.viewXmtSignal=o->value();
progdefaults.changed = true;}
          tooltip {Show transmit signal on waterfall} xywh {259 305 208 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.viewXmtSignal);}
        }
        Fl_Counter valTxMonitorLevel {
          label {Signal Level (dB)}
          callback {progdefaults.TxMonitorLevel = pow(10.0, o->value()/20);
progdefaults.changed = true;}
          tooltip {Set level for good viewing} xywh {537 304 114 21} align 1 minimum -80 maximum 0 step 1 value -20
          code0 {o->value(20*log10(progdefaults.TxMonitorLevel));}
          code1 {o->lstep(10);}
        }
      }
    }
    Fl_Group {} {
      label {Waterfall/FFT Processing}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Waterfall/FFT Processing"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Waterfall/FFT Processing"));}
    } {
      Fl_Group {} {open
        xywh {251 25 490 135} box ENGRAVED_FRAME
      } {
        Fl_Counter cntLowFreqCutoff {
          label {Lower limit}
          callback {progdefaults.LowFreqCutoff=(int)(o->value());
progdefaults.changed = true;
setwfrange();}
          tooltip {Low frequency limit in Hz} xywh {296 43 70 22} type Simple align 8 minimum 0 maximum 500 step 50 value 300
          code0 {o->value(progdefaults.LowFreqCutoff);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Counter2
        }
        Fl_Check_Button btnWFaveraging {
          label {FFT averaging}
          callback {progdefaults.WFaveraging = o->value();
progdefaults.changed = true;}
          tooltip {Use averaging to decrease waterfall noise} xywh {296 79 120 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.WFaveraging);}
        }
        Fl_Group listboxFFTPrefilter {
          label {FFT prefilter window function}
          callback {progdefaults.wfPreFilter = o->index();
progdefaults.changed = true;} open
          tooltip {Select the type of FFT prefilter} xywh {296 109 120 24} box DOWN_BOX color 7 align 8
          code0 {listboxFFTPrefilter->add(_("Rectangular")); listboxFFTPrefilter->add("Blackman");}
          code1 {listboxFFTPrefilter->add("Hamming"); listboxFFTPrefilter->add("Hanning");}
          code2 {listboxFFTPrefilter->add(_("Triangular"));}
          code3 {listboxFFTPrefilter->index(progdefaults.wfPreFilter);
                       o->labelsize(FL_NORMAL_SIZE);}
          class Fl_ListBox
        } {}
        Fl_Counter cntrWfwidth {
          label {Upper limit}
          callback {progdefaults.HighFreqCutoff = (int)o->value();
progdefaults.changed = true;
setwfrange();}
          tooltip {High frequency limit in Hz} xywh {519 43 95 22} type Simple align 8 minimum 2000 maximum 4000 step 100 value 3000
          code0 {o->value(progdefaults.HighFreqCutoff);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Counter2
        }
        Fl_Counter wf_latency {
          label Latency
          callback {progdefaults.wf_latency = (int)o->value();
progdefaults.changed = true;}
          tooltip {Signal averaging over time
0 - least
4 - greatest} xywh {519 78 95 22} type Simple align 8 minimum 1 maximum 16 step 1 value 8
          code0 {o->value(progdefaults.wf_latency);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Counter2
        }
      }
      Fl_Group {} {open
        tooltip {Show me more or less waterfall} xywh {251 166 490 73} box ENGRAVED_FRAME align 17
      } {
        Fl_Counter cntr_drop_speed {
          label {Slow drop rate}
          callback {progdefaults.drop_speed=(int)o->value();
progdefaults.changed=true;}
          tooltip {Normal drop speed / value} xywh {296 188 95 22} type Simple align 11 minimum 4 maximum 32 step 2 value 4
          code0 {o->value(progdefaults.drop_speed);}
        }
      }
      Fl_Group {} {
        label {Changes take effect on next program startup} open
        tooltip {Show me more or less waterfall} xywh {251 246 490 73} box ENGRAVED_FRAME align 17
      } {
        Fl_Counter cntrWfheight {
          label {Waterfall height in pixels}
          callback {progdefaults.wfheight = (int)o->value();
progdefaults.changed = true;}
          tooltip {CPU usage increases with waterfall height} xywh {296 276 120 22} align 8 minimum 100 maximum 500 step 5 value 120
          code0 {o->value(progdefaults.wfheight);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          code2 {o->lstep(50);}
          class Fl_Counter2
        }
      }
    }
    Fl_Group {} {
      label {Waterfall/Mouse usage}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Waterfall/Mouse usage"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Waterfall/Mouse usage"));}
    } {
      Fl_Group {} {open
        xywh {211 50 580 170} box ENGRAVED_FRAME
      } {
        Fl_Check_Button btnWaterfallHistoryDefault {
          label {Left or right click always replays audio history}
          callback {progdefaults.WaterfallHistoryDefault = o->value();
progdefaults.changed = true;}
          tooltip {Replay trackline audio} xywh {266 65 340 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.WaterfallHistoryDefault);}
        }
        Fl_Check_Button btnWaterfallQSY {
          label {Dragging on the waterfall scale changes frequency}
          callback {progdefaults.WaterfallQSY = o->value();
progdefaults.changed = true;}
          tooltip {Enable drag cursor on waterfall scale} xywh {266 95 380 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.WaterfallQSY);}
        }
        Fl_Check_Button btnWaterfallClickInsert {
          label {Insert text on single left click}
          callback {progdefaults.WaterfallClickInsert = o->value();
if (progdefaults.WaterfallClickInsert)
    inpWaterfallClickText->activate();
else
    inpWaterfallClickText->deactivate();
progdefaults.changed = true;}
          tooltip {Insert special text in Rx panel
when waterfall clicked} xywh {266 137 225 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.WaterfallClickInsert);}
        }
        Fl_Input inpWaterfallClickText {
          callback {progdefaults.WaterfallClickText = o->value();
progdefaults.changed = true;}
          tooltip {The string <FREQ> is replaced with
the current modem and frequency} xywh {552 125 180 50} align 8
          class Fl_Input2
        }
        Fl_Group listboxWaterfallWheelAction {
          label {Wheel action}
          callback {progdefaults.WaterfallWheelAction = o->index();
progdefaults.changed = true;} open
          tooltip {Select how the mouse wheel
behaves inside the waterfall} xywh {266 178 150 22} box DOWN_BOX color 7 align 8
          code0 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_ListBox
        } {}
      }
    }
    Fl_Group {} {
      label {Waterfall/Spectrum}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Waterfall/Spectrum"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Waterfall/Spectrum"));}
      code3 {tab_tree->close(_("Waterfall"));}
    } {
      Fl_Group {} {
        label {Spectrum Scope / Waterfall interaction} open
        xywh {210 50 580 150} box ENGRAVED_BOX align 17
      } {
        Fl_Check_Button btnWFspectrum_center {
          label {left click transfers frequency to scope center frequency}
          callback {progdefaults.wf_spectrum_center = o->value();
progdefaults.changed = true;}
          tooltip {left click on WF recenters spectrum scope} xywh {275 92 365 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.wf_spectrum_center);}
        }
        Fl_Check_Button btnWFspectrum_dbvals {
          label {use waterfall range/limit values}
          callback {progdefaults.wf_spectrum_dbvals = o->value();
progdefaults.changed = true;}
          tooltip {values left/below waterfall} xywh {275 123 221 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.wf_spectrum_dbvals);}
        }
        Fl_Counter cntr_spectrum_freq_scale {
          label {freq scale = N * modem bandwidth}
          callback {progdefaults.wf_spectrum_scale_factor = o->value();
progdefaults.changed = true;}
          xywh {275 155 75 20} type Simple align 8 minimum 1 maximum 10 step 1 value 5
          code0 {o->value(progdefaults.wf_spectrum_scale_factor);}
        }
        Fl_Check_Button btn_spectrum_modem_scale {
          label use
          callback {progdefaults.wf_spectrum_modem_scale = o->value();
progdefaults.changed = true;}
          tooltip {scale spectrum display linked to modem bandwidth} xywh {585 155 55 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.wf_spectrum_modem_scale);}
        }
      }
    }
    Fl_Group {} {
      label {Web/Pskmail}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Web/Pskmail"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Web/Pskmail"));}
    } {
      Fl_Group {} {
        label {Mail Server Attributes} open
        xywh {256 52 490 174} box ENGRAVED_FRAME align 21
      } {
        Fl_Counter cntServerCarrier {
          label {Carrier frequency (Hz)}
          callback {progdefaults.ServerCarrier = (int)o->value();
wf->redraw_marker();
progdefaults.changed = true;}
          tooltip {Default listen / transmit frequency} xywh {307 80 80 20} type Simple align 8 minimum 500 maximum 2500 step 25 value 1500
          code0 {o->value(progdefaults.ServerCarrier);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Counter2
        }
        Fl_Counter cntServerOffset {
          label {Search range (Hz)}
          callback {progdefaults.ServerOffset = (int)o->value();
wf->redraw_marker();
progdefaults.changed = true;}
          tooltip {Listen for signals within this range} xywh {307 117 80 20} type Simple align 8 minimum 10 maximum 500 step 10 value 100
          code0 {o->value(progdefaults.SearchRange);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Counter2
        }
        Fl_Counter cntServerACQsn {
          label {Acquisition S/N (dB)}
          callback {progdefaults.ServerACQsn = o->value();
progdefaults.changed = true;}
          tooltip {Capture signals over this threshold} xywh {307 154 80 20} type Simple align 8 minimum 3 maximum 20 step 1 value 6
          code0 {o->value(progdefaults.ServerACQsn);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Counter2
        }
        Fl_Counter cntServerAFCrange {
          label {AFC range (Hz)}
          callback {progdefaults.ServerAFCrange = (int)o->value();
wf->redraw_marker();
progdefaults.changed = true;}
          tooltip {Limit AFC movement to this range} xywh {307 191 80 20} type Simple align 8 minimum 10 maximum 500 step 10 value 25
          code0 {o->value(progdefaults.SearchRange);}
          code1 {o->labelsize(FL_NORMAL_SIZE);}
          class Fl_Counter2
        }
        Fl_Check_Button btnPSKmailSweetSpot {
          label {Reset to Carrier}
          callback {progdefaults.PSKmailSweetSpot = o->value();
progdefaults.changed = true;}
          tooltip {When no signal present} xywh {562 80 142 20} down_box DOWN_BOX value 1
          code0 {o->value(progdefaults.PSKmailSweetSpot);}
        }
      }
      Fl_Group {} {
        label General open
        xywh {256 228 490 72} box ENGRAVED_FRAME align 21
      } {
        Fl_Check_Button btn_arq_s2n_report {
          label {Report ARQ frames average S/N}
          callback {progdefaults.Pskmails2nreport=o->value();}
          xywh {281 253 250 20} down_box DOWN_BOX
          code0 {o->value(progdefaults.Pskmails2nreport);}
        }
      }
    }
    Fl_Group {} {
      label {Web/WX}
      xywh {200 0 600 350} box ENGRAVED_BOX align 21 hide
      code0 {CONFIG_PAGE *p = new CONFIG_PAGE(o, _("Web/WX"));}
      code1 {config_pages.push_back(p);}
      code2 {tab_tree->add(_("Web/WX"));}
      code3 {tab_tree->close(_("Web"));}
    } {
      Fl_Input txt_wx_url {
        label {Access URL}
        callback {progdefaults.wx_url = o->value();
progdefaults.changed = true;}
        tooltip {Enter METAR data internet URL} xywh {295 63 430 25} when 1
        code0 {o->value(progdefaults.wx_url.c_str());}
      }
      Fl_Button btn_default_wx_url {
        label Default
        callback {txt_wx_url->value(
"https://tgftp.nws.noaa.gov/data/observations/metar/decoded");
progdefaults.wx_url=txt_wx_url->value();
progdefaults.changed=true;}
        tooltip {Default URL} xywh {727 63 60 25}
      }
      Fl_Input inpWXsta {
        label {METAR station ID code}
        callback {progdefaults.wx_sta = o->value();
progdefaults.changed = true;}
        tooltip {for example KMDQ for
Huntsville-Madison Executive Airport, AL} xywh {295 99 50 24} align 8
        code0 {o->value(progdefaults.wx_sta.c_str());}
      }
      Fl_Button btn_metar_search {
        label {Search on  web}
        callback {get_METAR_station();}
        xywh {528 99 130 24}
        code0 {\#include "weather.h"}
      }
      Fl_Check_Button btn_wx_full {
        label {Full report}
        callback {progdefaults.wx_full=o->value();
progdefaults.changed = true;}
        tooltip {Insert full METAR report} xywh {303 138 70 15} down_box DOWN_BOX
        code0 {o->value(progdefaults.wx_full);}
      }
      Fl_Check_Button btn_wx_station_name {
        label {METAR station location}
        callback {progdefaults.wx_station_name = o->value();
progdefaults.changed = true;}
        tooltip {Add geopolitical name of METAR station} xywh {303 162 70 15} down_box DOWN_BOX
        code0 {o->value(progdefaults.wx_station_name);}
      }
      Fl_Check_Button btn_wx_condx {
        label Conditions
        callback {progdefaults.wx_condx=o->value();
progdefaults.changed = true;}
        tooltip {current wx conditions} xywh {303 188 70 15} down_box DOWN_BOX
        code0 {o->value(progdefaults.wx_condx);}
      }
      Fl_Check_Button btn_wx_fahrenheit {
        label Fahrenheit
        callback {progdefaults.wx_fahrenheit=o->value();
progdefaults.changed = true;}
        tooltip {report Fahrenheit} xywh {303 227 70 15} down_box DOWN_BOX
        code0 {o->value(progdefaults.wx_fahrenheit);}
      }
      Fl_Check_Button btn_wx_celsius {
        label Celsius
        callback {progdefaults.wx_celsius=o->value();
progdefaults.changed = true;}
        tooltip {report Celsius} xywh {522 227 70 15} down_box DOWN_BOX
        code0 {o->value(progdefaults.wx_celsius);}
      }
      Fl_Check_Button btn_wx_mph {
        label {Miles / Hour}
        callback {progdefaults.wx_mph=o->value();
progdefaults.changed = true;}
        tooltip {report miles per hour} xywh {303 253 70 15} down_box DOWN_BOX
        code0 {o->value(progdefaults.wx_mph);}
      }
      Fl_Check_Button btn_wx_kph {
        label {kilometers / hour}
        callback {progdefaults.wx_kph=o->value();
progdefaults.changed = true;}
        tooltip {report kilometers per hour} xywh {521 253 70 15} down_box DOWN_BOX
        code0 {o->value(progdefaults.wx_kph);}
      }
      Fl_Check_Button btn_wx_inches {
        label {Inches Hg.}
        callback {progdefaults.wx_inches=o->value();
progdefaults.changed = true;}
        tooltip {report inches mercury} xywh {303 280 70 15} down_box DOWN_BOX
        code0 {o->value(progdefaults.wx_inches);}
      }
      Fl_Check_Button btn_wx_mbars {
        label mbars
        callback {progdefaults.wx_mbars=o->value();
progdefaults.changed = true;}
        tooltip {report millibars} xywh {522 280 70 15} down_box DOWN_BOX
        code0 {o->value(progdefaults.wx_mbars);}
      }
    }
    Fl_Button btnSaveConfig {
      label Save
      callback {progdefaults.saveDefaults();}
      xywh {492 355 130 22}
    }
    Fl_Return_Button btnCloseConfig {
      label Close
      callback {closeDialog();}
      xywh {665 355 130 22}
    }
    Fl_Button btnResetConfig {
      label {Restore defaults}
      callback {if (fl_choice2("This will effect every configuration item!\\nConfirm", "Yes", "No", NULL)) {
	progdefaults.resetDefaults();
	progdefaults.changed = false;
}}
      tooltip {WARNING - this will over write ALL settings} xywh {238 355 130 22}
    }
  }
}

Function {openConfig()} {return_type void
} {
  code {if (!dlgConfig) createConfig();
progdefaults.loadDefaults();} {}
}

Function {closeDialog()} {return_type void
} {
  code {if (dlgConfig) dlgConfig->hide();} {}
}

Function {WefaxDestDirSet(Fl_File_Chooser *w, void *userdata)} {return_type void
} {
  code {/* http://www.fltk.org/documentation.php/doc-1.1/Fl_File_Chooser.html */
if( ( w->value() != NULL ) && ( ! w->shown() ) ) {
	btnWefaxSaveDir->value( w->value() );
	btnWefaxSaveDir->redraw();
	cb_btnWefaxSaveDir( btnWefaxSaveDir, NULL );
}} {}
}

Function {KmlDestDirSet(Fl_File_Chooser *w, void *userdata)} {return_type void
} {
  code {/* http://www.fltk.org/documentation.php/doc-1.1/Fl_File_Chooser.html */
if( ( w->value() != NULL ) && ( ! w->shown() ) ) {
	btnKmlSaveDir->value( w->value() );
	btnKmlSaveDir->redraw();
	cb_btnKmlSaveDir( btnKmlSaveDir, NULL );
}} {}
}
