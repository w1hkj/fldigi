// generated by Fast Light User Interface Designer (fluid) version 1.0308

#include "debug_dialog.h"

Fl_Choice *mnu_debug_level=(Fl_Choice *)0;

static void cb_mnu_debug_level(Fl_Choice*, void*) {
  mnu_debug_level_cb();
}

Fl_Button *btn_clear_debug=(Fl_Button *)0;

static void cb_btn_clear_debug(Fl_Button*, void*) {
  clear_debug();
}

static void cb_source_code(Fl_Check_Button*, void*) {
  btn_debug_source_cb(0);
}

static void cb_source_code1(Fl_Check_Button*, void*) {
  btn_debug_source_cb(1);
}

static void cb_source_code2(Fl_Check_Button*, void*) {
  btn_debug_source_cb(2);
}

static void cb_source_code3(Fl_Check_Button*, void*) {
  btn_debug_source_cb(3);
}

static void cb_source_code4(Fl_Check_Button*, void*) {
  btn_debug_source_cb(4);
}

static void cb_source_code5(Fl_Check_Button*, void*) {
  btn_debug_source_cb(5);
}

static void cb_source_code6(Fl_Check_Button*, void*) {
  btn_debug_source_cb(6);
}

static void cb_source_code7(Fl_Check_Button*, void*) {
  btn_debug_source_cb(7);
}

static void cb_source_code8(Fl_Check_Button*, void*) {
  btn_debug_source_cb(8);
}

static void cb_source_code9(Fl_Check_Button*, void*) {
  btn_debug_source_cb(9);
}

static void cb_source_codea(Fl_Check_Button*, void*) {
  btn_debug_source_cb(10);
}

static void cb_source_codeb(Fl_Check_Button*, void*) {
  btn_debug_source_cb(11);
}

static void cb_source_codec(Fl_Check_Button*, void*) {
  btn_debug_source_cb(12);
}

static void cb_source_coded(Fl_Check_Button*, void*) {
  btn_debug_source_cb(13);
}

Fl_Check_Button *source_code[15]={(Fl_Check_Button *)0};

static void cb_source_codee(Fl_Check_Button*, void*) {
  btn_debug_source_cb(14);
}

Fl_Browser *btext=(Fl_Browser *)0;

Fl_Double_Window* debug_dialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(570, 240, "Event Log");
    w = o; if (w) {/* empty */}
    { Fl_Group* o = new Fl_Group(0, 0, 570, 60);
      o->box(FL_ENGRAVED_BOX);
      { Fl_Group* o = new Fl_Group(0, 0, 140, 60);
        { Fl_Group* o = new Fl_Group(0, 0, 130, 60);
          { Fl_Choice* o = mnu_debug_level = new Fl_Choice(6, 5, 120, 22);
            mnu_debug_level->down_box(FL_BORDER_BOX);
            mnu_debug_level->callback((Fl_Callback*)cb_mnu_debug_level);
            mnu_debug_level->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
            o->add("Quiet|Error|Warning|Info|Verbose|Debug");
            o->value(3);
          } // Fl_Choice* mnu_debug_level
          { btn_clear_debug = new Fl_Button(5, 34, 60, 21, "clear");
            btn_clear_debug->callback((Fl_Callback*)cb_btn_clear_debug);
          } // Fl_Button* btn_clear_debug
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(130, 0, 10, 60);
          o->end();
          Fl_Group::current()->resizable(o);
        } // Fl_Group* o
        o->end();
        Fl_Group::current()->resizable(o);
      } // Fl_Group* o
      { source_code[0] = new Fl_Check_Button(145, 5, 70, 15, "ARQ");
        source_code[0]->tooltip("ARQ server");
        source_code[0]->down_box(FL_DOWN_BOX);
        source_code[0]->callback((Fl_Callback*)cb_source_code);
      } // Fl_Check_Button* source_code[0]
      { source_code[1] = new Fl_Check_Button(145, 22, 70, 15, "Audio");
        source_code[1]->tooltip("Audio: OSS, PortAudio, PulseAudio");
        source_code[1]->down_box(FL_DOWN_BOX);
        source_code[1]->callback((Fl_Callback*)cb_source_code1);
      } // Fl_Check_Button* source_code[1]
      { source_code[2] = new Fl_Check_Button(145, 40, 70, 15, "Modem");
        source_code[2]->tooltip("All Modem code");
        source_code[2]->down_box(FL_DOWN_BOX);
        source_code[2]->callback((Fl_Callback*)cb_source_code2);
      } // Fl_Check_Button* source_code[2]
      { source_code[3] = new Fl_Check_Button(228, 5, 70, 15, "Rig i/o");
        source_code[3]->tooltip("Rigcat, Hamlib, serial port i/o");
        source_code[3]->down_box(FL_DOWN_BOX);
        source_code[3]->callback((Fl_Callback*)cb_source_code3);
      } // Fl_Check_Button* source_code[3]
      { source_code[4] = new Fl_Check_Button(228, 22, 70, 15, "Server");
        source_code[4]->tooltip("XMLRPC server");
        source_code[4]->down_box(FL_DOWN_BOX);
        source_code[4]->callback((Fl_Callback*)cb_source_code4);
      } // Fl_Check_Button* source_code[4]
      { source_code[5] = new Fl_Check_Button(228, 40, 70, 15, "Client");
        source_code[5]->tooltip("XMLRPC client (flrig i/o)");
        source_code[5]->down_box(FL_DOWN_BOX);
        source_code[5]->callback((Fl_Callback*)cb_source_code5);
      } // Fl_Check_Button* source_code[5]
      { source_code[6] = new Fl_Check_Button(311, 5, 70, 15, "Spotter");
        source_code[6]->tooltip("Spotter client");
        source_code[6]->down_box(FL_DOWN_BOX);
        source_code[6]->callback((Fl_Callback*)cb_source_code6);
      } // Fl_Check_Button* source_code[6]
      { source_code[7] = new Fl_Check_Button(311, 22, 70, 15, "Data");
        source_code[7]->tooltip("Data sources i/o");
        source_code[7]->down_box(FL_DOWN_BOX);
        source_code[7]->callback((Fl_Callback*)cb_source_code7);
      } // Fl_Check_Button* source_code[7]
      { source_code[8] = new Fl_Check_Button(311, 40, 70, 15, "Synop");
        source_code[8]->tooltip("Synop code");
        source_code[8]->down_box(FL_DOWN_BOX);
        source_code[8]->callback((Fl_Callback*)cb_source_code8);
      } // Fl_Check_Button* source_code[8]
      { source_code[9] = new Fl_Check_Button(394, 5, 70, 15, "KML");
        source_code[9]->tooltip("KML code");
        source_code[9]->down_box(FL_DOWN_BOX);
        source_code[9]->callback((Fl_Callback*)cb_source_code9);
      } // Fl_Check_Button* source_code[9]
      { source_code[10] = new Fl_Check_Button(394, 22, 70, 15, "KISS");
        source_code[10]->tooltip("KISS code");
        source_code[10]->down_box(FL_DOWN_BOX);
        source_code[10]->callback((Fl_Callback*)cb_source_codea);
      } // Fl_Check_Button* source_code[10]
      { source_code[11] = new Fl_Check_Button(394, 40, 70, 15, "MacLog");
        source_code[11]->tooltip("Mac Logger i/o");
        source_code[11]->down_box(FL_DOWN_BOX);
        source_code[11]->callback((Fl_Callback*)cb_source_codeb);
      } // Fl_Check_Button* source_code[11]
      { source_code[12] = new Fl_Check_Button(477, 5, 70, 15, "FD Log");
        source_code[12]->tooltip("FD log i/o");
        source_code[12]->down_box(FL_DOWN_BOX);
        source_code[12]->callback((Fl_Callback*)cb_source_codec);
      } // Fl_Check_Button* source_code[12]
      { source_code[13] = new Fl_Check_Button(477, 22, 70, 15, "N3FJP log");
        source_code[13]->tooltip("N3FJP log i/o");
        source_code[13]->down_box(FL_DOWN_BOX);
        source_code[13]->callback((Fl_Callback*)cb_source_coded);
      } // Fl_Check_Button* source_code[13]
      { source_code[14] = new Fl_Check_Button(477, 40, 70, 15, "Other");
        source_code[14]->tooltip("All other code");
        source_code[14]->down_box(FL_DOWN_BOX);
        source_code[14]->callback((Fl_Callback*)cb_source_codee);
      } // Fl_Check_Button* source_code[14]
      o->end();
    } // Fl_Group* o
    { btext = new Fl_Browser(0, 60, 570, 180);
      Fl_Group::current()->resizable(btext);
    } // Fl_Browser* btext
    o->size_range(570, 240);
    o->end();
  } // Fl_Double_Window* o
  return w;
}
